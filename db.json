{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"08a1583c86bb1218a9d1a0cfc65bb3dd9325f55b","modified":1624412259997},{"_id":"source/tags/index.md","hash":"9c54d025494f9b8c74259a9cc61380809eac8719","modified":1624412259998},{"_id":"source/categories/index.md","hash":"d74dea876104aae5e86f128ddbc114701e5ff5b7","modified":1624412259997},{"_id":"source/_posts/Hexo/hexo常用命令.md","hash":"87a5a2f01d2f95ed7d1482492ccbe8f45c4687de","modified":1624517463037},{"_id":"source/_posts/MQ/RabbitMQ.md","hash":"d73229c4144e77e4a8a09eb229b154f5fafd7967","modified":1624529528664},{"_id":"source/_posts/MQ/AMQP.md","hash":"9a6a9e6541a940c72ec0fd9aaa3c8d2040a69b67","modified":1624586879568},{"_id":"source/_posts/MySQL/MySQL-基础.md","hash":"27e92c22f403a791a9a4d54aedb73957b5067694","modified":1624517506786},{"_id":"source/_posts/MQ/消息中间件入门与简介.md","hash":"d4c438b9fdea89dc762fa541a056591c5b606f34","modified":1624586879568},{"_id":"source/_posts/Markdown/Markdown语法.md","hash":"acdc1fc91b45416fd8205d17a782080d95881689","modified":1624518810458},{"_id":"source/_posts/MySQL/MySQL-日志系统.md","hash":"8a01128fe958b905929a86599ed7fb33aff1d1cb","modified":1624522039831},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1624412259998},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1624412259998},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1624412259998},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1624412260003},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1624412260003},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1624412260003},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1624412260003},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1624412260004},{"_id":"themes/next/_config.yml","hash":"7f6756a6d26f6994c5ebfc88579c614f1755f2cd","modified":1624586879570},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1624412260004},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1624412260010},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1624412260035},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1624412259999},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1624412259999},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1624412260000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1624412260001},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1624412260001},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1624412260001},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1624412260001},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1624412260002},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1624412260002},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1624412260002},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1624412260002},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1624412260005},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1624412260005},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1624412260005},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1624412260005},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1624412260006},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1624412260006},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1624412260006},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1624412260006},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1624412260007},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1624412260010},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1624412260011},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1624412260011},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1624412260011},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1624412260011},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1624412260012},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1624412260012},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1624412260012},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1624412260012},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1624412260013},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1624412260013},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1624412260013},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1624412260013},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1624412260014},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1624412260014},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1624412260014},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1624412260014},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1624412260015},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1624412260015},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1624412260015},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1624412260015},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1624412260015},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1624412260016},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1624412260033},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1624412260033},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1624412260034},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1624412260034},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1624412260034},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1624412260034},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1624412260041},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1624412259999},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1624412260000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1624412260000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1624412260000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1624412260007},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1624412260007},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1624412260007},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1624412260007},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1624412260008},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1624412260008},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1624412260008},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1624412260008},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1624412260009},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1624412260009},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1624412260009},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1624412260010},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1624412260010},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1624412260016},{"_id":"themes/next/layout/_macro/post.swig","hash":"71e4dc5a56cbc403d9785526f7719d824f4c8911","modified":1624412260016},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1624412260017},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1624412260017},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ce2c1000be53443914517aa90c70f9b72c30a672","modified":1624515974182},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1624412260019},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1624412260020},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1624412260022},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1624412260023},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1624412260023},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1624412260024},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1624412260025},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1624412260025},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1624412260026},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1624412260029},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1624412260030},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1624412260030},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1624412260035},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1624412260038},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1624412260038},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1624412260038},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1624412260039},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1624412260039},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1624412260040},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1624412260040},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1624412260041},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1624412260041},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1624412260042},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1624412260042},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1624412260042},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1624412260042},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1624412260043},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1624412260043},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1624412260043},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1624412260043},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1624412260043},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1624412260044},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1624412260075},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1624412260075},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1624412260075},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1624412260076},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1624412260076},{"_id":"themes/next/source/js/utils.js","hash":"0343eb03ed76c0b030f7807b82a00772135ba463","modified":1624412260077},{"_id":"themes/next/source/css/_colors.styl","hash":"19c836f367977fb712b9868f3281ff5d757a8d5c","modified":1624412260045},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1624412260063},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1624412260068},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1624412260069},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1624412260069},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1624412260070},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1624412260070},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1624412260070},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1624412260071},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1624412260071},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1624412260072},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1624412260072},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1624412260073},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1624412260073},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1624412260073},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1624412260073},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1624412260074},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1624412260074},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1624412260077},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1624412260017},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1624412260018},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1624412260018},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1624412260018},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1624412260018},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1624412260019},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1624412260019},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1624412260019},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1624412260020},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1624412260020},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1624412260020},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1624412260021},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1624412260021},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1624412260021},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1624412260022},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1624412260022},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1624412260022},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1624412260022},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1624412260023},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1624412260024},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1624412260024},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1624412260024},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1624412260025},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1624412260025},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1624412260026},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1624412260026},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1624412260026},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1624412260028},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1624412260028},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1624412260030},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1624412260030},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1624412260030},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1624412260031},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1624412260031},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1624412260031},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1624412260031},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1624412260032},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1624412260032},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1624412260032},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1624412260032},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1624412260032},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1624412260035},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1624412260033},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1624412260036},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1624412260036},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1624412260036},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1624412260037},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1624412260036},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1624412260037},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1624412260037},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1624412260037},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1624412260038},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1624412260038},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1624412260028},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1624412260028},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1624412260029},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1624412260029},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1624412260029},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1624412260029},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1624412260077},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1624412260076},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1624412260067},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1624412260068},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1624412260067},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"799fdf4f258a51d45d1e2b02fb59b337e46b5b3c","modified":1624412260068},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dae390efcb5da9c021ad7f25fe2d39ff36938cc6","modified":1624412260068},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1624412260078},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1624412260078},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1624412260078},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1624412260079},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1624412260079},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1624412260084},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1624412260085},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1624412260046},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1624412260046},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1624412260046},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1624412260051},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1624412260055},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"220da37051ed5dac9cf7bd126451f6aba4f94d21","modified":1624412260058},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1624412260058},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1624412260058},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1624412260060},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1624412260060},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1624412260060},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1624412260060},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1624412260062},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1624412260064},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1624412260064},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1624412260064},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1624412260064},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1624412260064},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1624412260063},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1624412260065},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1624412260065},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"5e644b1303ab6dcd1b65ee0fd6b91309b04ce64d","modified":1624412260065},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1624412260065},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1624412260065},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1624412260066},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1624412260080},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1624412260080},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1624412260080},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1624412260066},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1624412260066},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1624412260066},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1624412260066},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1624412260067},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1624412260067},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1624412260055},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1624412260047},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1624412260047},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1624412260047},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1624412260047},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1624412260048},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89f76380091f1be49936c69bac02e984dae5ff87","modified":1624412260048},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1624412260048},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1624412260049},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1624412260049},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1624412260049},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1624412260049},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1624412260049},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1624412260050},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1624412260050},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1624412260050},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1624412260050},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1624412260051},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1624412260051},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1624412260051},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1624412260052},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1624412260052},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1624412260052},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1624412260052},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1624412260055},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1624412260056},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1624412260056},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1624412260056},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1624412260056},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1624412260056},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1624412260057},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1624412260057},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1624412260057},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1624412260057},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1624412260053},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1624412260053},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1624412260054},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1624412260054},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1624412260054},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1624412260054},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1624412260055},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1624412260058},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1624412260059},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1624412260059},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1624412260059},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1624412260061},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1624412260061},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1624412260061},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1624412260061},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1624412260061},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1624412260062},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1624412260062},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1624412260053},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1624412260083},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1624412260084},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1624412260082}],"Category":[{"name":"hexo","_id":"ckqbp4hn30004d1s6354o9qc4"},{"name":"MQ","_id":"ckqbp4hn90009d1s6945x8j17"},{"name":"Markdown","_id":"ckqbp4hna000dd1s6drq3gzxv"},{"name":"MySQL","_id":"ckqbp4hnb000hd1s6gj6v1q76"}],"Data":[],"Page":[{"title":"标签","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\n---\n","date":"2021-06-23T01:37:39.998Z","updated":"2021-06-23T01:37:39.998Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckqbp4hmu0000d1s6gwfze0hz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ntype: \"about\"\n---\n","date":"2021-06-23T01:37:39.997Z","updated":"2021-06-23T01:37:39.997Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckqbp4hn00002d1s6dxwsaclx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\n---\n","date":"2021-06-23T01:37:39.997Z","updated":"2021-06-23T01:37:39.997Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckqbp4hn60006d1s62f2g7b98","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo常用命令.md","date":"2021-06-19T16:00:00.000Z","author":"神奇的荣荣","summary":"","_content":"\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)","source":"_posts/Hexo/hexo常用命令.md","raw":"---\ntitle: hexo常用命令.md\ndate: 2021-06-20 00:00:00\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: hexo\ncategories: hexo\n---\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!-- more -->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)","slug":"Hexo/hexo常用命令","published":1,"updated":"2021-06-24T06:51:03.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hmx0001d1s61693gdpx","content":"<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"RabbitMQ","date":"2021-06-21T16:00:00.000Z","author":"神奇的荣荣","summary":"","_content":"\naaaaa","source":"_posts/MQ/RabbitMQ.md","raw":"---\ntitle: RabbitMQ\ndate: 2021-06-22 00:00:00\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: MQ\ncategories: MQ\n---\n\naaaaa","slug":"MQ/RabbitMQ","published":1,"updated":"2021-06-24T10:12:08.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hn10003d1s6hi59flr5","content":"<p>aaaaa</p>\n","site":{"data":{}},"excerpt":"","more":"<p>aaaaa</p>\n"},{"title":"Markdown语法","date":"2021-04-30T16:00:00.000Z","author":"神奇的荣荣","summary":"","_content":"\n# Markdown标题\n\n## 使用 = 和 - 表示一级和二级标题\n\n= 和 - 标记语法格式如下：\n```\n\n我展示的是一级标题\n=================\n\n我展示的是二级标题\n---------------\n\n```\n\n***\n\n<!-- more -->\n\n## 使用 # 号标记\n\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n\n```\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n```\n\n***\n\n# Markdown 段落格式\n\n## 段落\n\nMarkdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg)\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg)\n\n***\n\n## 字体\n\nMarkdown 可以使用以下几种字体：\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/md3.gif)\n\n***\n\n## 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n```\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg)\n\n*****\n\n## 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n```\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/B5270A31-15D0-410B-AE1D-B9655B8F331C.jpg)\n\n*****\n\n## 下划线\n\n下划线可以通过 HTML 的 <u> 标签来实现：\n```\n<u>带下划线文本</u>\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/05A27273-B66D-43DE-A3DB-0D32FF024093.jpg)\n\n*****\n\n## 脚注\n\n脚注是对文本的补充说明。  \nMarkdown 脚注的格式如下:\n```\n[^要注明的文本]\n```\n\n以下实例演示了脚注的用法：\n```\n创建脚注格式类似这样 [^RUNOOB]。\n\n[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！\n```\n\n演示效果如下：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/md5.gif)","source":"_posts/Markdown/Markdown语法.md","raw":"---\ntitle: Markdown语法\ndate: 2021-05-01 00:00:00\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: Markdown\ncategories: Markdown\n---\n\n# Markdown标题\n\n## 使用 = 和 - 表示一级和二级标题\n\n= 和 - 标记语法格式如下：\n```\n\n我展示的是一级标题\n=================\n\n我展示的是二级标题\n---------------\n\n```\n\n***\n\n<!-- more -->\n\n## 使用 # 号标记\n\n使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。\n\n```\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n```\n\n***\n\n# Markdown 段落格式\n\n## 段落\n\nMarkdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg)\n\n当然也可以在段落后面使用一个空行来表示重新开始一个段落。  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg)\n\n***\n\n## 字体\n\nMarkdown 可以使用以下几种字体：\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/md3.gif)\n\n***\n\n## 分隔线\n\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：\n```\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg)\n\n*****\n\n## 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：\n```\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/B5270A31-15D0-410B-AE1D-B9655B8F331C.jpg)\n\n*****\n\n## 下划线\n\n下划线可以通过 HTML 的 <u> 标签来实现：\n```\n<u>带下划线文本</u>\n```\n\n显示效果如下所示：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/05A27273-B66D-43DE-A3DB-0D32FF024093.jpg)\n\n*****\n\n## 脚注\n\n脚注是对文本的补充说明。  \nMarkdown 脚注的格式如下:\n```\n[^要注明的文本]\n```\n\n以下实例演示了脚注的用法：\n```\n创建脚注格式类似这样 [^RUNOOB]。\n\n[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！\n```\n\n演示效果如下：  \n![效果图](https://www.runoob.com/wp-content/uploads/2019/03/md5.gif)","slug":"Markdown/Markdown语法","published":1,"updated":"2021-06-24T07:13:30.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hn60007d1s6bhy67w9z","content":"<h1 id=\"Markdown标题\"><a href=\"#Markdown标题\" class=\"headerlink\" title=\"Markdown标题\"></a>Markdown标题</h1><h2 id=\"使用-和-表示一级和二级标题\"><a href=\"#使用-和-表示一级和二级标题\" class=\"headerlink\" title=\"使用 = 和 - 表示一级和二级标题\"></a>使用 = 和 - 表示一级和二级标题</h2><p>= 和 - 标记语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我展示的是一级标题</span><br><span class=\"line\">=================</span><br><span class=\"line\"></span><br><span class=\"line\">我展示的是二级标题</span><br><span class=\"line\">---------------</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<span id=\"more\"></span>\n\n<h2 id=\"使用-号标记\"><a href=\"#使用-号标记\" class=\"headerlink\" title=\"使用 # 号标记\"></a>使用 # 号标记</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Markdown-段落格式\"><a href=\"#Markdown-段落格式\" class=\"headerlink\" title=\"Markdown 段落格式\"></a>Markdown 段落格式</h1><h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg\" alt=\"效果图\"></p>\n<p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体文本*</span><br><span class=\"line\">_斜体文本_</span><br><span class=\"line\">**粗体文本**</span><br><span class=\"line\">__粗体文本__</span><br><span class=\"line\">***粗斜体文本***</span><br><span class=\"line\">___粗斜体文本___</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/md3.gif\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">* * *</span><br><span class=\"line\"></span><br><span class=\"line\">*****</span><br><span class=\"line\"></span><br><span class=\"line\">- - -</span><br><span class=\"line\"></span><br><span class=\"line\">----------</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUNOOB.COM</span><br><span class=\"line\">GOOGLE.COM</span><br><span class=\"line\">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/B5270A31-15D0-410B-AE1D-B9655B8F331C.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>下划线可以通过 HTML 的 <u> 标签来实现：</u></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/05A27273-B66D-43DE-A3DB-0D32FF024093.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是对文本的补充说明。<br>Markdown 脚注的格式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^要注明的文本]</span><br></pre></td></tr></table></figure>\n\n<p>以下实例演示了脚注的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class=\"line\"></span><br><span class=\"line\">[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure>\n\n<p>演示效果如下：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/md5.gif\" alt=\"效果图\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Markdown标题\"><a href=\"#Markdown标题\" class=\"headerlink\" title=\"Markdown标题\"></a>Markdown标题</h1><h2 id=\"使用-和-表示一级和二级标题\"><a href=\"#使用-和-表示一级和二级标题\" class=\"headerlink\" title=\"使用 = 和 - 表示一级和二级标题\"></a>使用 = 和 - 表示一级和二级标题</h2><p>= 和 - 标记语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">我展示的是一级标题</span><br><span class=\"line\">=================</span><br><span class=\"line\"></span><br><span class=\"line\">我展示的是二级标题</span><br><span class=\"line\">---------------</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>","more":"<h2 id=\"使用-号标记\"><a href=\"#使用-号标记\" class=\"headerlink\" title=\"使用 # 号标记\"></a>使用 # 号标记</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Markdown-段落格式\"><a href=\"#Markdown-段落格式\" class=\"headerlink\" title=\"Markdown 段落格式\"></a>Markdown 段落格式</h1><h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg\" alt=\"效果图\"></p>\n<p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体文本*</span><br><span class=\"line\">_斜体文本_</span><br><span class=\"line\">**粗体文本**</span><br><span class=\"line\">__粗体文本__</span><br><span class=\"line\">***粗斜体文本***</span><br><span class=\"line\">___粗斜体文本___</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/md3.gif\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">* * *</span><br><span class=\"line\"></span><br><span class=\"line\">*****</span><br><span class=\"line\"></span><br><span class=\"line\">- - -</span><br><span class=\"line\"></span><br><span class=\"line\">----------</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUNOOB.COM</span><br><span class=\"line\">GOOGLE.COM</span><br><span class=\"line\">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/B5270A31-15D0-410B-AE1D-B9655B8F331C.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>下划线可以通过 HTML 的 <u> 标签来实现：</u></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下所示：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/05A27273-B66D-43DE-A3DB-0D32FF024093.jpg\" alt=\"效果图\"></p>\n<hr>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注是对文本的补充说明。<br>Markdown 脚注的格式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^要注明的文本]</span><br></pre></td></tr></table></figure>\n\n<p>以下实例演示了脚注的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class=\"line\"></span><br><span class=\"line\">[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure>\n\n<p>演示效果如下：<br><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/md5.gif\" alt=\"效果图\"></p>"},{"title":"MySQL基础","date":"2021-06-22T15:30:00.000Z","author":"神奇的荣荣","summary":"","_content":"\naaaaaaaaaaaaa","source":"_posts/MySQL/MySQL-基础.md","raw":"---\ntitle: MySQL基础\ndate: 2021-06-22 23:30:00\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: MySQL\ncategories: MySQL\n---\n\naaaaaaaaaaaaa","slug":"MySQL/MySQL-基础","published":1,"updated":"2021-06-24T06:51:46.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hn70008d1s62v83chi4","content":"<p>aaaaaaaaaaaaa</p>\n","site":{"data":{}},"excerpt":"","more":"<p>aaaaaaaaaaaaa</p>\n"},{"title":"AMQP","date":"2021-06-20T16:00:00.000Z","author":"神奇的荣荣","summary":"","_content":"\n# AMQP是什么\n\nAMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递异步消息的网络协议。\n\n在异步通讯中，消息不会立刻到达接收方，而是被存放到一个容器中，当满足一定的条件之后，消息会被容器发送给接收方，这个容器即消息队列，而完成这个功能需要双方和容器以及其中的各个组件遵守统一的约定和规则，AMQP就是这样的一种协议，消息发送与接受的双方遵守这个协议可以实现异步通讯。这个协议约定了消息的格式和工作方式。\n\n***\n\n<!-- more -->\n\n# 2.AMQP模型\n\n## 2.1.AMQP模型\n\n![AMQP模型](https://niubilityoyr.github.io/images/MQ/amqp模型.png)\n\n1）Broker  \n表示消息队列服务器实体（一个进程）。  \n一个server，接受客户端的连接，上线AMQP实体服务。  \n\n2）Connection  \n连接  \n应用程序与broker的网络连接，TCP/IP套接字连接。  \n\n3）Channel  \n消息通道  \n几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对多个  \nChannel，每个Channel代表一个会话任务。\n\n4）Message  \n消息，消息是不具名的，它由消息头和消息体组成。消息是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）> ，priority（相对于其他消优先权），delivery-mode（指出该消息可能需要持久性存储）等\n\n5）Exchange  \n交换机，用来接受生产者发送的消息，并将这些消息路由转发到某个队列。\n\n6）Queue  \n消息队列，存储消息，用于发送给消费者。  \n它是消息的容器，也是消息的终点。一个消息可以投入多个队列。  \n消息一直在队列里面，等待消费者连接到这个队列将其取走。\n\n7）Binding  \n绑定，消息队列和交换器之间的关联。  \n一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\n\n8）Routing Key  \n路由关键字  \n一个消息头，交换机可以用这个消息头决定如何路由某条消息。\n\n9）Publisher  \n消息生产者，是一个向交换器发布消息的客户端应用程序（进程）。\n\n10）Consumer  \n消息消费者，是一个从消息队列中取得消息的客户端应用程序（进程）。\n\n11）Virtual Host  \n虚拟主机\n\n***\n\n## 2.2.工作过程\n\n生产者发布消息流程：  \n1、生产者和Broker建立TCP连接。  \n2、生产者和Broker建立通道。  \n3、生产者通过通道发送消息给Broker，由Exchange将消息进行转发。  \n4、Exchange将消息转发到指定的Queue（队列）  \n\n消费者消费消息流程：  \n1、消费者和Broker建立TCP连接  \n2、消费者和Broker建立通道  \n3、消费者监听指定的Queue（队列）  \n4、当有消息到达Queue时Broker默认将消息推送给消费者。  \n5、消费者接收到消息。  \n6、ack回复  \n\n***\n\n# Exchange交换机\n\n## 默认交换机（default exchange）\n\n默认交换机（default exchange）实际上是一个由消息代理预先声明好的没有名字（名字为空字符串）的直连交换机（direct exchange）。\n\n它有一个特殊属性使得它对于简单应用特别有用处：\n那就是每新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。\n\n举个栗子：当你声明了一个名为\"search-indexing-online\"的队列，AMQP代理会自动将其绑定到默认交换机上，绑定（binding）的路由键名称也是为\"search-indexing-online\"。因此，当携带着名为\"search-indexing-online\"的路由键的消息被发送到默认交换机的时候，此消息会被默认交换机路由至名为\"search-indexing-online\"的队列中。换句话说，默认交换机看起来貌似能够直接将消息投递给队列，尽管技术上并没有做相关的操作。\n\n***\n\n## 直连交换机（direct exchange）\n\n直连交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的。直连交换机用来处理消息的单播路由（unicast routing）（尽管它也可以处理多播路由）。\n\n下面介绍它是如何工作的：  \n1）将一个队列绑定到某个交换机上，同时赋予该绑定一个路由键（routing key）  \n2）当一个携带着路由键为R的消息被发送给直连交换机时，交换机会把它路由给绑定值同样为R的队列。\n\n直连交换机经常用来循环分发任务给多个消费者（我们称之为轮询）。  \n比如说有3个消费者，4个任务。分别分发每个消费者一个任务后，第4个任务又分发给了第一个消费者。综上，我们很容易得出一个结论：在AMQP 0-9-1中，消息的负载均衡是发生在消费者（consumer）之间的，而不是队列（queue）之间。\n\n直连型交换机图例：  \n![直连交换机图解](https://niubilityoyr.github.io/images/MQ/直连交换机图解.png)\n\n当生产者（P）发送消息时 Rotuing key=booking 时，这时候将消息传送给 Exchange，Exchange 获取到生产者发送过来消息后，会根据自身的规则进行与匹配相应的 Queue，这时发现 Queue1 和 Queue2 都符合，就会将消息传送给这两个队列。\n\n如果我们以 Rotuing key=create 和 Rotuing key=confirm 发送消息时，这时消息只会被推送到 Queue2 队列中，其他 Routing Key 的消息将会被丢弃。\n\n***\n\n## 扇型交换机（funout exchange）\n\n扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列，而不理会绑定的路由键。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的拷贝分别发送给这所有的N个队列。扇型用来交换机处理消息的广播路由（broadcast routing）。\n\n因为扇型交换机投递消息会拷贝到所有绑定到它的队列，所以他的应用案例都极其相似：\n* 1）大规模多用户在线（MMO）游戏可以使用它来处理排行榜更新等全局事件\n* 2）体育新闻网站可以用它来近乎实时地将比分更新分发给移动客户端\n* 3）分发系统使用它来广播各种状态和配置更新\n* 4）在群聊的时候，它被用来分发消息给参与群聊的用户。（AMQP没有内置presence的概念，因此XMPP可能会是个更好的选择）\n\n扇型交换机图例：  \n![扇型交换机图解](https://niubilityoyr.github.io/images/MQ/扇型交换机图解.png)\n\n上图所示，生产者（P）生产消息 1 将消息 1 推送到 Exchange，由于 Exchange Type=fanout 这时候会遵循 fanout 的规则将消息推送到所有与它绑定 Queue，也就是图上的两个 Queue 最后两个消费者消费。\n\n***\n\n## 主题交换机（topic exchanges）\n\n主题交换机（topic exchanges）通过对消息的路由键和队列到交换机的绑定模式之间的匹配，将消息路由给一个或多个队列。主题交换机经常用来实现各种分发/订阅模式及其变种。主题交换机通常用来实现消息的多播路由（multicast routing）。\n\n主题交换机规则：  \n前面提到的 direct 规则是严格意义上的匹配，换言之 Routing Key 必须与 Binding Key 相匹配的时候才将消息传送给 Queue.  \n而Topic 的路由规则是一种模糊匹配，可以通过通配符满足一部分规则就可以传送。  \n\n它的约定是：  \n1）binding key 中可以存在两种特殊字符 “” 与“#”，用于做模糊匹配，其中 “” 用于匹配一个单词，“#”用于匹配多个单词（可以是零个）   \n2）routing key 为一个句点号 “.” 分隔的字符串（我们将被句点号 “. ” 分隔开的每一段独立的字符串称为一个单词），如“stock.usd.> nyse”、“nyse.vmw”、“quick.> orange.rabbit”  \n3）binding key 与 routing key 一样也是句点号 “.” 分隔的字符串\n\n主题交换机图例：  \n![主题交换机图解](https://niubilityoyr.github.io/images/MQ/主题交换机图解.png)\n\n当生产者发送消息 Routing Key=F.C.E 的时候，这时候只满足 Queue1，所以会被路由到 Queue 中，如果 Routing Key=A.C.E 这时候会被同是路由到 Queue1 和 Queue2 中，如果 Routing Key=A.F.B 时，这里只会发送一条消息到 Queue2 中。\n\n***\n\n### 使用场景\n\n主题交换机拥有非常广泛的用户案例。无论何时，当一个问题涉及到那些想要有针对性的选择需要接收消息的 多消费者/多应用（multiple consumers/applications） 的时候，主题交换机都可以被列入考虑范围。\n\n使用案例：  \n1）分发有关于特定地理位置的数据，例如销售点  \n2）由多个工作者（workers）完成的后台任务，每个工作者负责处理某些特定的任务  \n3）股票价格更新（以及其他类型的金融数据更新）  \n4）涉及到分类或者标签的新闻更新（例如，针对特定的运动项目或者队伍）  \n5）云端的不同种类服务的协调  \n6）分布式架构/基于系统的软件封装，其中每个构建者仅能处理一个特定的架构或者系统。\n\n***\n\n## 头交换机（headers exchanges）\n\n有时消息的路由操作会涉及到多个属性，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。\n\n我们可以绑定一个队列到头交换机上，并给他们之间的绑定使用多个用于匹配的头（header）。这个案例中，消息代理得从应用开发者那儿取到更多一段信息，换句话说，它需要考虑某条消息（message）是需要部分匹配还是全部匹配。上边说的“更多一段消息”就是\"x-match\"参数。当\"x-match\"设置为“any”时，消息头的任意一个值被匹配就可以满足条件，而当\"x-match\"设置为“all”的时候，就需要消息头的所有值都匹配成功。\n\n头交换机可以视为直连交换机的另一种表现形式。头交换机能够像直连交换机一样工作，不同之处在于头交换机的路由规则是建立在头属性值之上，而不是路由键。路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。\n\n***\n\n# Queue队列\n\nAMQP中的队列（Queue）跟其他消息队列或任务队列中的队列是很相似的，它们存储着即将被应用消费掉的消息。\n\n## 队列属性\n\n队列跟交换机共享某些属性，但是队列也有一些另外的属性。  \n1）Name  \n2）Durable（消息代理重启后，队列依旧存在）  \n3）Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）  \n4）Auto-delete（当最后一个消费者退订后即被删除）  \n5）Arguments（一些消息代理用他来完成类似与 TTL 的某些额外功能）  \n\n***\n\n## 队列创建\n\n队列在声明（declare）后才能被使用。如果一个队列尚不存在，声明一个队列会创建它。如果声明的队列已经存在，并且属性完全相同，那么此次声明不会对原有队列产生任何影响。如果声明中的属性与已存在队列的属性有差异，那么一个错误代码为406的通道级异常就会被抛出。\n\n***\n\n## 队列名称\n\n队列的名字可以由应用（application）来取，也可以让消息代理（broker）直接生成一个。队列的名字可以是最多255字节的一个utf-8字符串。若希望AMQP消息代理生成队列名，需要给队列的name参数赋值一个空字符串：在同一个通道（channel）的后续的方法（method）中，我们可以使用空字符串来表示之前生成的队列名称。之所以之后的方法可以获取正确的队列名是因为通道可以默默地记住消息代理最后一次生成的队列名称。\n以\"amq.\"开始的队列名称被预留做消息代理内部使用。如果试图在队列声明时打破这一规则的话，一个通道级的403 (ACCESS_REFUSED)错误会被抛出。\n\n***\n\n## 队列持久化\n\n持久化队列（Durable queues）会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。并不是所有的场景和案例都需要将队列持久化。  \n持久化的队列并不会使得路由到它的消息也具有持久性。倘若消息代理挂掉了，重新启动，那么在重启的过程中持久化队列会被重新声明，无论怎样，只有经过持久化的消息才能被重新恢复。\n\n***\n\n# Binding绑定\n\n绑定（Binding）是交换机（exchange）将消息（message）路由给队列（queue）所需遵循的规则。如果要指示交换机“E”将消息路由给队列“Q”，那么“Q”就需要与“E”进行绑定。绑定操作需要定义一个可选的路由键（routing key）属性给某些类型的交换机。路由键的意义在于从发送给交换机的众多消息中选择出某些消息，将其路由给绑定的队列。\n\n打个比方：  \n队列（queue）是我们想要去的位于纽约的目的地  \n交换机（exchange）是JFK机场  \n绑定（binding）就是JFK机场到目的地的路线。能够到达目的地的路线可以是一条或者多条  \n拥有了交换机这个中间层，很多由发布者直接到队列难以实现的路由方案能够得以实现，并且避免了应用开发者的许多重复劳动。  \n\n如果AMQP的消息无法路由到队列（例如，发送到的交换机没有绑定队列），消息会被就地销毁或者返还给发布者。如何处理取决于发布者设置的消息属性。\n\n**最终解释：绑定是消息队列和交换器之间的关联，绑定是交换器和消息队列连接起来的路由规则。**\n\n***\n\n# 消费者\n\n消息如果只是存储在队列里是没有任何用处的。被应用消费掉，消息的价值才能够体现。\n\n在AMQP 0-9-1 模型中，有两种途径可以达到此目的：  \n1）将消息投递给应用 (\"push API\")  \n2）应用根据需要主动获取消息 (\"pull API\")\n\n使用push API，应用（application）需要明确表示出它在某个特定队列里所感兴趣的，想要消费的消息。如是，我们可以说应用注册了一个消费者，或者说订阅了一个队列。一个队列可以注册多个消费者，也可以注册一个独享的消费者（当独享消费者存在时，其他消费者即被排除在外）。\n\n每个消费者（订阅者）都有一个叫做消费者标签的标识符。它可以被用来退订消息。消费者标签实际上是一个字符串。\n\n***\n\n# 消息机制\n\n## 消息属性\n\nAMQP 模型中的消息（Message）对象是带有属性（Attributes）的。有些属性及其常见，以至于 AMQP 0-9-1 明确的定义了它们，并且应用开发者们无需费心思思考这些属性名字所代表的具体含义。\n\n例如：  \n1）Content type（内容类型）  \n2）Content encoding（内容编码）  \n3）Routing key（路由键）  \n4）Delivery mode (persistent or not)  \n5）投递模式（持久化 或 非持久化）  \n6）Message priority（消息优先权）  \n7）Message publishing timestamp（消息发布的时间戳）  \n8）Expiration period（消息有效期）  \n9）Publisher application id（发布应用的 ID）  \n\n有些属性是被 AMQP 代理所使用的，但是大多数是开放给接收它们的应用解释器用的。有些属性是可选的也被称作消息头（headers）。他们跟 HTTP 协议的 X-Headers 很相似。消息属性需要在消息被发布的时候定义。\n\n***\n\n## 消息主体\nAMQP 的消息除属性外，也含有一个有效载荷 - Payload（消息实际携带的数据），它被 AMQP 代理当作不透明的字节数组来对待。\n\n消息代理不会检查或者修改有效载荷。消息可以只包含属性而不携带有效载荷。它通常会使用类似 JSON 这种序列化的格式数据，为了节省，协议缓冲器和 MessagePack 将结构化数据序列化，以便以消息的有效载荷的形式发布。AMQP 及其同行者们通常使用 “content-type” 和 “content-encoding” 这两个字段来与消息沟通进行有效载荷的辨识工作，但这仅仅是基于约定而已。\n\n***\n\n## 消息持久化\n\n消息能够以持久化的方式发布，AMQP 代理会将此消息存储在磁盘上。如果服务器重启，系统会确认收到的持久化消息未丢失。\n\n简单地将消息发送给一个持久化的交换机或者路由给一个持久化的队列，并不会使得此消息具有持久化性质：它完全取决与消息本身的持久模式（persistence mode）。将消息以持久化方式发布时，会对性能造成一定的影响（就像数据库操作一样，健壮性的存在必定造成一些性能牺牲）。\n\n***\n\n## 消息确认\n\n消费者应用（Consumer applications）用来接受和处理消息的应用 - 在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题。这就给我们出了个难题，AMQP 代理在什么时候删除消息才是正确的？\n\nAMQP 0-9-1 规范给我们两种建议：  \n1）自动确认模式：当消息代理（broker）将消息发送给应用后立即删除。（使用 AMQP 方法：basic.deliver 或 basic.get-ok）)  \n2）显式确认模式：待应用（application）发送一个确认回执（acknowledgement）后再删除消息。（使用 AMQP 方法：basic.ack）\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那 AMQP 代理会将消息重新投递给另一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。\n\n***\n\n## 拒绝消息\n\n当一个消费者接收到某条消息后，处理过程有可能成功，有可能失败。应用可以向消息代理表明，本条消息由于“拒绝消息（Rejecting Messages）”的原因处理失败了（或者未能在此时完成）。\n\n当拒绝某条消息时，应用可以告诉消息代理如何处理这条消息——销毁它或者重新放入队列。\n\n当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。\n\n***\n\n## 预取消息\n\n在多个消费者共享一个队列的案例中，明确指定在收到下一个确认回执前每个消费者一次可以接受多少条消息是非常有用的。这可以在试图批量发布消息的时候起到简单的负载均衡和提高消息吞吐量的作用。For example, if a producing application sends messages every minute because of the nature of the work it is doing.（？？？例如，如果生产应用每分钟才发送一条消息，这说明处理工作尚在运行。）\n\n注意，RabbitMQ 只支持通道级的预取计数，而不是连接级的或者基于大小的预取。\n\n***\n\n# 其他\n\n## 连接\nAMQP连接通常是长连接。AMQP是一个使用TCP提供可靠投递的应用层协议。AMQP使用认证机制并且提供TLS（SSL）保护。当一个应用不再需要连接到AMQP代理的时候，需要优雅的释放掉AMQP连接，而不是直接将TCP连接关闭。\n\n***\n\n## 通道\n有些应用需要与AMQP代理建立多个连接。无论怎样，同时开启多个TCP连接都是不合适的，因为这样做会消耗掉过多的系统资源并且使得防火墙的配置更加困难。AMQP 0-9-1提供了通道（channels）来处理多连接，可以把通道理解成共享一个TCP连接的多个轻量化连接。\n\n在涉及多线程/进程的应用中，为每个线程/进程开启一个通道（channel）是很常见的，并且这些通道不能被线程/进程共享。\n\n一个特定通道上的通讯与其他通道上的通讯是完全隔离的，因此每个AMQP方法都需要携带一个通道号，这样客户端就可以指定此方法是为哪个通道准备的。\n\n***\n\n## 虚拟主机\n为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟Web servers虚拟主机概念非常相似，这为AMQP实体提供了完全隔离的环境。当连接被建立的时候，AMQP客户端来指定使用哪个虚拟主机。\n\n***\n\n# 参考资料\n\nhttp://rabbitmq.mr-ping.com/  \nhttps://www.cnblogs.com/dwlsxj/p/RabbitMQ.html","source":"_posts/MQ/AMQP.md","raw":"---\ntitle: AMQP\ndate: 2021-06-21 00:00:00\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: MQ\ncategories: MQ\n---\n\n# AMQP是什么\n\nAMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递异步消息的网络协议。\n\n在异步通讯中，消息不会立刻到达接收方，而是被存放到一个容器中，当满足一定的条件之后，消息会被容器发送给接收方，这个容器即消息队列，而完成这个功能需要双方和容器以及其中的各个组件遵守统一的约定和规则，AMQP就是这样的一种协议，消息发送与接受的双方遵守这个协议可以实现异步通讯。这个协议约定了消息的格式和工作方式。\n\n***\n\n<!-- more -->\n\n# 2.AMQP模型\n\n## 2.1.AMQP模型\n\n![AMQP模型](https://niubilityoyr.github.io/images/MQ/amqp模型.png)\n\n1）Broker  \n表示消息队列服务器实体（一个进程）。  \n一个server，接受客户端的连接，上线AMQP实体服务。  \n\n2）Connection  \n连接  \n应用程序与broker的网络连接，TCP/IP套接字连接。  \n\n3）Channel  \n消息通道  \n几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对多个  \nChannel，每个Channel代表一个会话任务。\n\n4）Message  \n消息，消息是不具名的，它由消息头和消息体组成。消息是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）> ，priority（相对于其他消优先权），delivery-mode（指出该消息可能需要持久性存储）等\n\n5）Exchange  \n交换机，用来接受生产者发送的消息，并将这些消息路由转发到某个队列。\n\n6）Queue  \n消息队列，存储消息，用于发送给消费者。  \n它是消息的容器，也是消息的终点。一个消息可以投入多个队列。  \n消息一直在队列里面，等待消费者连接到这个队列将其取走。\n\n7）Binding  \n绑定，消息队列和交换器之间的关联。  \n一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\n\n8）Routing Key  \n路由关键字  \n一个消息头，交换机可以用这个消息头决定如何路由某条消息。\n\n9）Publisher  \n消息生产者，是一个向交换器发布消息的客户端应用程序（进程）。\n\n10）Consumer  \n消息消费者，是一个从消息队列中取得消息的客户端应用程序（进程）。\n\n11）Virtual Host  \n虚拟主机\n\n***\n\n## 2.2.工作过程\n\n生产者发布消息流程：  \n1、生产者和Broker建立TCP连接。  \n2、生产者和Broker建立通道。  \n3、生产者通过通道发送消息给Broker，由Exchange将消息进行转发。  \n4、Exchange将消息转发到指定的Queue（队列）  \n\n消费者消费消息流程：  \n1、消费者和Broker建立TCP连接  \n2、消费者和Broker建立通道  \n3、消费者监听指定的Queue（队列）  \n4、当有消息到达Queue时Broker默认将消息推送给消费者。  \n5、消费者接收到消息。  \n6、ack回复  \n\n***\n\n# Exchange交换机\n\n## 默认交换机（default exchange）\n\n默认交换机（default exchange）实际上是一个由消息代理预先声明好的没有名字（名字为空字符串）的直连交换机（direct exchange）。\n\n它有一个特殊属性使得它对于简单应用特别有用处：\n那就是每新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。\n\n举个栗子：当你声明了一个名为\"search-indexing-online\"的队列，AMQP代理会自动将其绑定到默认交换机上，绑定（binding）的路由键名称也是为\"search-indexing-online\"。因此，当携带着名为\"search-indexing-online\"的路由键的消息被发送到默认交换机的时候，此消息会被默认交换机路由至名为\"search-indexing-online\"的队列中。换句话说，默认交换机看起来貌似能够直接将消息投递给队列，尽管技术上并没有做相关的操作。\n\n***\n\n## 直连交换机（direct exchange）\n\n直连交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的。直连交换机用来处理消息的单播路由（unicast routing）（尽管它也可以处理多播路由）。\n\n下面介绍它是如何工作的：  \n1）将一个队列绑定到某个交换机上，同时赋予该绑定一个路由键（routing key）  \n2）当一个携带着路由键为R的消息被发送给直连交换机时，交换机会把它路由给绑定值同样为R的队列。\n\n直连交换机经常用来循环分发任务给多个消费者（我们称之为轮询）。  \n比如说有3个消费者，4个任务。分别分发每个消费者一个任务后，第4个任务又分发给了第一个消费者。综上，我们很容易得出一个结论：在AMQP 0-9-1中，消息的负载均衡是发生在消费者（consumer）之间的，而不是队列（queue）之间。\n\n直连型交换机图例：  \n![直连交换机图解](https://niubilityoyr.github.io/images/MQ/直连交换机图解.png)\n\n当生产者（P）发送消息时 Rotuing key=booking 时，这时候将消息传送给 Exchange，Exchange 获取到生产者发送过来消息后，会根据自身的规则进行与匹配相应的 Queue，这时发现 Queue1 和 Queue2 都符合，就会将消息传送给这两个队列。\n\n如果我们以 Rotuing key=create 和 Rotuing key=confirm 发送消息时，这时消息只会被推送到 Queue2 队列中，其他 Routing Key 的消息将会被丢弃。\n\n***\n\n## 扇型交换机（funout exchange）\n\n扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列，而不理会绑定的路由键。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的拷贝分别发送给这所有的N个队列。扇型用来交换机处理消息的广播路由（broadcast routing）。\n\n因为扇型交换机投递消息会拷贝到所有绑定到它的队列，所以他的应用案例都极其相似：\n* 1）大规模多用户在线（MMO）游戏可以使用它来处理排行榜更新等全局事件\n* 2）体育新闻网站可以用它来近乎实时地将比分更新分发给移动客户端\n* 3）分发系统使用它来广播各种状态和配置更新\n* 4）在群聊的时候，它被用来分发消息给参与群聊的用户。（AMQP没有内置presence的概念，因此XMPP可能会是个更好的选择）\n\n扇型交换机图例：  \n![扇型交换机图解](https://niubilityoyr.github.io/images/MQ/扇型交换机图解.png)\n\n上图所示，生产者（P）生产消息 1 将消息 1 推送到 Exchange，由于 Exchange Type=fanout 这时候会遵循 fanout 的规则将消息推送到所有与它绑定 Queue，也就是图上的两个 Queue 最后两个消费者消费。\n\n***\n\n## 主题交换机（topic exchanges）\n\n主题交换机（topic exchanges）通过对消息的路由键和队列到交换机的绑定模式之间的匹配，将消息路由给一个或多个队列。主题交换机经常用来实现各种分发/订阅模式及其变种。主题交换机通常用来实现消息的多播路由（multicast routing）。\n\n主题交换机规则：  \n前面提到的 direct 规则是严格意义上的匹配，换言之 Routing Key 必须与 Binding Key 相匹配的时候才将消息传送给 Queue.  \n而Topic 的路由规则是一种模糊匹配，可以通过通配符满足一部分规则就可以传送。  \n\n它的约定是：  \n1）binding key 中可以存在两种特殊字符 “” 与“#”，用于做模糊匹配，其中 “” 用于匹配一个单词，“#”用于匹配多个单词（可以是零个）   \n2）routing key 为一个句点号 “.” 分隔的字符串（我们将被句点号 “. ” 分隔开的每一段独立的字符串称为一个单词），如“stock.usd.> nyse”、“nyse.vmw”、“quick.> orange.rabbit”  \n3）binding key 与 routing key 一样也是句点号 “.” 分隔的字符串\n\n主题交换机图例：  \n![主题交换机图解](https://niubilityoyr.github.io/images/MQ/主题交换机图解.png)\n\n当生产者发送消息 Routing Key=F.C.E 的时候，这时候只满足 Queue1，所以会被路由到 Queue 中，如果 Routing Key=A.C.E 这时候会被同是路由到 Queue1 和 Queue2 中，如果 Routing Key=A.F.B 时，这里只会发送一条消息到 Queue2 中。\n\n***\n\n### 使用场景\n\n主题交换机拥有非常广泛的用户案例。无论何时，当一个问题涉及到那些想要有针对性的选择需要接收消息的 多消费者/多应用（multiple consumers/applications） 的时候，主题交换机都可以被列入考虑范围。\n\n使用案例：  \n1）分发有关于特定地理位置的数据，例如销售点  \n2）由多个工作者（workers）完成的后台任务，每个工作者负责处理某些特定的任务  \n3）股票价格更新（以及其他类型的金融数据更新）  \n4）涉及到分类或者标签的新闻更新（例如，针对特定的运动项目或者队伍）  \n5）云端的不同种类服务的协调  \n6）分布式架构/基于系统的软件封装，其中每个构建者仅能处理一个特定的架构或者系统。\n\n***\n\n## 头交换机（headers exchanges）\n\n有时消息的路由操作会涉及到多个属性，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。\n\n我们可以绑定一个队列到头交换机上，并给他们之间的绑定使用多个用于匹配的头（header）。这个案例中，消息代理得从应用开发者那儿取到更多一段信息，换句话说，它需要考虑某条消息（message）是需要部分匹配还是全部匹配。上边说的“更多一段消息”就是\"x-match\"参数。当\"x-match\"设置为“any”时，消息头的任意一个值被匹配就可以满足条件，而当\"x-match\"设置为“all”的时候，就需要消息头的所有值都匹配成功。\n\n头交换机可以视为直连交换机的另一种表现形式。头交换机能够像直连交换机一样工作，不同之处在于头交换机的路由规则是建立在头属性值之上，而不是路由键。路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。\n\n***\n\n# Queue队列\n\nAMQP中的队列（Queue）跟其他消息队列或任务队列中的队列是很相似的，它们存储着即将被应用消费掉的消息。\n\n## 队列属性\n\n队列跟交换机共享某些属性，但是队列也有一些另外的属性。  \n1）Name  \n2）Durable（消息代理重启后，队列依旧存在）  \n3）Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）  \n4）Auto-delete（当最后一个消费者退订后即被删除）  \n5）Arguments（一些消息代理用他来完成类似与 TTL 的某些额外功能）  \n\n***\n\n## 队列创建\n\n队列在声明（declare）后才能被使用。如果一个队列尚不存在，声明一个队列会创建它。如果声明的队列已经存在，并且属性完全相同，那么此次声明不会对原有队列产生任何影响。如果声明中的属性与已存在队列的属性有差异，那么一个错误代码为406的通道级异常就会被抛出。\n\n***\n\n## 队列名称\n\n队列的名字可以由应用（application）来取，也可以让消息代理（broker）直接生成一个。队列的名字可以是最多255字节的一个utf-8字符串。若希望AMQP消息代理生成队列名，需要给队列的name参数赋值一个空字符串：在同一个通道（channel）的后续的方法（method）中，我们可以使用空字符串来表示之前生成的队列名称。之所以之后的方法可以获取正确的队列名是因为通道可以默默地记住消息代理最后一次生成的队列名称。\n以\"amq.\"开始的队列名称被预留做消息代理内部使用。如果试图在队列声明时打破这一规则的话，一个通道级的403 (ACCESS_REFUSED)错误会被抛出。\n\n***\n\n## 队列持久化\n\n持久化队列（Durable queues）会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。并不是所有的场景和案例都需要将队列持久化。  \n持久化的队列并不会使得路由到它的消息也具有持久性。倘若消息代理挂掉了，重新启动，那么在重启的过程中持久化队列会被重新声明，无论怎样，只有经过持久化的消息才能被重新恢复。\n\n***\n\n# Binding绑定\n\n绑定（Binding）是交换机（exchange）将消息（message）路由给队列（queue）所需遵循的规则。如果要指示交换机“E”将消息路由给队列“Q”，那么“Q”就需要与“E”进行绑定。绑定操作需要定义一个可选的路由键（routing key）属性给某些类型的交换机。路由键的意义在于从发送给交换机的众多消息中选择出某些消息，将其路由给绑定的队列。\n\n打个比方：  \n队列（queue）是我们想要去的位于纽约的目的地  \n交换机（exchange）是JFK机场  \n绑定（binding）就是JFK机场到目的地的路线。能够到达目的地的路线可以是一条或者多条  \n拥有了交换机这个中间层，很多由发布者直接到队列难以实现的路由方案能够得以实现，并且避免了应用开发者的许多重复劳动。  \n\n如果AMQP的消息无法路由到队列（例如，发送到的交换机没有绑定队列），消息会被就地销毁或者返还给发布者。如何处理取决于发布者设置的消息属性。\n\n**最终解释：绑定是消息队列和交换器之间的关联，绑定是交换器和消息队列连接起来的路由规则。**\n\n***\n\n# 消费者\n\n消息如果只是存储在队列里是没有任何用处的。被应用消费掉，消息的价值才能够体现。\n\n在AMQP 0-9-1 模型中，有两种途径可以达到此目的：  \n1）将消息投递给应用 (\"push API\")  \n2）应用根据需要主动获取消息 (\"pull API\")\n\n使用push API，应用（application）需要明确表示出它在某个特定队列里所感兴趣的，想要消费的消息。如是，我们可以说应用注册了一个消费者，或者说订阅了一个队列。一个队列可以注册多个消费者，也可以注册一个独享的消费者（当独享消费者存在时，其他消费者即被排除在外）。\n\n每个消费者（订阅者）都有一个叫做消费者标签的标识符。它可以被用来退订消息。消费者标签实际上是一个字符串。\n\n***\n\n# 消息机制\n\n## 消息属性\n\nAMQP 模型中的消息（Message）对象是带有属性（Attributes）的。有些属性及其常见，以至于 AMQP 0-9-1 明确的定义了它们，并且应用开发者们无需费心思思考这些属性名字所代表的具体含义。\n\n例如：  \n1）Content type（内容类型）  \n2）Content encoding（内容编码）  \n3）Routing key（路由键）  \n4）Delivery mode (persistent or not)  \n5）投递模式（持久化 或 非持久化）  \n6）Message priority（消息优先权）  \n7）Message publishing timestamp（消息发布的时间戳）  \n8）Expiration period（消息有效期）  \n9）Publisher application id（发布应用的 ID）  \n\n有些属性是被 AMQP 代理所使用的，但是大多数是开放给接收它们的应用解释器用的。有些属性是可选的也被称作消息头（headers）。他们跟 HTTP 协议的 X-Headers 很相似。消息属性需要在消息被发布的时候定义。\n\n***\n\n## 消息主体\nAMQP 的消息除属性外，也含有一个有效载荷 - Payload（消息实际携带的数据），它被 AMQP 代理当作不透明的字节数组来对待。\n\n消息代理不会检查或者修改有效载荷。消息可以只包含属性而不携带有效载荷。它通常会使用类似 JSON 这种序列化的格式数据，为了节省，协议缓冲器和 MessagePack 将结构化数据序列化，以便以消息的有效载荷的形式发布。AMQP 及其同行者们通常使用 “content-type” 和 “content-encoding” 这两个字段来与消息沟通进行有效载荷的辨识工作，但这仅仅是基于约定而已。\n\n***\n\n## 消息持久化\n\n消息能够以持久化的方式发布，AMQP 代理会将此消息存储在磁盘上。如果服务器重启，系统会确认收到的持久化消息未丢失。\n\n简单地将消息发送给一个持久化的交换机或者路由给一个持久化的队列，并不会使得此消息具有持久化性质：它完全取决与消息本身的持久模式（persistence mode）。将消息以持久化方式发布时，会对性能造成一定的影响（就像数据库操作一样，健壮性的存在必定造成一些性能牺牲）。\n\n***\n\n## 消息确认\n\n消费者应用（Consumer applications）用来接受和处理消息的应用 - 在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题。这就给我们出了个难题，AMQP 代理在什么时候删除消息才是正确的？\n\nAMQP 0-9-1 规范给我们两种建议：  \n1）自动确认模式：当消息代理（broker）将消息发送给应用后立即删除。（使用 AMQP 方法：basic.deliver 或 basic.get-ok）)  \n2）显式确认模式：待应用（application）发送一个确认回执（acknowledgement）后再删除消息。（使用 AMQP 方法：basic.ack）\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那 AMQP 代理会将消息重新投递给另一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。\n\n***\n\n## 拒绝消息\n\n当一个消费者接收到某条消息后，处理过程有可能成功，有可能失败。应用可以向消息代理表明，本条消息由于“拒绝消息（Rejecting Messages）”的原因处理失败了（或者未能在此时完成）。\n\n当拒绝某条消息时，应用可以告诉消息代理如何处理这条消息——销毁它或者重新放入队列。\n\n当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。\n\n***\n\n## 预取消息\n\n在多个消费者共享一个队列的案例中，明确指定在收到下一个确认回执前每个消费者一次可以接受多少条消息是非常有用的。这可以在试图批量发布消息的时候起到简单的负载均衡和提高消息吞吐量的作用。For example, if a producing application sends messages every minute because of the nature of the work it is doing.（？？？例如，如果生产应用每分钟才发送一条消息，这说明处理工作尚在运行。）\n\n注意，RabbitMQ 只支持通道级的预取计数，而不是连接级的或者基于大小的预取。\n\n***\n\n# 其他\n\n## 连接\nAMQP连接通常是长连接。AMQP是一个使用TCP提供可靠投递的应用层协议。AMQP使用认证机制并且提供TLS（SSL）保护。当一个应用不再需要连接到AMQP代理的时候，需要优雅的释放掉AMQP连接，而不是直接将TCP连接关闭。\n\n***\n\n## 通道\n有些应用需要与AMQP代理建立多个连接。无论怎样，同时开启多个TCP连接都是不合适的，因为这样做会消耗掉过多的系统资源并且使得防火墙的配置更加困难。AMQP 0-9-1提供了通道（channels）来处理多连接，可以把通道理解成共享一个TCP连接的多个轻量化连接。\n\n在涉及多线程/进程的应用中，为每个线程/进程开启一个通道（channel）是很常见的，并且这些通道不能被线程/进程共享。\n\n一个特定通道上的通讯与其他通道上的通讯是完全隔离的，因此每个AMQP方法都需要携带一个通道号，这样客户端就可以指定此方法是为哪个通道准备的。\n\n***\n\n## 虚拟主机\n为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟Web servers虚拟主机概念非常相似，这为AMQP实体提供了完全隔离的环境。当连接被建立的时候，AMQP客户端来指定使用哪个虚拟主机。\n\n***\n\n# 参考资料\n\nhttp://rabbitmq.mr-ping.com/  \nhttps://www.cnblogs.com/dwlsxj/p/RabbitMQ.html","slug":"MQ/AMQP","published":1,"updated":"2021-06-25T02:07:59.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hne000nd1s63elxbsae","content":"<h1 id=\"AMQP是什么\"><a href=\"#AMQP是什么\" class=\"headerlink\" title=\"AMQP是什么\"></a>AMQP是什么</h1><p>AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递异步消息的网络协议。</p>\n<p>在异步通讯中，消息不会立刻到达接收方，而是被存放到一个容器中，当满足一定的条件之后，消息会被容器发送给接收方，这个容器即消息队列，而完成这个功能需要双方和容器以及其中的各个组件遵守统一的约定和规则，AMQP就是这样的一种协议，消息发送与接受的双方遵守这个协议可以实现异步通讯。这个协议约定了消息的格式和工作方式。</p>\n<hr>\n<span id=\"more\"></span>\n\n<h1 id=\"2-AMQP模型\"><a href=\"#2-AMQP模型\" class=\"headerlink\" title=\"2.AMQP模型\"></a>2.AMQP模型</h1><h2 id=\"2-1-AMQP模型\"><a href=\"#2-1-AMQP模型\" class=\"headerlink\" title=\"2.1.AMQP模型\"></a>2.1.AMQP模型</h2><p><img src=\"https://niubilityoyr.github.io/images/MQ/amqp%E6%A8%A1%E5%9E%8B.png\" alt=\"AMQP模型\"></p>\n<p>1）Broker<br>表示消息队列服务器实体（一个进程）。<br>一个server，接受客户端的连接，上线AMQP实体服务。  </p>\n<p>2）Connection<br>连接<br>应用程序与broker的网络连接，TCP/IP套接字连接。  </p>\n<p>3）Channel<br>消息通道<br>几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对多个<br>Channel，每个Channel代表一个会话任务。</p>\n<p>4）Message<br>消息，消息是不具名的，它由消息头和消息体组成。消息是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）&gt; ，priority（相对于其他消优先权），delivery-mode（指出该消息可能需要持久性存储）等</p>\n<p>5）Exchange<br>交换机，用来接受生产者发送的消息，并将这些消息路由转发到某个队列。</p>\n<p>6）Queue<br>消息队列，存储消息，用于发送给消费者。<br>它是消息的容器，也是消息的终点。一个消息可以投入多个队列。<br>消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>\n<p>7）Binding<br>绑定，消息队列和交换器之间的关联。<br>一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</p>\n<p>8）Routing Key<br>路由关键字<br>一个消息头，交换机可以用这个消息头决定如何路由某条消息。</p>\n<p>9）Publisher<br>消息生产者，是一个向交换器发布消息的客户端应用程序（进程）。</p>\n<p>10）Consumer<br>消息消费者，是一个从消息队列中取得消息的客户端应用程序（进程）。</p>\n<p>11）Virtual Host<br>虚拟主机</p>\n<hr>\n<h2 id=\"2-2-工作过程\"><a href=\"#2-2-工作过程\" class=\"headerlink\" title=\"2.2.工作过程\"></a>2.2.工作过程</h2><p>生产者发布消息流程：<br>1、生产者和Broker建立TCP连接。<br>2、生产者和Broker建立通道。<br>3、生产者通过通道发送消息给Broker，由Exchange将消息进行转发。<br>4、Exchange将消息转发到指定的Queue（队列）  </p>\n<p>消费者消费消息流程：<br>1、消费者和Broker建立TCP连接<br>2、消费者和Broker建立通道<br>3、消费者监听指定的Queue（队列）<br>4、当有消息到达Queue时Broker默认将消息推送给消费者。<br>5、消费者接收到消息。<br>6、ack回复  </p>\n<hr>\n<h1 id=\"Exchange交换机\"><a href=\"#Exchange交换机\" class=\"headerlink\" title=\"Exchange交换机\"></a>Exchange交换机</h1><h2 id=\"默认交换机（default-exchange）\"><a href=\"#默认交换机（default-exchange）\" class=\"headerlink\" title=\"默认交换机（default exchange）\"></a>默认交换机（default exchange）</h2><p>默认交换机（default exchange）实际上是一个由消息代理预先声明好的没有名字（名字为空字符串）的直连交换机（direct exchange）。</p>\n<p>它有一个特殊属性使得它对于简单应用特别有用处：<br>那就是每新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。</p>\n<p>举个栗子：当你声明了一个名为”search-indexing-online”的队列，AMQP代理会自动将其绑定到默认交换机上，绑定（binding）的路由键名称也是为”search-indexing-online”。因此，当携带着名为”search-indexing-online”的路由键的消息被发送到默认交换机的时候，此消息会被默认交换机路由至名为”search-indexing-online”的队列中。换句话说，默认交换机看起来貌似能够直接将消息投递给队列，尽管技术上并没有做相关的操作。</p>\n<hr>\n<h2 id=\"直连交换机（direct-exchange）\"><a href=\"#直连交换机（direct-exchange）\" class=\"headerlink\" title=\"直连交换机（direct exchange）\"></a>直连交换机（direct exchange）</h2><p>直连交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的。直连交换机用来处理消息的单播路由（unicast routing）（尽管它也可以处理多播路由）。</p>\n<p>下面介绍它是如何工作的：<br>1）将一个队列绑定到某个交换机上，同时赋予该绑定一个路由键（routing key）<br>2）当一个携带着路由键为R的消息被发送给直连交换机时，交换机会把它路由给绑定值同样为R的队列。</p>\n<p>直连交换机经常用来循环分发任务给多个消费者（我们称之为轮询）。<br>比如说有3个消费者，4个任务。分别分发每个消费者一个任务后，第4个任务又分发给了第一个消费者。综上，我们很容易得出一个结论：在AMQP 0-9-1中，消息的负载均衡是发生在消费者（consumer）之间的，而不是队列（queue）之间。</p>\n<p>直连型交换机图例：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%9B%B4%E8%BF%9E%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%BE%E8%A7%A3.png\" alt=\"直连交换机图解\"></p>\n<p>当生产者（P）发送消息时 Rotuing key=booking 时，这时候将消息传送给 Exchange，Exchange 获取到生产者发送过来消息后，会根据自身的规则进行与匹配相应的 Queue，这时发现 Queue1 和 Queue2 都符合，就会将消息传送给这两个队列。</p>\n<p>如果我们以 Rotuing key=create 和 Rotuing key=confirm 发送消息时，这时消息只会被推送到 Queue2 队列中，其他 Routing Key 的消息将会被丢弃。</p>\n<hr>\n<h2 id=\"扇型交换机（funout-exchange）\"><a href=\"#扇型交换机（funout-exchange）\" class=\"headerlink\" title=\"扇型交换机（funout exchange）\"></a>扇型交换机（funout exchange）</h2><p>扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列，而不理会绑定的路由键。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的拷贝分别发送给这所有的N个队列。扇型用来交换机处理消息的广播路由（broadcast routing）。</p>\n<p>因为扇型交换机投递消息会拷贝到所有绑定到它的队列，所以他的应用案例都极其相似：</p>\n<ul>\n<li>1）大规模多用户在线（MMO）游戏可以使用它来处理排行榜更新等全局事件</li>\n<li>2）体育新闻网站可以用它来近乎实时地将比分更新分发给移动客户端</li>\n<li>3）分发系统使用它来广播各种状态和配置更新</li>\n<li>4）在群聊的时候，它被用来分发消息给参与群聊的用户。（AMQP没有内置presence的概念，因此XMPP可能会是个更好的选择）</li>\n</ul>\n<p>扇型交换机图例：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%89%87%E5%9E%8B%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%BE%E8%A7%A3.png\" alt=\"扇型交换机图解\"></p>\n<p>上图所示，生产者（P）生产消息 1 将消息 1 推送到 Exchange，由于 Exchange Type=fanout 这时候会遵循 fanout 的规则将消息推送到所有与它绑定 Queue，也就是图上的两个 Queue 最后两个消费者消费。</p>\n<hr>\n<h2 id=\"主题交换机（topic-exchanges）\"><a href=\"#主题交换机（topic-exchanges）\" class=\"headerlink\" title=\"主题交换机（topic exchanges）\"></a>主题交换机（topic exchanges）</h2><p>主题交换机（topic exchanges）通过对消息的路由键和队列到交换机的绑定模式之间的匹配，将消息路由给一个或多个队列。主题交换机经常用来实现各种分发/订阅模式及其变种。主题交换机通常用来实现消息的多播路由（multicast routing）。</p>\n<p>主题交换机规则：<br>前面提到的 direct 规则是严格意义上的匹配，换言之 Routing Key 必须与 Binding Key 相匹配的时候才将消息传送给 Queue.<br>而Topic 的路由规则是一种模糊匹配，可以通过通配符满足一部分规则就可以传送。  </p>\n<p>它的约定是：<br>1）binding key 中可以存在两种特殊字符 “” 与“#”，用于做模糊匹配，其中 “” 用于匹配一个单词，“#”用于匹配多个单词（可以是零个）<br>2）routing key 为一个句点号 “.” 分隔的字符串（我们将被句点号 “. ” 分隔开的每一段独立的字符串称为一个单词），如“stock.usd.&gt; nyse”、“nyse.vmw”、“quick.&gt; orange.rabbit”<br>3）binding key 与 routing key 一样也是句点号 “.” 分隔的字符串</p>\n<p>主题交换机图例：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%BE%E8%A7%A3.png\" alt=\"主题交换机图解\"></p>\n<p>当生产者发送消息 Routing Key=F.C.E 的时候，这时候只满足 Queue1，所以会被路由到 Queue 中，如果 Routing Key=A.C.E 这时候会被同是路由到 Queue1 和 Queue2 中，如果 Routing Key=A.F.B 时，这里只会发送一条消息到 Queue2 中。</p>\n<hr>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>主题交换机拥有非常广泛的用户案例。无论何时，当一个问题涉及到那些想要有针对性的选择需要接收消息的 多消费者/多应用（multiple consumers/applications） 的时候，主题交换机都可以被列入考虑范围。</p>\n<p>使用案例：<br>1）分发有关于特定地理位置的数据，例如销售点<br>2）由多个工作者（workers）完成的后台任务，每个工作者负责处理某些特定的任务<br>3）股票价格更新（以及其他类型的金融数据更新）<br>4）涉及到分类或者标签的新闻更新（例如，针对特定的运动项目或者队伍）<br>5）云端的不同种类服务的协调<br>6）分布式架构/基于系统的软件封装，其中每个构建者仅能处理一个特定的架构或者系统。</p>\n<hr>\n<h2 id=\"头交换机（headers-exchanges）\"><a href=\"#头交换机（headers-exchanges）\" class=\"headerlink\" title=\"头交换机（headers exchanges）\"></a>头交换机（headers exchanges）</h2><p>有时消息的路由操作会涉及到多个属性，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。</p>\n<p>我们可以绑定一个队列到头交换机上，并给他们之间的绑定使用多个用于匹配的头（header）。这个案例中，消息代理得从应用开发者那儿取到更多一段信息，换句话说，它需要考虑某条消息（message）是需要部分匹配还是全部匹配。上边说的“更多一段消息”就是”x-match”参数。当”x-match”设置为“any”时，消息头的任意一个值被匹配就可以满足条件，而当”x-match”设置为“all”的时候，就需要消息头的所有值都匹配成功。</p>\n<p>头交换机可以视为直连交换机的另一种表现形式。头交换机能够像直连交换机一样工作，不同之处在于头交换机的路由规则是建立在头属性值之上，而不是路由键。路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。</p>\n<hr>\n<h1 id=\"Queue队列\"><a href=\"#Queue队列\" class=\"headerlink\" title=\"Queue队列\"></a>Queue队列</h1><p>AMQP中的队列（Queue）跟其他消息队列或任务队列中的队列是很相似的，它们存储着即将被应用消费掉的消息。</p>\n<h2 id=\"队列属性\"><a href=\"#队列属性\" class=\"headerlink\" title=\"队列属性\"></a>队列属性</h2><p>队列跟交换机共享某些属性，但是队列也有一些另外的属性。<br>1）Name<br>2）Durable（消息代理重启后，队列依旧存在）<br>3）Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）<br>4）Auto-delete（当最后一个消费者退订后即被删除）<br>5）Arguments（一些消息代理用他来完成类似与 TTL 的某些额外功能）  </p>\n<hr>\n<h2 id=\"队列创建\"><a href=\"#队列创建\" class=\"headerlink\" title=\"队列创建\"></a>队列创建</h2><p>队列在声明（declare）后才能被使用。如果一个队列尚不存在，声明一个队列会创建它。如果声明的队列已经存在，并且属性完全相同，那么此次声明不会对原有队列产生任何影响。如果声明中的属性与已存在队列的属性有差异，那么一个错误代码为406的通道级异常就会被抛出。</p>\n<hr>\n<h2 id=\"队列名称\"><a href=\"#队列名称\" class=\"headerlink\" title=\"队列名称\"></a>队列名称</h2><p>队列的名字可以由应用（application）来取，也可以让消息代理（broker）直接生成一个。队列的名字可以是最多255字节的一个utf-8字符串。若希望AMQP消息代理生成队列名，需要给队列的name参数赋值一个空字符串：在同一个通道（channel）的后续的方法（method）中，我们可以使用空字符串来表示之前生成的队列名称。之所以之后的方法可以获取正确的队列名是因为通道可以默默地记住消息代理最后一次生成的队列名称。<br>以”amq.”开始的队列名称被预留做消息代理内部使用。如果试图在队列声明时打破这一规则的话，一个通道级的403 (ACCESS_REFUSED)错误会被抛出。</p>\n<hr>\n<h2 id=\"队列持久化\"><a href=\"#队列持久化\" class=\"headerlink\" title=\"队列持久化\"></a>队列持久化</h2><p>持久化队列（Durable queues）会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。并不是所有的场景和案例都需要将队列持久化。<br>持久化的队列并不会使得路由到它的消息也具有持久性。倘若消息代理挂掉了，重新启动，那么在重启的过程中持久化队列会被重新声明，无论怎样，只有经过持久化的消息才能被重新恢复。</p>\n<hr>\n<h1 id=\"Binding绑定\"><a href=\"#Binding绑定\" class=\"headerlink\" title=\"Binding绑定\"></a>Binding绑定</h1><p>绑定（Binding）是交换机（exchange）将消息（message）路由给队列（queue）所需遵循的规则。如果要指示交换机“E”将消息路由给队列“Q”，那么“Q”就需要与“E”进行绑定。绑定操作需要定义一个可选的路由键（routing key）属性给某些类型的交换机。路由键的意义在于从发送给交换机的众多消息中选择出某些消息，将其路由给绑定的队列。</p>\n<p>打个比方：<br>队列（queue）是我们想要去的位于纽约的目的地<br>交换机（exchange）是JFK机场<br>绑定（binding）就是JFK机场到目的地的路线。能够到达目的地的路线可以是一条或者多条<br>拥有了交换机这个中间层，很多由发布者直接到队列难以实现的路由方案能够得以实现，并且避免了应用开发者的许多重复劳动。  </p>\n<p>如果AMQP的消息无法路由到队列（例如，发送到的交换机没有绑定队列），消息会被就地销毁或者返还给发布者。如何处理取决于发布者设置的消息属性。</p>\n<p><strong>最终解释：绑定是消息队列和交换器之间的关联，绑定是交换器和消息队列连接起来的路由规则。</strong></p>\n<hr>\n<h1 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h1><p>消息如果只是存储在队列里是没有任何用处的。被应用消费掉，消息的价值才能够体现。</p>\n<p>在AMQP 0-9-1 模型中，有两种途径可以达到此目的：<br>1）将消息投递给应用 (“push API”)<br>2）应用根据需要主动获取消息 (“pull API”)</p>\n<p>使用push API，应用（application）需要明确表示出它在某个特定队列里所感兴趣的，想要消费的消息。如是，我们可以说应用注册了一个消费者，或者说订阅了一个队列。一个队列可以注册多个消费者，也可以注册一个独享的消费者（当独享消费者存在时，其他消费者即被排除在外）。</p>\n<p>每个消费者（订阅者）都有一个叫做消费者标签的标识符。它可以被用来退订消息。消费者标签实际上是一个字符串。</p>\n<hr>\n<h1 id=\"消息机制\"><a href=\"#消息机制\" class=\"headerlink\" title=\"消息机制\"></a>消息机制</h1><h2 id=\"消息属性\"><a href=\"#消息属性\" class=\"headerlink\" title=\"消息属性\"></a>消息属性</h2><p>AMQP 模型中的消息（Message）对象是带有属性（Attributes）的。有些属性及其常见，以至于 AMQP 0-9-1 明确的定义了它们，并且应用开发者们无需费心思思考这些属性名字所代表的具体含义。</p>\n<p>例如：<br>1）Content type（内容类型）<br>2）Content encoding（内容编码）<br>3）Routing key（路由键）<br>4）Delivery mode (persistent or not)<br>5）投递模式（持久化 或 非持久化）<br>6）Message priority（消息优先权）<br>7）Message publishing timestamp（消息发布的时间戳）<br>8）Expiration period（消息有效期）<br>9）Publisher application id（发布应用的 ID）  </p>\n<p>有些属性是被 AMQP 代理所使用的，但是大多数是开放给接收它们的应用解释器用的。有些属性是可选的也被称作消息头（headers）。他们跟 HTTP 协议的 X-Headers 很相似。消息属性需要在消息被发布的时候定义。</p>\n<hr>\n<h2 id=\"消息主体\"><a href=\"#消息主体\" class=\"headerlink\" title=\"消息主体\"></a>消息主体</h2><p>AMQP 的消息除属性外，也含有一个有效载荷 - Payload（消息实际携带的数据），它被 AMQP 代理当作不透明的字节数组来对待。</p>\n<p>消息代理不会检查或者修改有效载荷。消息可以只包含属性而不携带有效载荷。它通常会使用类似 JSON 这种序列化的格式数据，为了节省，协议缓冲器和 MessagePack 将结构化数据序列化，以便以消息的有效载荷的形式发布。AMQP 及其同行者们通常使用 “content-type” 和 “content-encoding” 这两个字段来与消息沟通进行有效载荷的辨识工作，但这仅仅是基于约定而已。</p>\n<hr>\n<h2 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h2><p>消息能够以持久化的方式发布，AMQP 代理会将此消息存储在磁盘上。如果服务器重启，系统会确认收到的持久化消息未丢失。</p>\n<p>简单地将消息发送给一个持久化的交换机或者路由给一个持久化的队列，并不会使得此消息具有持久化性质：它完全取决与消息本身的持久模式（persistence mode）。将消息以持久化方式发布时，会对性能造成一定的影响（就像数据库操作一样，健壮性的存在必定造成一些性能牺牲）。</p>\n<hr>\n<h2 id=\"消息确认\"><a href=\"#消息确认\" class=\"headerlink\" title=\"消息确认\"></a>消息确认</h2><p>消费者应用（Consumer applications）用来接受和处理消息的应用 - 在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题。这就给我们出了个难题，AMQP 代理在什么时候删除消息才是正确的？</p>\n<p>AMQP 0-9-1 规范给我们两种建议：<br>1）自动确认模式：当消息代理（broker）将消息发送给应用后立即删除。（使用 AMQP 方法：basic.deliver 或 basic.get-ok）)<br>2）显式确认模式：待应用（application）发送一个确认回执（acknowledgement）后再删除消息。（使用 AMQP 方法：basic.ack）</p>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那 AMQP 代理会将消息重新投递给另一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。</p>\n<hr>\n<h2 id=\"拒绝消息\"><a href=\"#拒绝消息\" class=\"headerlink\" title=\"拒绝消息\"></a>拒绝消息</h2><p>当一个消费者接收到某条消息后，处理过程有可能成功，有可能失败。应用可以向消息代理表明，本条消息由于“拒绝消息（Rejecting Messages）”的原因处理失败了（或者未能在此时完成）。</p>\n<p>当拒绝某条消息时，应用可以告诉消息代理如何处理这条消息——销毁它或者重新放入队列。</p>\n<p>当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。</p>\n<hr>\n<h2 id=\"预取消息\"><a href=\"#预取消息\" class=\"headerlink\" title=\"预取消息\"></a>预取消息</h2><p>在多个消费者共享一个队列的案例中，明确指定在收到下一个确认回执前每个消费者一次可以接受多少条消息是非常有用的。这可以在试图批量发布消息的时候起到简单的负载均衡和提高消息吞吐量的作用。For example, if a producing application sends messages every minute because of the nature of the work it is doing.（？？？例如，如果生产应用每分钟才发送一条消息，这说明处理工作尚在运行。）</p>\n<p>注意，RabbitMQ 只支持通道级的预取计数，而不是连接级的或者基于大小的预取。</p>\n<hr>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p>AMQP连接通常是长连接。AMQP是一个使用TCP提供可靠投递的应用层协议。AMQP使用认证机制并且提供TLS（SSL）保护。当一个应用不再需要连接到AMQP代理的时候，需要优雅的释放掉AMQP连接，而不是直接将TCP连接关闭。</p>\n<hr>\n<h2 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h2><p>有些应用需要与AMQP代理建立多个连接。无论怎样，同时开启多个TCP连接都是不合适的，因为这样做会消耗掉过多的系统资源并且使得防火墙的配置更加困难。AMQP 0-9-1提供了通道（channels）来处理多连接，可以把通道理解成共享一个TCP连接的多个轻量化连接。</p>\n<p>在涉及多线程/进程的应用中，为每个线程/进程开启一个通道（channel）是很常见的，并且这些通道不能被线程/进程共享。</p>\n<p>一个特定通道上的通讯与其他通道上的通讯是完全隔离的，因此每个AMQP方法都需要携带一个通道号，这样客户端就可以指定此方法是为哪个通道准备的。</p>\n<hr>\n<h2 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h2><p>为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟Web servers虚拟主机概念非常相似，这为AMQP实体提供了完全隔离的环境。当连接被建立的时候，AMQP客户端来指定使用哪个虚拟主机。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://rabbitmq.mr-ping.com/\">http://rabbitmq.mr-ping.com/</a><br><a href=\"https://www.cnblogs.com/dwlsxj/p/RabbitMQ.html\">https://www.cnblogs.com/dwlsxj/p/RabbitMQ.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"AMQP是什么\"><a href=\"#AMQP是什么\" class=\"headerlink\" title=\"AMQP是什么\"></a>AMQP是什么</h1><p>AMQP（Advanced Message Queuing Protocol，高级消息队列协议）是一个进程间传递异步消息的网络协议。</p>\n<p>在异步通讯中，消息不会立刻到达接收方，而是被存放到一个容器中，当满足一定的条件之后，消息会被容器发送给接收方，这个容器即消息队列，而完成这个功能需要双方和容器以及其中的各个组件遵守统一的约定和规则，AMQP就是这样的一种协议，消息发送与接受的双方遵守这个协议可以实现异步通讯。这个协议约定了消息的格式和工作方式。</p>\n<hr>","more":"<h1 id=\"2-AMQP模型\"><a href=\"#2-AMQP模型\" class=\"headerlink\" title=\"2.AMQP模型\"></a>2.AMQP模型</h1><h2 id=\"2-1-AMQP模型\"><a href=\"#2-1-AMQP模型\" class=\"headerlink\" title=\"2.1.AMQP模型\"></a>2.1.AMQP模型</h2><p><img src=\"https://niubilityoyr.github.io/images/MQ/amqp%E6%A8%A1%E5%9E%8B.png\" alt=\"AMQP模型\"></p>\n<p>1）Broker<br>表示消息队列服务器实体（一个进程）。<br>一个server，接受客户端的连接，上线AMQP实体服务。  </p>\n<p>2）Connection<br>连接<br>应用程序与broker的网络连接，TCP/IP套接字连接。  </p>\n<p>3）Channel<br>消息通道<br>几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对多个<br>Channel，每个Channel代表一个会话任务。</p>\n<p>4）Message<br>消息，消息是不具名的，它由消息头和消息体组成。消息是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）&gt; ，priority（相对于其他消优先权），delivery-mode（指出该消息可能需要持久性存储）等</p>\n<p>5）Exchange<br>交换机，用来接受生产者发送的消息，并将这些消息路由转发到某个队列。</p>\n<p>6）Queue<br>消息队列，存储消息，用于发送给消费者。<br>它是消息的容器，也是消息的终点。一个消息可以投入多个队列。<br>消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>\n<p>7）Binding<br>绑定，消息队列和交换器之间的关联。<br>一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</p>\n<p>8）Routing Key<br>路由关键字<br>一个消息头，交换机可以用这个消息头决定如何路由某条消息。</p>\n<p>9）Publisher<br>消息生产者，是一个向交换器发布消息的客户端应用程序（进程）。</p>\n<p>10）Consumer<br>消息消费者，是一个从消息队列中取得消息的客户端应用程序（进程）。</p>\n<p>11）Virtual Host<br>虚拟主机</p>\n<hr>\n<h2 id=\"2-2-工作过程\"><a href=\"#2-2-工作过程\" class=\"headerlink\" title=\"2.2.工作过程\"></a>2.2.工作过程</h2><p>生产者发布消息流程：<br>1、生产者和Broker建立TCP连接。<br>2、生产者和Broker建立通道。<br>3、生产者通过通道发送消息给Broker，由Exchange将消息进行转发。<br>4、Exchange将消息转发到指定的Queue（队列）  </p>\n<p>消费者消费消息流程：<br>1、消费者和Broker建立TCP连接<br>2、消费者和Broker建立通道<br>3、消费者监听指定的Queue（队列）<br>4、当有消息到达Queue时Broker默认将消息推送给消费者。<br>5、消费者接收到消息。<br>6、ack回复  </p>\n<hr>\n<h1 id=\"Exchange交换机\"><a href=\"#Exchange交换机\" class=\"headerlink\" title=\"Exchange交换机\"></a>Exchange交换机</h1><h2 id=\"默认交换机（default-exchange）\"><a href=\"#默认交换机（default-exchange）\" class=\"headerlink\" title=\"默认交换机（default exchange）\"></a>默认交换机（default exchange）</h2><p>默认交换机（default exchange）实际上是一个由消息代理预先声明好的没有名字（名字为空字符串）的直连交换机（direct exchange）。</p>\n<p>它有一个特殊属性使得它对于简单应用特别有用处：<br>那就是每新建队列（queue）都会自动绑定到默认交换机上，绑定的路由键（routing key）名称与队列名称相同。</p>\n<p>举个栗子：当你声明了一个名为”search-indexing-online”的队列，AMQP代理会自动将其绑定到默认交换机上，绑定（binding）的路由键名称也是为”search-indexing-online”。因此，当携带着名为”search-indexing-online”的路由键的消息被发送到默认交换机的时候，此消息会被默认交换机路由至名为”search-indexing-online”的队列中。换句话说，默认交换机看起来貌似能够直接将消息投递给队列，尽管技术上并没有做相关的操作。</p>\n<hr>\n<h2 id=\"直连交换机（direct-exchange）\"><a href=\"#直连交换机（direct-exchange）\" class=\"headerlink\" title=\"直连交换机（direct exchange）\"></a>直连交换机（direct exchange）</h2><p>直连交换机（direct exchange）是根据消息携带的路由键（routing key）将消息投递给对应队列的。直连交换机用来处理消息的单播路由（unicast routing）（尽管它也可以处理多播路由）。</p>\n<p>下面介绍它是如何工作的：<br>1）将一个队列绑定到某个交换机上，同时赋予该绑定一个路由键（routing key）<br>2）当一个携带着路由键为R的消息被发送给直连交换机时，交换机会把它路由给绑定值同样为R的队列。</p>\n<p>直连交换机经常用来循环分发任务给多个消费者（我们称之为轮询）。<br>比如说有3个消费者，4个任务。分别分发每个消费者一个任务后，第4个任务又分发给了第一个消费者。综上，我们很容易得出一个结论：在AMQP 0-9-1中，消息的负载均衡是发生在消费者（consumer）之间的，而不是队列（queue）之间。</p>\n<p>直连型交换机图例：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%9B%B4%E8%BF%9E%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%BE%E8%A7%A3.png\" alt=\"直连交换机图解\"></p>\n<p>当生产者（P）发送消息时 Rotuing key=booking 时，这时候将消息传送给 Exchange，Exchange 获取到生产者发送过来消息后，会根据自身的规则进行与匹配相应的 Queue，这时发现 Queue1 和 Queue2 都符合，就会将消息传送给这两个队列。</p>\n<p>如果我们以 Rotuing key=create 和 Rotuing key=confirm 发送消息时，这时消息只会被推送到 Queue2 队列中，其他 Routing Key 的消息将会被丢弃。</p>\n<hr>\n<h2 id=\"扇型交换机（funout-exchange）\"><a href=\"#扇型交换机（funout-exchange）\" class=\"headerlink\" title=\"扇型交换机（funout exchange）\"></a>扇型交换机（funout exchange）</h2><p>扇型交换机（funout exchange）将消息路由给绑定到它身上的所有队列，而不理会绑定的路由键。如果N个队列绑定到某个扇型交换机上，当有消息发送给此扇型交换机时，交换机会将消息的拷贝分别发送给这所有的N个队列。扇型用来交换机处理消息的广播路由（broadcast routing）。</p>\n<p>因为扇型交换机投递消息会拷贝到所有绑定到它的队列，所以他的应用案例都极其相似：</p>\n<ul>\n<li>1）大规模多用户在线（MMO）游戏可以使用它来处理排行榜更新等全局事件</li>\n<li>2）体育新闻网站可以用它来近乎实时地将比分更新分发给移动客户端</li>\n<li>3）分发系统使用它来广播各种状态和配置更新</li>\n<li>4）在群聊的时候，它被用来分发消息给参与群聊的用户。（AMQP没有内置presence的概念，因此XMPP可能会是个更好的选择）</li>\n</ul>\n<p>扇型交换机图例：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%89%87%E5%9E%8B%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%BE%E8%A7%A3.png\" alt=\"扇型交换机图解\"></p>\n<p>上图所示，生产者（P）生产消息 1 将消息 1 推送到 Exchange，由于 Exchange Type=fanout 这时候会遵循 fanout 的规则将消息推送到所有与它绑定 Queue，也就是图上的两个 Queue 最后两个消费者消费。</p>\n<hr>\n<h2 id=\"主题交换机（topic-exchanges）\"><a href=\"#主题交换机（topic-exchanges）\" class=\"headerlink\" title=\"主题交换机（topic exchanges）\"></a>主题交换机（topic exchanges）</h2><p>主题交换机（topic exchanges）通过对消息的路由键和队列到交换机的绑定模式之间的匹配，将消息路由给一个或多个队列。主题交换机经常用来实现各种分发/订阅模式及其变种。主题交换机通常用来实现消息的多播路由（multicast routing）。</p>\n<p>主题交换机规则：<br>前面提到的 direct 规则是严格意义上的匹配，换言之 Routing Key 必须与 Binding Key 相匹配的时候才将消息传送给 Queue.<br>而Topic 的路由规则是一种模糊匹配，可以通过通配符满足一部分规则就可以传送。  </p>\n<p>它的约定是：<br>1）binding key 中可以存在两种特殊字符 “” 与“#”，用于做模糊匹配，其中 “” 用于匹配一个单词，“#”用于匹配多个单词（可以是零个）<br>2）routing key 为一个句点号 “.” 分隔的字符串（我们将被句点号 “. ” 分隔开的每一段独立的字符串称为一个单词），如“stock.usd.&gt; nyse”、“nyse.vmw”、“quick.&gt; orange.rabbit”<br>3）binding key 与 routing key 一样也是句点号 “.” 分隔的字符串</p>\n<p>主题交换机图例：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%BE%E8%A7%A3.png\" alt=\"主题交换机图解\"></p>\n<p>当生产者发送消息 Routing Key=F.C.E 的时候，这时候只满足 Queue1，所以会被路由到 Queue 中，如果 Routing Key=A.C.E 这时候会被同是路由到 Queue1 和 Queue2 中，如果 Routing Key=A.F.B 时，这里只会发送一条消息到 Queue2 中。</p>\n<hr>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>主题交换机拥有非常广泛的用户案例。无论何时，当一个问题涉及到那些想要有针对性的选择需要接收消息的 多消费者/多应用（multiple consumers/applications） 的时候，主题交换机都可以被列入考虑范围。</p>\n<p>使用案例：<br>1）分发有关于特定地理位置的数据，例如销售点<br>2）由多个工作者（workers）完成的后台任务，每个工作者负责处理某些特定的任务<br>3）股票价格更新（以及其他类型的金融数据更新）<br>4）涉及到分类或者标签的新闻更新（例如，针对特定的运动项目或者队伍）<br>5）云端的不同种类服务的协调<br>6）分布式架构/基于系统的软件封装，其中每个构建者仅能处理一个特定的架构或者系统。</p>\n<hr>\n<h2 id=\"头交换机（headers-exchanges）\"><a href=\"#头交换机（headers-exchanges）\" class=\"headerlink\" title=\"头交换机（headers exchanges）\"></a>头交换机（headers exchanges）</h2><p>有时消息的路由操作会涉及到多个属性，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。</p>\n<p>我们可以绑定一个队列到头交换机上，并给他们之间的绑定使用多个用于匹配的头（header）。这个案例中，消息代理得从应用开发者那儿取到更多一段信息，换句话说，它需要考虑某条消息（message）是需要部分匹配还是全部匹配。上边说的“更多一段消息”就是”x-match”参数。当”x-match”设置为“any”时，消息头的任意一个值被匹配就可以满足条件，而当”x-match”设置为“all”的时候，就需要消息头的所有值都匹配成功。</p>\n<p>头交换机可以视为直连交换机的另一种表现形式。头交换机能够像直连交换机一样工作，不同之处在于头交换机的路由规则是建立在头属性值之上，而不是路由键。路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。</p>\n<hr>\n<h1 id=\"Queue队列\"><a href=\"#Queue队列\" class=\"headerlink\" title=\"Queue队列\"></a>Queue队列</h1><p>AMQP中的队列（Queue）跟其他消息队列或任务队列中的队列是很相似的，它们存储着即将被应用消费掉的消息。</p>\n<h2 id=\"队列属性\"><a href=\"#队列属性\" class=\"headerlink\" title=\"队列属性\"></a>队列属性</h2><p>队列跟交换机共享某些属性，但是队列也有一些另外的属性。<br>1）Name<br>2）Durable（消息代理重启后，队列依旧存在）<br>3）Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）<br>4）Auto-delete（当最后一个消费者退订后即被删除）<br>5）Arguments（一些消息代理用他来完成类似与 TTL 的某些额外功能）  </p>\n<hr>\n<h2 id=\"队列创建\"><a href=\"#队列创建\" class=\"headerlink\" title=\"队列创建\"></a>队列创建</h2><p>队列在声明（declare）后才能被使用。如果一个队列尚不存在，声明一个队列会创建它。如果声明的队列已经存在，并且属性完全相同，那么此次声明不会对原有队列产生任何影响。如果声明中的属性与已存在队列的属性有差异，那么一个错误代码为406的通道级异常就会被抛出。</p>\n<hr>\n<h2 id=\"队列名称\"><a href=\"#队列名称\" class=\"headerlink\" title=\"队列名称\"></a>队列名称</h2><p>队列的名字可以由应用（application）来取，也可以让消息代理（broker）直接生成一个。队列的名字可以是最多255字节的一个utf-8字符串。若希望AMQP消息代理生成队列名，需要给队列的name参数赋值一个空字符串：在同一个通道（channel）的后续的方法（method）中，我们可以使用空字符串来表示之前生成的队列名称。之所以之后的方法可以获取正确的队列名是因为通道可以默默地记住消息代理最后一次生成的队列名称。<br>以”amq.”开始的队列名称被预留做消息代理内部使用。如果试图在队列声明时打破这一规则的话，一个通道级的403 (ACCESS_REFUSED)错误会被抛出。</p>\n<hr>\n<h2 id=\"队列持久化\"><a href=\"#队列持久化\" class=\"headerlink\" title=\"队列持久化\"></a>队列持久化</h2><p>持久化队列（Durable queues）会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。并不是所有的场景和案例都需要将队列持久化。<br>持久化的队列并不会使得路由到它的消息也具有持久性。倘若消息代理挂掉了，重新启动，那么在重启的过程中持久化队列会被重新声明，无论怎样，只有经过持久化的消息才能被重新恢复。</p>\n<hr>\n<h1 id=\"Binding绑定\"><a href=\"#Binding绑定\" class=\"headerlink\" title=\"Binding绑定\"></a>Binding绑定</h1><p>绑定（Binding）是交换机（exchange）将消息（message）路由给队列（queue）所需遵循的规则。如果要指示交换机“E”将消息路由给队列“Q”，那么“Q”就需要与“E”进行绑定。绑定操作需要定义一个可选的路由键（routing key）属性给某些类型的交换机。路由键的意义在于从发送给交换机的众多消息中选择出某些消息，将其路由给绑定的队列。</p>\n<p>打个比方：<br>队列（queue）是我们想要去的位于纽约的目的地<br>交换机（exchange）是JFK机场<br>绑定（binding）就是JFK机场到目的地的路线。能够到达目的地的路线可以是一条或者多条<br>拥有了交换机这个中间层，很多由发布者直接到队列难以实现的路由方案能够得以实现，并且避免了应用开发者的许多重复劳动。  </p>\n<p>如果AMQP的消息无法路由到队列（例如，发送到的交换机没有绑定队列），消息会被就地销毁或者返还给发布者。如何处理取决于发布者设置的消息属性。</p>\n<p><strong>最终解释：绑定是消息队列和交换器之间的关联，绑定是交换器和消息队列连接起来的路由规则。</strong></p>\n<hr>\n<h1 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h1><p>消息如果只是存储在队列里是没有任何用处的。被应用消费掉，消息的价值才能够体现。</p>\n<p>在AMQP 0-9-1 模型中，有两种途径可以达到此目的：<br>1）将消息投递给应用 (“push API”)<br>2）应用根据需要主动获取消息 (“pull API”)</p>\n<p>使用push API，应用（application）需要明确表示出它在某个特定队列里所感兴趣的，想要消费的消息。如是，我们可以说应用注册了一个消费者，或者说订阅了一个队列。一个队列可以注册多个消费者，也可以注册一个独享的消费者（当独享消费者存在时，其他消费者即被排除在外）。</p>\n<p>每个消费者（订阅者）都有一个叫做消费者标签的标识符。它可以被用来退订消息。消费者标签实际上是一个字符串。</p>\n<hr>\n<h1 id=\"消息机制\"><a href=\"#消息机制\" class=\"headerlink\" title=\"消息机制\"></a>消息机制</h1><h2 id=\"消息属性\"><a href=\"#消息属性\" class=\"headerlink\" title=\"消息属性\"></a>消息属性</h2><p>AMQP 模型中的消息（Message）对象是带有属性（Attributes）的。有些属性及其常见，以至于 AMQP 0-9-1 明确的定义了它们，并且应用开发者们无需费心思思考这些属性名字所代表的具体含义。</p>\n<p>例如：<br>1）Content type（内容类型）<br>2）Content encoding（内容编码）<br>3）Routing key（路由键）<br>4）Delivery mode (persistent or not)<br>5）投递模式（持久化 或 非持久化）<br>6）Message priority（消息优先权）<br>7）Message publishing timestamp（消息发布的时间戳）<br>8）Expiration period（消息有效期）<br>9）Publisher application id（发布应用的 ID）  </p>\n<p>有些属性是被 AMQP 代理所使用的，但是大多数是开放给接收它们的应用解释器用的。有些属性是可选的也被称作消息头（headers）。他们跟 HTTP 协议的 X-Headers 很相似。消息属性需要在消息被发布的时候定义。</p>\n<hr>\n<h2 id=\"消息主体\"><a href=\"#消息主体\" class=\"headerlink\" title=\"消息主体\"></a>消息主体</h2><p>AMQP 的消息除属性外，也含有一个有效载荷 - Payload（消息实际携带的数据），它被 AMQP 代理当作不透明的字节数组来对待。</p>\n<p>消息代理不会检查或者修改有效载荷。消息可以只包含属性而不携带有效载荷。它通常会使用类似 JSON 这种序列化的格式数据，为了节省，协议缓冲器和 MessagePack 将结构化数据序列化，以便以消息的有效载荷的形式发布。AMQP 及其同行者们通常使用 “content-type” 和 “content-encoding” 这两个字段来与消息沟通进行有效载荷的辨识工作，但这仅仅是基于约定而已。</p>\n<hr>\n<h2 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h2><p>消息能够以持久化的方式发布，AMQP 代理会将此消息存储在磁盘上。如果服务器重启，系统会确认收到的持久化消息未丢失。</p>\n<p>简单地将消息发送给一个持久化的交换机或者路由给一个持久化的队列，并不会使得此消息具有持久化性质：它完全取决与消息本身的持久模式（persistence mode）。将消息以持久化方式发布时，会对性能造成一定的影响（就像数据库操作一样，健壮性的存在必定造成一些性能牺牲）。</p>\n<hr>\n<h2 id=\"消息确认\"><a href=\"#消息确认\" class=\"headerlink\" title=\"消息确认\"></a>消息确认</h2><p>消费者应用（Consumer applications）用来接受和处理消息的应用 - 在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题。这就给我们出了个难题，AMQP 代理在什么时候删除消息才是正确的？</p>\n<p>AMQP 0-9-1 规范给我们两种建议：<br>1）自动确认模式：当消息代理（broker）将消息发送给应用后立即删除。（使用 AMQP 方法：basic.deliver 或 basic.get-ok）)<br>2）显式确认模式：待应用（application）发送一个确认回执（acknowledgement）后再删除消息。（使用 AMQP 方法：basic.ack）</p>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那 AMQP 代理会将消息重新投递给另一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。</p>\n<hr>\n<h2 id=\"拒绝消息\"><a href=\"#拒绝消息\" class=\"headerlink\" title=\"拒绝消息\"></a>拒绝消息</h2><p>当一个消费者接收到某条消息后，处理过程有可能成功，有可能失败。应用可以向消息代理表明，本条消息由于“拒绝消息（Rejecting Messages）”的原因处理失败了（或者未能在此时完成）。</p>\n<p>当拒绝某条消息时，应用可以告诉消息代理如何处理这条消息——销毁它或者重新放入队列。</p>\n<p>当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。</p>\n<hr>\n<h2 id=\"预取消息\"><a href=\"#预取消息\" class=\"headerlink\" title=\"预取消息\"></a>预取消息</h2><p>在多个消费者共享一个队列的案例中，明确指定在收到下一个确认回执前每个消费者一次可以接受多少条消息是非常有用的。这可以在试图批量发布消息的时候起到简单的负载均衡和提高消息吞吐量的作用。For example, if a producing application sends messages every minute because of the nature of the work it is doing.（？？？例如，如果生产应用每分钟才发送一条消息，这说明处理工作尚在运行。）</p>\n<p>注意，RabbitMQ 只支持通道级的预取计数，而不是连接级的或者基于大小的预取。</p>\n<hr>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p>AMQP连接通常是长连接。AMQP是一个使用TCP提供可靠投递的应用层协议。AMQP使用认证机制并且提供TLS（SSL）保护。当一个应用不再需要连接到AMQP代理的时候，需要优雅的释放掉AMQP连接，而不是直接将TCP连接关闭。</p>\n<hr>\n<h2 id=\"通道\"><a href=\"#通道\" class=\"headerlink\" title=\"通道\"></a>通道</h2><p>有些应用需要与AMQP代理建立多个连接。无论怎样，同时开启多个TCP连接都是不合适的，因为这样做会消耗掉过多的系统资源并且使得防火墙的配置更加困难。AMQP 0-9-1提供了通道（channels）来处理多连接，可以把通道理解成共享一个TCP连接的多个轻量化连接。</p>\n<p>在涉及多线程/进程的应用中，为每个线程/进程开启一个通道（channel）是很常见的，并且这些通道不能被线程/进程共享。</p>\n<p>一个特定通道上的通讯与其他通道上的通讯是完全隔离的，因此每个AMQP方法都需要携带一个通道号，这样客户端就可以指定此方法是为哪个通道准备的。</p>\n<hr>\n<h2 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h2><p>为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟Web servers虚拟主机概念非常相似，这为AMQP实体提供了完全隔离的环境。当连接被建立的时候，AMQP客户端来指定使用哪个虚拟主机。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://rabbitmq.mr-ping.com/\">http://rabbitmq.mr-ping.com/</a><br><a href=\"https://www.cnblogs.com/dwlsxj/p/RabbitMQ.html\">https://www.cnblogs.com/dwlsxj/p/RabbitMQ.html</a></p>"},{"title":"消息中间件入门与简介","date":"2021-06-19T16:00:00.000Z","author":"神奇的荣荣","summary":"","_content":"\n# 什么是中间件\n\n## 什么是中间件\n\n我国企业从20世纪80年代开始就逐渐进行信息化建设，由于方法和体系的不成熟，以及企业业务的市场需求的不断变化，一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。\n\n中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件+平台+通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和使用软件区分开来\n\n***\n\n<!-- more -->\n\n## 中间件特点\n\n为解决分布异构问题，人们提出了中间件（middleware)的概念。中间件是位于平台（硬件和操作系统）和应用之间的通用服务，如下图所示，这些服务具有标准的程序接口和协议。针对不同的操作系统和硬件平台，它们可以有符合接口的协议规范的多种实现。\n\n![中间件特点](https://niubilityoyr.github.io/images/MQ/中间件特点.png)\n\n也很难给中间件一个严格的定义，但中间件应具有如下的一些特点：  \n（1）满足大量应用的需要  \n（2）运行于多种硬件和 OS平台  \n（3）支持分布计算，提供跨网络、硬件和 OS平台的透明性的应用或服务的交互  \n（4）支持标准的协议  \n（5）支持标准的接口\n\n由于标准接口对于可移植性和标准协议对于互操作性的重要性，中间件已成为许多标准化工作的主要部分。对于应用软件开发，中间件远比操作系统和网络服务更为重要，中间件提供的程序接口定义了一个相对稳定的高层应用环境，不管底层的计算机硬件和系统软件怎样更新换代，只要将中间件升级更新，并保持中间件对外的接口定义不变，应用软件几乎不需任何修改，从而保护了企业在应用软件开发和维护中的重大投资。\n\n简单说：中间件有个很大的特点，是脱离于具体设计目标，而具备提供普遍独立功能需求的模块。这使得中间件一定是可替换的。如果一个系统设计中，中间件时不可替代的，不是架构、框架设计有问题，那么就是这个中间件，在别处可能是个中间件，在这个系统内是引擎。\n\n***\n\n## 常见中间件\n\n![常见中间件](https://niubilityoyr.github.io/images/MQ/常见中间件.png)\n\n***\n\n## 学习中间件的方式和技巧\n\n1）理解中间件在项目架构中的作用，以及各中间件的底层实现  \n2）可以使用一些类比的生活概念去理解中间件  \n3）使用一些流程图或者脑图的方式去梳理各个中间件在架构中的作用  \n4）尝试用 java技术去实现中间件的原理  \n5）静下来去思考中间件在项目中设计的和使用的原因  \n6）如果找到对应的代替总结方案  \n7）尝试编写博文总结类同中间件技术的对比和使用场景  \n8）学会查看中间件的源码以及开源项目和博文\n\n***\n\n# 什么是消息中间件\n\n## 什么是消息中间件\n\n消息中间件：\n是利用高效可靠的消息传递机制进行异步的数据传输，并基于数据通信进行分布式系统的集成。通过提供消息队列模型和消息传递机制，可以在分布式环境下扩展进程间的通信。\n\n***\n\n## 为什么需要使用消息中间件\n具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。\n\n***\n\n## 消息中间件功能与组成\n\n### 功能\n\n消息中间件：\n是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务。\n\nMQ消息队列：负责数据的接受，存储和传递，所以性能要高于普通服务和技术。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/mq消息队列图解1.png)\n\n谁来生产消息，存储消息和消费消息呢？  \n生产者生产消息，MQ存储消息，消费者消费消息  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/mq消息队列图解2.png)\n\n### 核心组成部分\n\n消息中间件的核心组成部分：  \n消息的协议   \n消息的持久化机制   \n消息的分发策略   \n消息的高可用  \n高可靠消息的容错机制\n\n\n## 消息中间件应用场景\n\n参考：https://www.jianshu.com/p/3fed7e963a2d\n\n***\n\n### 异步通信\n\n异步通信：（异步处理）    \n当有些业务不想也不需要立即处理，消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。\n\n案例讲解：  \n假设有一个系统调用链路为A调用B耗时20ms，B调用C耗时20ms，而C调用D需要2s，这样下来整个调用需要耗时2040ms。但实际上A调用B，B调用C只需要40ms，而D系统的引入直接导致系统性能下降约50倍。此时我们应该考虑将D系统的调用抽离出来，做一个异步调用。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/并行执行.png)\n\n生活中有一个很形象的例子。我们点一杯奶茶，下单、付款、通知商家制作都很快，然而到匹配外卖小哥配送这个过程很慢。作为用户来说，匹配外卖小哥这个过程延迟一些时间是可以接受的，只要我能快速下单成功，并且在一定时间范围内安排快递小哥送货即可。\n\n按照上面的思路，系统A到系统B再到系统C就直接结束了，然后系统C再将消息发送到消息中间件中，系统D从消息中间件里取消息进行消费，这样子我们系统的性能就提高了接近50倍。  \n过程如下图所示：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/异步执行.png)\n\n### 系统解耦\n\n系统解耦：降低系统之间的耦合度。\n\n案例讲解：\n首先假设有一个核心系统A，其能产生核心数据供下游服务（系统B和系统C）使用。此时最易想到的办法就是A直接把数据发送给B和C，流程如下：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/系统耦合.png)\n\n那么问题来了，此时假设又有D、E、F、G等多个系统也需要使用核心数据，此时流程图如下：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/系统耦合2.png)\n\n我们可以想象一下，假设有上百个系统都需要系统A的核心数据，此时负责系统A的工程师将是崩溃的，一旦有系统加入，A系统就需要修改代码，将数据发送到新加入的系统。反之，如果有系统不再需要A发送数据，那么A系统又得修改代码不再向其发送数据。这样的架构设计耦合度太高了，我们就可以引入消息中间件来实现系统之间的解耦。即核心系统A生产核心数据，然后将核心数据发送到消息中间件，下游消费系统根据自身需求从中间件里获取消息进行消费，当不再需要数据时就不取消息进即可，这样系统之间耦合度就大大降低了。具体流程图如下：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/系统解耦.png)\n\n### 流量削峰\n\n流量消峰：\n针对某一时间段的大量用户访问产生的大量流量，进行延缓，层层过滤，遵从 “最后落地到数据库的请求数要尽量少”的原则.\n\n案例讲解：\n假设有一个系统，正常时间也就每秒几百个请求，部署在一个8核16G的机器上，运行起来轻松加愉快。然而突然由于搞一个活动，高峰期请求数达到了几千，出现了瞬时流量高峰，此时最易想到的是加机器，部署个10台机器，也能扛住此时的高并发。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/流量削峰1.png)\n\n那么问题来了，瞬时流量每天也就那么几十分钟，过后就是正常的每秒几百请求，我们如果部署10台机器，那么平均下来没台机器的请求数也就每秒几十次，这样是不是有点太浪费资源了呢？大部分时候，每秒几百请求，一台机器就能够扛住了，但是为了抗那每天瞬时的高峰，硬是部署了10台机器，每天就那几十分钟有用，别的时候都是浪费资源的。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/流量削峰2.png)\n\n但是如果仅仅部署一台机器，瞬间高峰就会击垮系统，因为单台机器是不能扛住每秒几千次请求的。这时我们就可以考虑引入消息中间件，进行流量削峰。我们可以部署一层消息队列在机器前面，平时正常的每秒几百次请求，机器就正常的消费消息即可，一旦流量高峰到达时，大量消息会堆积在消息队列里面，机器只需要按照自己的最大负荷从消息队列里面消费，等流量高峰过了，慢慢地队列里面的消息也消费完毕了。此时达到了一个削峰填谷的作用。具体如图所示：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/流量削峰3.png)\n\n## 常见的消息中间件\n\nActiveMQ，RabbitMQ，Kafka，RocketMQ\n\n***\n\n# 消息队列协议\n\n## 什么是协议\n\n![常见中间件](https://niubilityoyr.github.io/images/MQ/mq协议.png)\n\n所谓协议是指：  \n1）计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流  \n2）和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较的高  \n3）协议对数据格式和计算机之间交换数据都必须严格遵守规范\n\n***\n\n## 网络协议的三要素\n\n1）语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序  \n2）语义：语义是解释控制信息每个部分的意义，它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应  \n3）时序：时序是对事件发生顺序的详细说明\n\n比如我 MQ发送一个信息，是以什么数据格式发送到队列中，然后每个部分的含义是什么，发送完毕以后的执行的动作，以及消费者消费消息的动作，消费完毕的相应结构和反馈是什么，然后按照对应的执行顺序进行处理。如果你还是不理解：大家每天都在接触的http请求协议：  \n1）语法：http规定了请求报文和响应报文的格式  \n2）语义：客户端主动发起请求称之为请求（这是一种定义，同时你发起的是 post/get请求）  \n3）时序：一个请求对应一个响应（一定先有请求在有响应，这个是时序）\n\n***\n\n## 常见的消息中间件协议\n\n消息中间件采用的不是 http协议。  \n常见的消息中间件协议有：JSM、AMQP、Kafka，OpenMessage，OpenWire，MQTT协议\n\n***\n\n### JMS协议\n\nJMS：（全称：Java Message Service）Java消息服务，应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。这是java定义的api，是不可跨语言，是不可跨平台的。\n\n特性：  \n1）可靠的消息处理  \n2）消息的持久化支持  \n3）跨平台跨语言支持差\n\n支持MQ：ActiveMQ\n\n### AMQP协议\n\nAMQP：（全称：Advanced Message Queuing Protocol）是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。\n\n特性：  \n1）分布式事务支持  \n2）消息的持久化支持  \n3）高性能和高可靠的消息处理优势\n\n支持MQ：RabbitMQ\n\n### MQTT协议\n\nMQTT：（Message Queueing Telemetry Transport）消息队列是 IBM开放的及时通讯协议，物联网系统架构中的重要组成部分。\n\n特点：  \n1）轻量  \n2）结构简单  \n3）传输快，不支持事务  \n4）没有持久化设计\n\n支持MQ：RabbitMQ\n\n### Kafka协议\n\nKafka协议：是基于TCP/IP的二进制协议。消息内部是 通过长度来分割，由一些基本数据类型组成。\n\n特点：  \n1）结构简单  \n2）解析速度快  \n3）无事务支持  \n4）有持久化设计\n\n代表MQ：Kafka\n\n### OpenMessage协议\n\nOpenMessage协议：是近几年由阿里、雅虎和滴滴出行、Stremalio等公司共同参与创立的分布式信息中间件、流处理等领域的应用开发标准。\n\n特点：  \n1）结构简单  \n2）解析速度快  \n3）支持事务和持久化设计\n\n支持MQ：RocketMQ\n\n## 为什么消息中间件不使用 http协议\n\n为什么消息中间件不使用 http协议？  \n1）因为 http请求报文头和响应报文头是比较复杂的，包含了Cookie，数据的加密解密，窗台吗，响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速  \n2）大部分情况下 http大部分都是短链接，在实际的交互过程中，一个请求到响应都很有可能会中断，中断以后就不会执行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取信息的过程，出现问题和故障要对数据或消息执行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。\n\n***\n\n# 消息队列持久化\n\n## 持久化\n\n简单来说就是将数据存入磁盘，而不是存在内存中随服务器重启断开而消失，使数据能够永久保存。  \n![消息持久化图片](https://niubilityoyr.github.io/images/MQ/消息持久化.png)\n\n***\n\n## 常见MQ的持久化方式\n\nActiveMQ：支持文件存储，支持数据库\n\nRabbitMQ & Kafka & RocketMQ：支持文件存储\n\n***\n\n# 消息的分发策略\n\n## 场景分析\n\n场景分析一：  \n![消息分发1](https://niubilityoyr.github.io/images/MQ/消息分发1.png)  \n比如我在 APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被哪个系统或者哪些服务器或者系统进行消费，那这个时候就需要一个分发的策略。这就需要消费策略。或者称之为消费的方法论。\n\n场景分析二：  \n![消息分发2](https://niubilityoyr.github.io/images/MQ/消息分发2.png)  \n在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费 MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发消息策略的机制。\n\n## 消息的分发策略\n\nMQ消息队列有如下几个角色  \n1）生产者  \n2）存储消息  \n3）消费者\n\n那么生产者生成消息以后，MQ进行存储，消费者是如何获取消息的呢？一般获取数据的方式无外乎推（push）或者拉（pull）两种方式，典型的 git就有推拉机制，我们发送的 http请求就是一种典型的拉取数据库数据返回的过程。而消息队列 MQ是一种推送的过程，而这些推机制会使用到很多的业务场景也有很多对应推机制策略。\n\n![消息分发策略](https://niubilityoyr.github.io/images/MQ/消息分发策略.png)  \n\n***\n\n# 消息队列高可用和高可靠\n\n## 什么是高可用机制\n\n所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力\n当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU，内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的。\n\n### 集群模式一\n\nMaster-slave主从同步部署方式  \n![集群模式1](https://niubilityoyr.github.io/images/MQ/集群模式一.png)  \n解释：这种模式写入消息同样在 Master主节点上，但是主节点会同步数据到 slave节点形成副本，和 zookeeper或者 redis主从机制很雷同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点进行消费，消息的拷贝和同步会占用很大的带宽和网络资源。\n\n### 集群模式二\n\nMaster-slave与 Broker-cluster组合的方案  \n![集群模式1](https://niubilityoyr.github.io/images/MQ/集群模式二.png)  \n解释：如果你插入的数据是 broker-1中国，元数据信息会存储数据的相关描述和记录存放的位置（队列）。它会对描述信息也就是元数据信息进行同步，如果消费者在 broker-2中进行消费，发现自己节点没有对应的信息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他回去联系其他的黄牛询问，如果有就返回。\n\n**注意：实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。**\n\n\n## 什么是高可靠机制\n\n所谓高可靠是指：  \n系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠。\n\n如何保证中间件消息的可靠性呢，可以从两个方面考虑：  \n1）消息的传输：通过协议来保证系统间数据解析的正确性  \n2）消息的存储区可靠：通过持久化来保证消息的可靠性\n\n注意：在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的。","source":"_posts/MQ/消息中间件入门与简介.md","raw":"---\ntitle: 消息中间件入门与简介\ndate: 2021-06-20 00:00:00\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: MQ\ncategories: MQ\n---\n\n# 什么是中间件\n\n## 什么是中间件\n\n我国企业从20世纪80年代开始就逐渐进行信息化建设，由于方法和体系的不成熟，以及企业业务的市场需求的不断变化，一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。\n\n中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件+平台+通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和使用软件区分开来\n\n***\n\n<!-- more -->\n\n## 中间件特点\n\n为解决分布异构问题，人们提出了中间件（middleware)的概念。中间件是位于平台（硬件和操作系统）和应用之间的通用服务，如下图所示，这些服务具有标准的程序接口和协议。针对不同的操作系统和硬件平台，它们可以有符合接口的协议规范的多种实现。\n\n![中间件特点](https://niubilityoyr.github.io/images/MQ/中间件特点.png)\n\n也很难给中间件一个严格的定义，但中间件应具有如下的一些特点：  \n（1）满足大量应用的需要  \n（2）运行于多种硬件和 OS平台  \n（3）支持分布计算，提供跨网络、硬件和 OS平台的透明性的应用或服务的交互  \n（4）支持标准的协议  \n（5）支持标准的接口\n\n由于标准接口对于可移植性和标准协议对于互操作性的重要性，中间件已成为许多标准化工作的主要部分。对于应用软件开发，中间件远比操作系统和网络服务更为重要，中间件提供的程序接口定义了一个相对稳定的高层应用环境，不管底层的计算机硬件和系统软件怎样更新换代，只要将中间件升级更新，并保持中间件对外的接口定义不变，应用软件几乎不需任何修改，从而保护了企业在应用软件开发和维护中的重大投资。\n\n简单说：中间件有个很大的特点，是脱离于具体设计目标，而具备提供普遍独立功能需求的模块。这使得中间件一定是可替换的。如果一个系统设计中，中间件时不可替代的，不是架构、框架设计有问题，那么就是这个中间件，在别处可能是个中间件，在这个系统内是引擎。\n\n***\n\n## 常见中间件\n\n![常见中间件](https://niubilityoyr.github.io/images/MQ/常见中间件.png)\n\n***\n\n## 学习中间件的方式和技巧\n\n1）理解中间件在项目架构中的作用，以及各中间件的底层实现  \n2）可以使用一些类比的生活概念去理解中间件  \n3）使用一些流程图或者脑图的方式去梳理各个中间件在架构中的作用  \n4）尝试用 java技术去实现中间件的原理  \n5）静下来去思考中间件在项目中设计的和使用的原因  \n6）如果找到对应的代替总结方案  \n7）尝试编写博文总结类同中间件技术的对比和使用场景  \n8）学会查看中间件的源码以及开源项目和博文\n\n***\n\n# 什么是消息中间件\n\n## 什么是消息中间件\n\n消息中间件：\n是利用高效可靠的消息传递机制进行异步的数据传输，并基于数据通信进行分布式系统的集成。通过提供消息队列模型和消息传递机制，可以在分布式环境下扩展进程间的通信。\n\n***\n\n## 为什么需要使用消息中间件\n具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。\n\n***\n\n## 消息中间件功能与组成\n\n### 功能\n\n消息中间件：\n是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务。\n\nMQ消息队列：负责数据的接受，存储和传递，所以性能要高于普通服务和技术。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/mq消息队列图解1.png)\n\n谁来生产消息，存储消息和消费消息呢？  \n生产者生产消息，MQ存储消息，消费者消费消息  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/mq消息队列图解2.png)\n\n### 核心组成部分\n\n消息中间件的核心组成部分：  \n消息的协议   \n消息的持久化机制   \n消息的分发策略   \n消息的高可用  \n高可靠消息的容错机制\n\n\n## 消息中间件应用场景\n\n参考：https://www.jianshu.com/p/3fed7e963a2d\n\n***\n\n### 异步通信\n\n异步通信：（异步处理）    \n当有些业务不想也不需要立即处理，消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。\n\n案例讲解：  \n假设有一个系统调用链路为A调用B耗时20ms，B调用C耗时20ms，而C调用D需要2s，这样下来整个调用需要耗时2040ms。但实际上A调用B，B调用C只需要40ms，而D系统的引入直接导致系统性能下降约50倍。此时我们应该考虑将D系统的调用抽离出来，做一个异步调用。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/并行执行.png)\n\n生活中有一个很形象的例子。我们点一杯奶茶，下单、付款、通知商家制作都很快，然而到匹配外卖小哥配送这个过程很慢。作为用户来说，匹配外卖小哥这个过程延迟一些时间是可以接受的，只要我能快速下单成功，并且在一定时间范围内安排快递小哥送货即可。\n\n按照上面的思路，系统A到系统B再到系统C就直接结束了，然后系统C再将消息发送到消息中间件中，系统D从消息中间件里取消息进行消费，这样子我们系统的性能就提高了接近50倍。  \n过程如下图所示：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/异步执行.png)\n\n### 系统解耦\n\n系统解耦：降低系统之间的耦合度。\n\n案例讲解：\n首先假设有一个核心系统A，其能产生核心数据供下游服务（系统B和系统C）使用。此时最易想到的办法就是A直接把数据发送给B和C，流程如下：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/系统耦合.png)\n\n那么问题来了，此时假设又有D、E、F、G等多个系统也需要使用核心数据，此时流程图如下：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/系统耦合2.png)\n\n我们可以想象一下，假设有上百个系统都需要系统A的核心数据，此时负责系统A的工程师将是崩溃的，一旦有系统加入，A系统就需要修改代码，将数据发送到新加入的系统。反之，如果有系统不再需要A发送数据，那么A系统又得修改代码不再向其发送数据。这样的架构设计耦合度太高了，我们就可以引入消息中间件来实现系统之间的解耦。即核心系统A生产核心数据，然后将核心数据发送到消息中间件，下游消费系统根据自身需求从中间件里获取消息进行消费，当不再需要数据时就不取消息进即可，这样系统之间耦合度就大大降低了。具体流程图如下：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/系统解耦.png)\n\n### 流量削峰\n\n流量消峰：\n针对某一时间段的大量用户访问产生的大量流量，进行延缓，层层过滤，遵从 “最后落地到数据库的请求数要尽量少”的原则.\n\n案例讲解：\n假设有一个系统，正常时间也就每秒几百个请求，部署在一个8核16G的机器上，运行起来轻松加愉快。然而突然由于搞一个活动，高峰期请求数达到了几千，出现了瞬时流量高峰，此时最易想到的是加机器，部署个10台机器，也能扛住此时的高并发。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/流量削峰1.png)\n\n那么问题来了，瞬时流量每天也就那么几十分钟，过后就是正常的每秒几百请求，我们如果部署10台机器，那么平均下来没台机器的请求数也就每秒几十次，这样是不是有点太浪费资源了呢？大部分时候，每秒几百请求，一台机器就能够扛住了，但是为了抗那每天瞬时的高峰，硬是部署了10台机器，每天就那几十分钟有用，别的时候都是浪费资源的。  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/流量削峰2.png)\n\n但是如果仅仅部署一台机器，瞬间高峰就会击垮系统，因为单台机器是不能扛住每秒几千次请求的。这时我们就可以考虑引入消息中间件，进行流量削峰。我们可以部署一层消息队列在机器前面，平时正常的每秒几百次请求，机器就正常的消费消息即可，一旦流量高峰到达时，大量消息会堆积在消息队列里面，机器只需要按照自己的最大负荷从消息队列里面消费，等流量高峰过了，慢慢地队列里面的消息也消费完毕了。此时达到了一个削峰填谷的作用。具体如图所示：  \n![常见中间件](https://niubilityoyr.github.io/images/MQ/流量削峰3.png)\n\n## 常见的消息中间件\n\nActiveMQ，RabbitMQ，Kafka，RocketMQ\n\n***\n\n# 消息队列协议\n\n## 什么是协议\n\n![常见中间件](https://niubilityoyr.github.io/images/MQ/mq协议.png)\n\n所谓协议是指：  \n1）计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流  \n2）和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较的高  \n3）协议对数据格式和计算机之间交换数据都必须严格遵守规范\n\n***\n\n## 网络协议的三要素\n\n1）语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序  \n2）语义：语义是解释控制信息每个部分的意义，它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应  \n3）时序：时序是对事件发生顺序的详细说明\n\n比如我 MQ发送一个信息，是以什么数据格式发送到队列中，然后每个部分的含义是什么，发送完毕以后的执行的动作，以及消费者消费消息的动作，消费完毕的相应结构和反馈是什么，然后按照对应的执行顺序进行处理。如果你还是不理解：大家每天都在接触的http请求协议：  \n1）语法：http规定了请求报文和响应报文的格式  \n2）语义：客户端主动发起请求称之为请求（这是一种定义，同时你发起的是 post/get请求）  \n3）时序：一个请求对应一个响应（一定先有请求在有响应，这个是时序）\n\n***\n\n## 常见的消息中间件协议\n\n消息中间件采用的不是 http协议。  \n常见的消息中间件协议有：JSM、AMQP、Kafka，OpenMessage，OpenWire，MQTT协议\n\n***\n\n### JMS协议\n\nJMS：（全称：Java Message Service）Java消息服务，应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。这是java定义的api，是不可跨语言，是不可跨平台的。\n\n特性：  \n1）可靠的消息处理  \n2）消息的持久化支持  \n3）跨平台跨语言支持差\n\n支持MQ：ActiveMQ\n\n### AMQP协议\n\nAMQP：（全称：Advanced Message Queuing Protocol）是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。\n\n特性：  \n1）分布式事务支持  \n2）消息的持久化支持  \n3）高性能和高可靠的消息处理优势\n\n支持MQ：RabbitMQ\n\n### MQTT协议\n\nMQTT：（Message Queueing Telemetry Transport）消息队列是 IBM开放的及时通讯协议，物联网系统架构中的重要组成部分。\n\n特点：  \n1）轻量  \n2）结构简单  \n3）传输快，不支持事务  \n4）没有持久化设计\n\n支持MQ：RabbitMQ\n\n### Kafka协议\n\nKafka协议：是基于TCP/IP的二进制协议。消息内部是 通过长度来分割，由一些基本数据类型组成。\n\n特点：  \n1）结构简单  \n2）解析速度快  \n3）无事务支持  \n4）有持久化设计\n\n代表MQ：Kafka\n\n### OpenMessage协议\n\nOpenMessage协议：是近几年由阿里、雅虎和滴滴出行、Stremalio等公司共同参与创立的分布式信息中间件、流处理等领域的应用开发标准。\n\n特点：  \n1）结构简单  \n2）解析速度快  \n3）支持事务和持久化设计\n\n支持MQ：RocketMQ\n\n## 为什么消息中间件不使用 http协议\n\n为什么消息中间件不使用 http协议？  \n1）因为 http请求报文头和响应报文头是比较复杂的，包含了Cookie，数据的加密解密，窗台吗，响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速  \n2）大部分情况下 http大部分都是短链接，在实际的交互过程中，一个请求到响应都很有可能会中断，中断以后就不会执行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取信息的过程，出现问题和故障要对数据或消息执行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。\n\n***\n\n# 消息队列持久化\n\n## 持久化\n\n简单来说就是将数据存入磁盘，而不是存在内存中随服务器重启断开而消失，使数据能够永久保存。  \n![消息持久化图片](https://niubilityoyr.github.io/images/MQ/消息持久化.png)\n\n***\n\n## 常见MQ的持久化方式\n\nActiveMQ：支持文件存储，支持数据库\n\nRabbitMQ & Kafka & RocketMQ：支持文件存储\n\n***\n\n# 消息的分发策略\n\n## 场景分析\n\n场景分析一：  \n![消息分发1](https://niubilityoyr.github.io/images/MQ/消息分发1.png)  \n比如我在 APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被哪个系统或者哪些服务器或者系统进行消费，那这个时候就需要一个分发的策略。这就需要消费策略。或者称之为消费的方法论。\n\n场景分析二：  \n![消息分发2](https://niubilityoyr.github.io/images/MQ/消息分发2.png)  \n在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费 MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发消息策略的机制。\n\n## 消息的分发策略\n\nMQ消息队列有如下几个角色  \n1）生产者  \n2）存储消息  \n3）消费者\n\n那么生产者生成消息以后，MQ进行存储，消费者是如何获取消息的呢？一般获取数据的方式无外乎推（push）或者拉（pull）两种方式，典型的 git就有推拉机制，我们发送的 http请求就是一种典型的拉取数据库数据返回的过程。而消息队列 MQ是一种推送的过程，而这些推机制会使用到很多的业务场景也有很多对应推机制策略。\n\n![消息分发策略](https://niubilityoyr.github.io/images/MQ/消息分发策略.png)  \n\n***\n\n# 消息队列高可用和高可靠\n\n## 什么是高可用机制\n\n所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力\n当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU，内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的。\n\n### 集群模式一\n\nMaster-slave主从同步部署方式  \n![集群模式1](https://niubilityoyr.github.io/images/MQ/集群模式一.png)  \n解释：这种模式写入消息同样在 Master主节点上，但是主节点会同步数据到 slave节点形成副本，和 zookeeper或者 redis主从机制很雷同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点进行消费，消息的拷贝和同步会占用很大的带宽和网络资源。\n\n### 集群模式二\n\nMaster-slave与 Broker-cluster组合的方案  \n![集群模式1](https://niubilityoyr.github.io/images/MQ/集群模式二.png)  \n解释：如果你插入的数据是 broker-1中国，元数据信息会存储数据的相关描述和记录存放的位置（队列）。它会对描述信息也就是元数据信息进行同步，如果消费者在 broker-2中进行消费，发现自己节点没有对应的信息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他回去联系其他的黄牛询问，如果有就返回。\n\n**注意：实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。**\n\n\n## 什么是高可靠机制\n\n所谓高可靠是指：  \n系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠。\n\n如何保证中间件消息的可靠性呢，可以从两个方面考虑：  \n1）消息的传输：通过协议来保证系统间数据解析的正确性  \n2）消息的存储区可靠：通过持久化来保证消息的可靠性\n\n注意：在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的。","slug":"MQ/消息中间件入门与简介","published":1,"updated":"2021-06-25T02:07:59.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hnf000od1s63p0cfsvv","content":"<h1 id=\"什么是中间件\"><a href=\"#什么是中间件\" class=\"headerlink\" title=\"什么是中间件\"></a>什么是中间件</h1><h2 id=\"什么是中间件-1\"><a href=\"#什么是中间件-1\" class=\"headerlink\" title=\"什么是中间件\"></a>什么是中间件</h2><p>我国企业从20世纪80年代开始就逐渐进行信息化建设，由于方法和体系的不成熟，以及企业业务的市场需求的不断变化，一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。</p>\n<p>中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件+平台+通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和使用软件区分开来</p>\n<hr>\n<span id=\"more\"></span>\n\n<h2 id=\"中间件特点\"><a href=\"#中间件特点\" class=\"headerlink\" title=\"中间件特点\"></a>中间件特点</h2><p>为解决分布异构问题，人们提出了中间件（middleware)的概念。中间件是位于平台（硬件和操作系统）和应用之间的通用服务，如下图所示，这些服务具有标准的程序接口和协议。针对不同的操作系统和硬件平台，它们可以有符合接口的协议规范的多种实现。</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MQ/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%89%B9%E7%82%B9.png\" alt=\"中间件特点\"></p>\n<p>也很难给中间件一个严格的定义，但中间件应具有如下的一些特点：<br>（1）满足大量应用的需要<br>（2）运行于多种硬件和 OS平台<br>（3）支持分布计算，提供跨网络、硬件和 OS平台的透明性的应用或服务的交互<br>（4）支持标准的协议<br>（5）支持标准的接口</p>\n<p>由于标准接口对于可移植性和标准协议对于互操作性的重要性，中间件已成为许多标准化工作的主要部分。对于应用软件开发，中间件远比操作系统和网络服务更为重要，中间件提供的程序接口定义了一个相对稳定的高层应用环境，不管底层的计算机硬件和系统软件怎样更新换代，只要将中间件升级更新，并保持中间件对外的接口定义不变，应用软件几乎不需任何修改，从而保护了企业在应用软件开发和维护中的重大投资。</p>\n<p>简单说：中间件有个很大的特点，是脱离于具体设计目标，而具备提供普遍独立功能需求的模块。这使得中间件一定是可替换的。如果一个系统设计中，中间件时不可替代的，不是架构、框架设计有问题，那么就是这个中间件，在别处可能是个中间件，在这个系统内是引擎。</p>\n<hr>\n<h2 id=\"常见中间件\"><a href=\"#常见中间件\" class=\"headerlink\" title=\"常见中间件\"></a>常见中间件</h2><p><img src=\"https://niubilityoyr.github.io/images/MQ/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6.png\" alt=\"常见中间件\"></p>\n<hr>\n<h2 id=\"学习中间件的方式和技巧\"><a href=\"#学习中间件的方式和技巧\" class=\"headerlink\" title=\"学习中间件的方式和技巧\"></a>学习中间件的方式和技巧</h2><p>1）理解中间件在项目架构中的作用，以及各中间件的底层实现<br>2）可以使用一些类比的生活概念去理解中间件<br>3）使用一些流程图或者脑图的方式去梳理各个中间件在架构中的作用<br>4）尝试用 java技术去实现中间件的原理<br>5）静下来去思考中间件在项目中设计的和使用的原因<br>6）如果找到对应的代替总结方案<br>7）尝试编写博文总结类同中间件技术的对比和使用场景<br>8）学会查看中间件的源码以及开源项目和博文</p>\n<hr>\n<h1 id=\"什么是消息中间件\"><a href=\"#什么是消息中间件\" class=\"headerlink\" title=\"什么是消息中间件\"></a>什么是消息中间件</h1><h2 id=\"什么是消息中间件-1\"><a href=\"#什么是消息中间件-1\" class=\"headerlink\" title=\"什么是消息中间件\"></a>什么是消息中间件</h2><p>消息中间件：<br>是利用高效可靠的消息传递机制进行异步的数据传输，并基于数据通信进行分布式系统的集成。通过提供消息队列模型和消息传递机制，可以在分布式环境下扩展进程间的通信。</p>\n<hr>\n<h2 id=\"为什么需要使用消息中间件\"><a href=\"#为什么需要使用消息中间件\" class=\"headerlink\" title=\"为什么需要使用消息中间件\"></a>为什么需要使用消息中间件</h2><p>具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。</p>\n<hr>\n<h2 id=\"消息中间件功能与组成\"><a href=\"#消息中间件功能与组成\" class=\"headerlink\" title=\"消息中间件功能与组成\"></a>消息中间件功能与组成</h2><h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>消息中间件：<br>是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务。</p>\n<p>MQ消息队列：负责数据的接受，存储和传递，所以性能要高于普通服务和技术。<br><img src=\"https://niubilityoyr.github.io/images/MQ/mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9B%BE%E8%A7%A31.png\" alt=\"常见中间件\"></p>\n<p>谁来生产消息，存储消息和消费消息呢？<br>生产者生产消息，MQ存储消息，消费者消费消息<br><img src=\"https://niubilityoyr.github.io/images/MQ/mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9B%BE%E8%A7%A32.png\" alt=\"常见中间件\"></p>\n<h3 id=\"核心组成部分\"><a href=\"#核心组成部分\" class=\"headerlink\" title=\"核心组成部分\"></a>核心组成部分</h3><p>消息中间件的核心组成部分：<br>消息的协议<br>消息的持久化机制<br>消息的分发策略<br>消息的高可用<br>高可靠消息的容错机制</p>\n<h2 id=\"消息中间件应用场景\"><a href=\"#消息中间件应用场景\" class=\"headerlink\" title=\"消息中间件应用场景\"></a>消息中间件应用场景</h2><p>参考：<a href=\"https://www.jianshu.com/p/3fed7e963a2d\">https://www.jianshu.com/p/3fed7e963a2d</a></p>\n<hr>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>异步通信：（异步处理）<br>当有些业务不想也不需要立即处理，消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</p>\n<p>案例讲解：<br>假设有一个系统调用链路为A调用B耗时20ms，B调用C耗时20ms，而C调用D需要2s，这样下来整个调用需要耗时2040ms。但实际上A调用B，B调用C只需要40ms，而D系统的引入直接导致系统性能下降约50倍。此时我们应该考虑将D系统的调用抽离出来，做一个异步调用。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C.png\" alt=\"常见中间件\"></p>\n<p>生活中有一个很形象的例子。我们点一杯奶茶，下单、付款、通知商家制作都很快，然而到匹配外卖小哥配送这个过程很慢。作为用户来说，匹配外卖小哥这个过程延迟一些时间是可以接受的，只要我能快速下单成功，并且在一定时间范围内安排快递小哥送货即可。</p>\n<p>按照上面的思路，系统A到系统B再到系统C就直接结束了，然后系统C再将消息发送到消息中间件中，系统D从消息中间件里取消息进行消费，这样子我们系统的性能就提高了接近50倍。<br>过程如下图所示：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C.png\" alt=\"常见中间件\"></p>\n<h3 id=\"系统解耦\"><a href=\"#系统解耦\" class=\"headerlink\" title=\"系统解耦\"></a>系统解耦</h3><p>系统解耦：降低系统之间的耦合度。</p>\n<p>案例讲解：<br>首先假设有一个核心系统A，其能产生核心数据供下游服务（系统B和系统C）使用。此时最易想到的办法就是A直接把数据发送给B和C，流程如下：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%B3%BB%E7%BB%9F%E8%80%A6%E5%90%88.png\" alt=\"常见中间件\"></p>\n<p>那么问题来了，此时假设又有D、E、F、G等多个系统也需要使用核心数据，此时流程图如下：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%B3%BB%E7%BB%9F%E8%80%A6%E5%90%882.png\" alt=\"常见中间件\"></p>\n<p>我们可以想象一下，假设有上百个系统都需要系统A的核心数据，此时负责系统A的工程师将是崩溃的，一旦有系统加入，A系统就需要修改代码，将数据发送到新加入的系统。反之，如果有系统不再需要A发送数据，那么A系统又得修改代码不再向其发送数据。这样的架构设计耦合度太高了，我们就可以引入消息中间件来实现系统之间的解耦。即核心系统A生产核心数据，然后将核心数据发送到消息中间件，下游消费系统根据自身需求从中间件里获取消息进行消费，当不再需要数据时就不取消息进即可，这样系统之间耦合度就大大降低了。具体流程图如下：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%B3%BB%E7%BB%9F%E8%A7%A3%E8%80%A6.png\" alt=\"常见中间件\"></p>\n<h3 id=\"流量削峰\"><a href=\"#流量削峰\" class=\"headerlink\" title=\"流量削峰\"></a>流量削峰</h3><p>流量消峰：<br>针对某一时间段的大量用户访问产生的大量流量，进行延缓，层层过滤，遵从 “最后落地到数据库的请求数要尽量少”的原则.</p>\n<p>案例讲解：<br>假设有一个系统，正常时间也就每秒几百个请求，部署在一个8核16G的机器上，运行起来轻松加愉快。然而突然由于搞一个活动，高峰期请求数达到了几千，出现了瞬时流量高峰，此时最易想到的是加机器，部署个10台机器，也能扛住此时的高并发。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B01.png\" alt=\"常见中间件\"></p>\n<p>那么问题来了，瞬时流量每天也就那么几十分钟，过后就是正常的每秒几百请求，我们如果部署10台机器，那么平均下来没台机器的请求数也就每秒几十次，这样是不是有点太浪费资源了呢？大部分时候，每秒几百请求，一台机器就能够扛住了，但是为了抗那每天瞬时的高峰，硬是部署了10台机器，每天就那几十分钟有用，别的时候都是浪费资源的。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B02.png\" alt=\"常见中间件\"></p>\n<p>但是如果仅仅部署一台机器，瞬间高峰就会击垮系统，因为单台机器是不能扛住每秒几千次请求的。这时我们就可以考虑引入消息中间件，进行流量削峰。我们可以部署一层消息队列在机器前面，平时正常的每秒几百次请求，机器就正常的消费消息即可，一旦流量高峰到达时，大量消息会堆积在消息队列里面，机器只需要按照自己的最大负荷从消息队列里面消费，等流量高峰过了，慢慢地队列里面的消息也消费完毕了。此时达到了一个削峰填谷的作用。具体如图所示：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B03.png\" alt=\"常见中间件\"></p>\n<h2 id=\"常见的消息中间件\"><a href=\"#常见的消息中间件\" class=\"headerlink\" title=\"常见的消息中间件\"></a>常见的消息中间件</h2><p>ActiveMQ，RabbitMQ，Kafka，RocketMQ</p>\n<hr>\n<h1 id=\"消息队列协议\"><a href=\"#消息队列协议\" class=\"headerlink\" title=\"消息队列协议\"></a>消息队列协议</h1><h2 id=\"什么是协议\"><a href=\"#什么是协议\" class=\"headerlink\" title=\"什么是协议\"></a>什么是协议</h2><p><img src=\"https://niubilityoyr.github.io/images/MQ/mq%E5%8D%8F%E8%AE%AE.png\" alt=\"常见中间件\"></p>\n<p>所谓协议是指：<br>1）计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流<br>2）和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较的高<br>3）协议对数据格式和计算机之间交换数据都必须严格遵守规范</p>\n<hr>\n<h2 id=\"网络协议的三要素\"><a href=\"#网络协议的三要素\" class=\"headerlink\" title=\"网络协议的三要素\"></a>网络协议的三要素</h2><p>1）语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序<br>2）语义：语义是解释控制信息每个部分的意义，它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应<br>3）时序：时序是对事件发生顺序的详细说明</p>\n<p>比如我 MQ发送一个信息，是以什么数据格式发送到队列中，然后每个部分的含义是什么，发送完毕以后的执行的动作，以及消费者消费消息的动作，消费完毕的相应结构和反馈是什么，然后按照对应的执行顺序进行处理。如果你还是不理解：大家每天都在接触的http请求协议：<br>1）语法：http规定了请求报文和响应报文的格式<br>2）语义：客户端主动发起请求称之为请求（这是一种定义，同时你发起的是 post/get请求）<br>3）时序：一个请求对应一个响应（一定先有请求在有响应，这个是时序）</p>\n<hr>\n<h2 id=\"常见的消息中间件协议\"><a href=\"#常见的消息中间件协议\" class=\"headerlink\" title=\"常见的消息中间件协议\"></a>常见的消息中间件协议</h2><p>消息中间件采用的不是 http协议。<br>常见的消息中间件协议有：JSM、AMQP、Kafka，OpenMessage，OpenWire，MQTT协议</p>\n<hr>\n<h3 id=\"JMS协议\"><a href=\"#JMS协议\" class=\"headerlink\" title=\"JMS协议\"></a>JMS协议</h3><p>JMS：（全称：Java Message Service）Java消息服务，应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。这是java定义的api，是不可跨语言，是不可跨平台的。</p>\n<p>特性：<br>1）可靠的消息处理<br>2）消息的持久化支持<br>3）跨平台跨语言支持差</p>\n<p>支持MQ：ActiveMQ</p>\n<h3 id=\"AMQP协议\"><a href=\"#AMQP协议\" class=\"headerlink\" title=\"AMQP协议\"></a>AMQP协议</h3><p>AMQP：（全称：Advanced Message Queuing Protocol）是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。</p>\n<p>特性：<br>1）分布式事务支持<br>2）消息的持久化支持<br>3）高性能和高可靠的消息处理优势</p>\n<p>支持MQ：RabbitMQ</p>\n<h3 id=\"MQTT协议\"><a href=\"#MQTT协议\" class=\"headerlink\" title=\"MQTT协议\"></a>MQTT协议</h3><p>MQTT：（Message Queueing Telemetry Transport）消息队列是 IBM开放的及时通讯协议，物联网系统架构中的重要组成部分。</p>\n<p>特点：<br>1）轻量<br>2）结构简单<br>3）传输快，不支持事务<br>4）没有持久化设计</p>\n<p>支持MQ：RabbitMQ</p>\n<h3 id=\"Kafka协议\"><a href=\"#Kafka协议\" class=\"headerlink\" title=\"Kafka协议\"></a>Kafka协议</h3><p>Kafka协议：是基于TCP/IP的二进制协议。消息内部是 通过长度来分割，由一些基本数据类型组成。</p>\n<p>特点：<br>1）结构简单<br>2）解析速度快<br>3）无事务支持<br>4）有持久化设计</p>\n<p>代表MQ：Kafka</p>\n<h3 id=\"OpenMessage协议\"><a href=\"#OpenMessage协议\" class=\"headerlink\" title=\"OpenMessage协议\"></a>OpenMessage协议</h3><p>OpenMessage协议：是近几年由阿里、雅虎和滴滴出行、Stremalio等公司共同参与创立的分布式信息中间件、流处理等领域的应用开发标准。</p>\n<p>特点：<br>1）结构简单<br>2）解析速度快<br>3）支持事务和持久化设计</p>\n<p>支持MQ：RocketMQ</p>\n<h2 id=\"为什么消息中间件不使用-http协议\"><a href=\"#为什么消息中间件不使用-http协议\" class=\"headerlink\" title=\"为什么消息中间件不使用 http协议\"></a>为什么消息中间件不使用 http协议</h2><p>为什么消息中间件不使用 http协议？<br>1）因为 http请求报文头和响应报文头是比较复杂的，包含了Cookie，数据的加密解密，窗台吗，响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速<br>2）大部分情况下 http大部分都是短链接，在实际的交互过程中，一个请求到响应都很有可能会中断，中断以后就不会执行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取信息的过程，出现问题和故障要对数据或消息执行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。</p>\n<hr>\n<h1 id=\"消息队列持久化\"><a href=\"#消息队列持久化\" class=\"headerlink\" title=\"消息队列持久化\"></a>消息队列持久化</h1><h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>简单来说就是将数据存入磁盘，而不是存在内存中随服务器重启断开而消失，使数据能够永久保存。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96.png\" alt=\"消息持久化图片\"></p>\n<hr>\n<h2 id=\"常见MQ的持久化方式\"><a href=\"#常见MQ的持久化方式\" class=\"headerlink\" title=\"常见MQ的持久化方式\"></a>常见MQ的持久化方式</h2><p>ActiveMQ：支持文件存储，支持数据库</p>\n<p>RabbitMQ &amp; Kafka &amp; RocketMQ：支持文件存储</p>\n<hr>\n<h1 id=\"消息的分发策略\"><a href=\"#消息的分发策略\" class=\"headerlink\" title=\"消息的分发策略\"></a>消息的分发策略</h1><h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>场景分析一：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%911.png\" alt=\"消息分发1\"><br>比如我在 APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被哪个系统或者哪些服务器或者系统进行消费，那这个时候就需要一个分发的策略。这就需要消费策略。或者称之为消费的方法论。</p>\n<p>场景分析二：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%912.png\" alt=\"消息分发2\"><br>在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费 MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发消息策略的机制。</p>\n<h2 id=\"消息的分发策略-1\"><a href=\"#消息的分发策略-1\" class=\"headerlink\" title=\"消息的分发策略\"></a>消息的分发策略</h2><p>MQ消息队列有如下几个角色<br>1）生产者<br>2）存储消息<br>3）消费者</p>\n<p>那么生产者生成消息以后，MQ进行存储，消费者是如何获取消息的呢？一般获取数据的方式无外乎推（push）或者拉（pull）两种方式，典型的 git就有推拉机制，我们发送的 http请求就是一种典型的拉取数据库数据返回的过程。而消息队列 MQ是一种推送的过程，而这些推机制会使用到很多的业务场景也有很多对应推机制策略。</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%91%E7%AD%96%E7%95%A5.png\" alt=\"消息分发策略\">  </p>\n<hr>\n<h1 id=\"消息队列高可用和高可靠\"><a href=\"#消息队列高可用和高可靠\" class=\"headerlink\" title=\"消息队列高可用和高可靠\"></a>消息队列高可用和高可靠</h1><h2 id=\"什么是高可用机制\"><a href=\"#什么是高可用机制\" class=\"headerlink\" title=\"什么是高可用机制\"></a>什么是高可用机制</h2><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力<br>当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU，内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的。</p>\n<h3 id=\"集群模式一\"><a href=\"#集群模式一\" class=\"headerlink\" title=\"集群模式一\"></a>集群模式一</h3><p>Master-slave主从同步部署方式<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B8%80.png\" alt=\"集群模式1\"><br>解释：这种模式写入消息同样在 Master主节点上，但是主节点会同步数据到 slave节点形成副本，和 zookeeper或者 redis主从机制很雷同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点进行消费，消息的拷贝和同步会占用很大的带宽和网络资源。</p>\n<h3 id=\"集群模式二\"><a href=\"#集群模式二\" class=\"headerlink\" title=\"集群模式二\"></a>集群模式二</h3><p>Master-slave与 Broker-cluster组合的方案<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%BA%8C.png\" alt=\"集群模式1\"><br>解释：如果你插入的数据是 broker-1中国，元数据信息会存储数据的相关描述和记录存放的位置（队列）。它会对描述信息也就是元数据信息进行同步，如果消费者在 broker-2中进行消费，发现自己节点没有对应的信息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他回去联系其他的黄牛询问，如果有就返回。</p>\n<p><strong>注意：实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。</strong></p>\n<h2 id=\"什么是高可靠机制\"><a href=\"#什么是高可靠机制\" class=\"headerlink\" title=\"什么是高可靠机制\"></a>什么是高可靠机制</h2><p>所谓高可靠是指：<br>系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠。</p>\n<p>如何保证中间件消息的可靠性呢，可以从两个方面考虑：<br>1）消息的传输：通过协议来保证系统间数据解析的正确性<br>2）消息的存储区可靠：通过持久化来保证消息的可靠性</p>\n<p>注意：在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是中间件\"><a href=\"#什么是中间件\" class=\"headerlink\" title=\"什么是中间件\"></a>什么是中间件</h1><h2 id=\"什么是中间件-1\"><a href=\"#什么是中间件-1\" class=\"headerlink\" title=\"什么是中间件\"></a>什么是中间件</h2><p>我国企业从20世纪80年代开始就逐渐进行信息化建设，由于方法和体系的不成熟，以及企业业务的市场需求的不断变化，一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。</p>\n<p>中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件+平台+通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和使用软件区分开来</p>\n<hr>","more":"<h2 id=\"中间件特点\"><a href=\"#中间件特点\" class=\"headerlink\" title=\"中间件特点\"></a>中间件特点</h2><p>为解决分布异构问题，人们提出了中间件（middleware)的概念。中间件是位于平台（硬件和操作系统）和应用之间的通用服务，如下图所示，这些服务具有标准的程序接口和协议。针对不同的操作系统和硬件平台，它们可以有符合接口的协议规范的多种实现。</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MQ/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%89%B9%E7%82%B9.png\" alt=\"中间件特点\"></p>\n<p>也很难给中间件一个严格的定义，但中间件应具有如下的一些特点：<br>（1）满足大量应用的需要<br>（2）运行于多种硬件和 OS平台<br>（3）支持分布计算，提供跨网络、硬件和 OS平台的透明性的应用或服务的交互<br>（4）支持标准的协议<br>（5）支持标准的接口</p>\n<p>由于标准接口对于可移植性和标准协议对于互操作性的重要性，中间件已成为许多标准化工作的主要部分。对于应用软件开发，中间件远比操作系统和网络服务更为重要，中间件提供的程序接口定义了一个相对稳定的高层应用环境，不管底层的计算机硬件和系统软件怎样更新换代，只要将中间件升级更新，并保持中间件对外的接口定义不变，应用软件几乎不需任何修改，从而保护了企业在应用软件开发和维护中的重大投资。</p>\n<p>简单说：中间件有个很大的特点，是脱离于具体设计目标，而具备提供普遍独立功能需求的模块。这使得中间件一定是可替换的。如果一个系统设计中，中间件时不可替代的，不是架构、框架设计有问题，那么就是这个中间件，在别处可能是个中间件，在这个系统内是引擎。</p>\n<hr>\n<h2 id=\"常见中间件\"><a href=\"#常见中间件\" class=\"headerlink\" title=\"常见中间件\"></a>常见中间件</h2><p><img src=\"https://niubilityoyr.github.io/images/MQ/%E5%B8%B8%E8%A7%81%E4%B8%AD%E9%97%B4%E4%BB%B6.png\" alt=\"常见中间件\"></p>\n<hr>\n<h2 id=\"学习中间件的方式和技巧\"><a href=\"#学习中间件的方式和技巧\" class=\"headerlink\" title=\"学习中间件的方式和技巧\"></a>学习中间件的方式和技巧</h2><p>1）理解中间件在项目架构中的作用，以及各中间件的底层实现<br>2）可以使用一些类比的生活概念去理解中间件<br>3）使用一些流程图或者脑图的方式去梳理各个中间件在架构中的作用<br>4）尝试用 java技术去实现中间件的原理<br>5）静下来去思考中间件在项目中设计的和使用的原因<br>6）如果找到对应的代替总结方案<br>7）尝试编写博文总结类同中间件技术的对比和使用场景<br>8）学会查看中间件的源码以及开源项目和博文</p>\n<hr>\n<h1 id=\"什么是消息中间件\"><a href=\"#什么是消息中间件\" class=\"headerlink\" title=\"什么是消息中间件\"></a>什么是消息中间件</h1><h2 id=\"什么是消息中间件-1\"><a href=\"#什么是消息中间件-1\" class=\"headerlink\" title=\"什么是消息中间件\"></a>什么是消息中间件</h2><p>消息中间件：<br>是利用高效可靠的消息传递机制进行异步的数据传输，并基于数据通信进行分布式系统的集成。通过提供消息队列模型和消息传递机制，可以在分布式环境下扩展进程间的通信。</p>\n<hr>\n<h2 id=\"为什么需要使用消息中间件\"><a href=\"#为什么需要使用消息中间件\" class=\"headerlink\" title=\"为什么需要使用消息中间件\"></a>为什么需要使用消息中间件</h2><p>具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。</p>\n<hr>\n<h2 id=\"消息中间件功能与组成\"><a href=\"#消息中间件功能与组成\" class=\"headerlink\" title=\"消息中间件功能与组成\"></a>消息中间件功能与组成</h2><h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>消息中间件：<br>是一种接受数据、接受请求、存储数据、发送数据等功能的技术服务。</p>\n<p>MQ消息队列：负责数据的接受，存储和传递，所以性能要高于普通服务和技术。<br><img src=\"https://niubilityoyr.github.io/images/MQ/mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9B%BE%E8%A7%A31.png\" alt=\"常见中间件\"></p>\n<p>谁来生产消息，存储消息和消费消息呢？<br>生产者生产消息，MQ存储消息，消费者消费消息<br><img src=\"https://niubilityoyr.github.io/images/MQ/mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9B%BE%E8%A7%A32.png\" alt=\"常见中间件\"></p>\n<h3 id=\"核心组成部分\"><a href=\"#核心组成部分\" class=\"headerlink\" title=\"核心组成部分\"></a>核心组成部分</h3><p>消息中间件的核心组成部分：<br>消息的协议<br>消息的持久化机制<br>消息的分发策略<br>消息的高可用<br>高可靠消息的容错机制</p>\n<h2 id=\"消息中间件应用场景\"><a href=\"#消息中间件应用场景\" class=\"headerlink\" title=\"消息中间件应用场景\"></a>消息中间件应用场景</h2><p>参考：<a href=\"https://www.jianshu.com/p/3fed7e963a2d\">https://www.jianshu.com/p/3fed7e963a2d</a></p>\n<hr>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>异步通信：（异步处理）<br>当有些业务不想也不需要立即处理，消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</p>\n<p>案例讲解：<br>假设有一个系统调用链路为A调用B耗时20ms，B调用C耗时20ms，而C调用D需要2s，这样下来整个调用需要耗时2040ms。但实际上A调用B，B调用C只需要40ms，而D系统的引入直接导致系统性能下降约50倍。此时我们应该考虑将D系统的调用抽离出来，做一个异步调用。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C.png\" alt=\"常见中间件\"></p>\n<p>生活中有一个很形象的例子。我们点一杯奶茶，下单、付款、通知商家制作都很快，然而到匹配外卖小哥配送这个过程很慢。作为用户来说，匹配外卖小哥这个过程延迟一些时间是可以接受的，只要我能快速下单成功，并且在一定时间范围内安排快递小哥送货即可。</p>\n<p>按照上面的思路，系统A到系统B再到系统C就直接结束了，然后系统C再将消息发送到消息中间件中，系统D从消息中间件里取消息进行消费，这样子我们系统的性能就提高了接近50倍。<br>过程如下图所示：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C.png\" alt=\"常见中间件\"></p>\n<h3 id=\"系统解耦\"><a href=\"#系统解耦\" class=\"headerlink\" title=\"系统解耦\"></a>系统解耦</h3><p>系统解耦：降低系统之间的耦合度。</p>\n<p>案例讲解：<br>首先假设有一个核心系统A，其能产生核心数据供下游服务（系统B和系统C）使用。此时最易想到的办法就是A直接把数据发送给B和C，流程如下：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%B3%BB%E7%BB%9F%E8%80%A6%E5%90%88.png\" alt=\"常见中间件\"></p>\n<p>那么问题来了，此时假设又有D、E、F、G等多个系统也需要使用核心数据，此时流程图如下：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%B3%BB%E7%BB%9F%E8%80%A6%E5%90%882.png\" alt=\"常见中间件\"></p>\n<p>我们可以想象一下，假设有上百个系统都需要系统A的核心数据，此时负责系统A的工程师将是崩溃的，一旦有系统加入，A系统就需要修改代码，将数据发送到新加入的系统。反之，如果有系统不再需要A发送数据，那么A系统又得修改代码不再向其发送数据。这样的架构设计耦合度太高了，我们就可以引入消息中间件来实现系统之间的解耦。即核心系统A生产核心数据，然后将核心数据发送到消息中间件，下游消费系统根据自身需求从中间件里获取消息进行消费，当不再需要数据时就不取消息进即可，这样系统之间耦合度就大大降低了。具体流程图如下：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E7%B3%BB%E7%BB%9F%E8%A7%A3%E8%80%A6.png\" alt=\"常见中间件\"></p>\n<h3 id=\"流量削峰\"><a href=\"#流量削峰\" class=\"headerlink\" title=\"流量削峰\"></a>流量削峰</h3><p>流量消峰：<br>针对某一时间段的大量用户访问产生的大量流量，进行延缓，层层过滤，遵从 “最后落地到数据库的请求数要尽量少”的原则.</p>\n<p>案例讲解：<br>假设有一个系统，正常时间也就每秒几百个请求，部署在一个8核16G的机器上，运行起来轻松加愉快。然而突然由于搞一个活动，高峰期请求数达到了几千，出现了瞬时流量高峰，此时最易想到的是加机器，部署个10台机器，也能扛住此时的高并发。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B01.png\" alt=\"常见中间件\"></p>\n<p>那么问题来了，瞬时流量每天也就那么几十分钟，过后就是正常的每秒几百请求，我们如果部署10台机器，那么平均下来没台机器的请求数也就每秒几十次，这样是不是有点太浪费资源了呢？大部分时候，每秒几百请求，一台机器就能够扛住了，但是为了抗那每天瞬时的高峰，硬是部署了10台机器，每天就那几十分钟有用，别的时候都是浪费资源的。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B02.png\" alt=\"常见中间件\"></p>\n<p>但是如果仅仅部署一台机器，瞬间高峰就会击垮系统，因为单台机器是不能扛住每秒几千次请求的。这时我们就可以考虑引入消息中间件，进行流量削峰。我们可以部署一层消息队列在机器前面，平时正常的每秒几百次请求，机器就正常的消费消息即可，一旦流量高峰到达时，大量消息会堆积在消息队列里面，机器只需要按照自己的最大负荷从消息队列里面消费，等流量高峰过了，慢慢地队列里面的消息也消费完毕了。此时达到了一个削峰填谷的作用。具体如图所示：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B03.png\" alt=\"常见中间件\"></p>\n<h2 id=\"常见的消息中间件\"><a href=\"#常见的消息中间件\" class=\"headerlink\" title=\"常见的消息中间件\"></a>常见的消息中间件</h2><p>ActiveMQ，RabbitMQ，Kafka，RocketMQ</p>\n<hr>\n<h1 id=\"消息队列协议\"><a href=\"#消息队列协议\" class=\"headerlink\" title=\"消息队列协议\"></a>消息队列协议</h1><h2 id=\"什么是协议\"><a href=\"#什么是协议\" class=\"headerlink\" title=\"什么是协议\"></a>什么是协议</h2><p><img src=\"https://niubilityoyr.github.io/images/MQ/mq%E5%8D%8F%E8%AE%AE.png\" alt=\"常见中间件\"></p>\n<p>所谓协议是指：<br>1）计算机底层操作系统和应用程序通讯时共同遵守的一组约定，只有遵循共同的约定和规范，系统和底层操作系统之间才能相互交流<br>2）和一般的网络应用程序的不同它主要负责数据的接受和传递，所以性能比较的高<br>3）协议对数据格式和计算机之间交换数据都必须严格遵守规范</p>\n<hr>\n<h2 id=\"网络协议的三要素\"><a href=\"#网络协议的三要素\" class=\"headerlink\" title=\"网络协议的三要素\"></a>网络协议的三要素</h2><p>1）语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序<br>2）语义：语义是解释控制信息每个部分的意义，它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应<br>3）时序：时序是对事件发生顺序的详细说明</p>\n<p>比如我 MQ发送一个信息，是以什么数据格式发送到队列中，然后每个部分的含义是什么，发送完毕以后的执行的动作，以及消费者消费消息的动作，消费完毕的相应结构和反馈是什么，然后按照对应的执行顺序进行处理。如果你还是不理解：大家每天都在接触的http请求协议：<br>1）语法：http规定了请求报文和响应报文的格式<br>2）语义：客户端主动发起请求称之为请求（这是一种定义，同时你发起的是 post/get请求）<br>3）时序：一个请求对应一个响应（一定先有请求在有响应，这个是时序）</p>\n<hr>\n<h2 id=\"常见的消息中间件协议\"><a href=\"#常见的消息中间件协议\" class=\"headerlink\" title=\"常见的消息中间件协议\"></a>常见的消息中间件协议</h2><p>消息中间件采用的不是 http协议。<br>常见的消息中间件协议有：JSM、AMQP、Kafka，OpenMessage，OpenWire，MQTT协议</p>\n<hr>\n<h3 id=\"JMS协议\"><a href=\"#JMS协议\" class=\"headerlink\" title=\"JMS协议\"></a>JMS协议</h3><p>JMS：（全称：Java Message Service）Java消息服务，应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。这是java定义的api，是不可跨语言，是不可跨平台的。</p>\n<p>特性：<br>1）可靠的消息处理<br>2）消息的持久化支持<br>3）跨平台跨语言支持差</p>\n<p>支持MQ：ActiveMQ</p>\n<h3 id=\"AMQP协议\"><a href=\"#AMQP协议\" class=\"headerlink\" title=\"AMQP协议\"></a>AMQP协议</h3><p>AMQP：（全称：Advanced Message Queuing Protocol）是高级消息队列协议。由摩根大通集团联合其他公司共同设计。是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。</p>\n<p>特性：<br>1）分布式事务支持<br>2）消息的持久化支持<br>3）高性能和高可靠的消息处理优势</p>\n<p>支持MQ：RabbitMQ</p>\n<h3 id=\"MQTT协议\"><a href=\"#MQTT协议\" class=\"headerlink\" title=\"MQTT协议\"></a>MQTT协议</h3><p>MQTT：（Message Queueing Telemetry Transport）消息队列是 IBM开放的及时通讯协议，物联网系统架构中的重要组成部分。</p>\n<p>特点：<br>1）轻量<br>2）结构简单<br>3）传输快，不支持事务<br>4）没有持久化设计</p>\n<p>支持MQ：RabbitMQ</p>\n<h3 id=\"Kafka协议\"><a href=\"#Kafka协议\" class=\"headerlink\" title=\"Kafka协议\"></a>Kafka协议</h3><p>Kafka协议：是基于TCP/IP的二进制协议。消息内部是 通过长度来分割，由一些基本数据类型组成。</p>\n<p>特点：<br>1）结构简单<br>2）解析速度快<br>3）无事务支持<br>4）有持久化设计</p>\n<p>代表MQ：Kafka</p>\n<h3 id=\"OpenMessage协议\"><a href=\"#OpenMessage协议\" class=\"headerlink\" title=\"OpenMessage协议\"></a>OpenMessage协议</h3><p>OpenMessage协议：是近几年由阿里、雅虎和滴滴出行、Stremalio等公司共同参与创立的分布式信息中间件、流处理等领域的应用开发标准。</p>\n<p>特点：<br>1）结构简单<br>2）解析速度快<br>3）支持事务和持久化设计</p>\n<p>支持MQ：RocketMQ</p>\n<h2 id=\"为什么消息中间件不使用-http协议\"><a href=\"#为什么消息中间件不使用-http协议\" class=\"headerlink\" title=\"为什么消息中间件不使用 http协议\"></a>为什么消息中间件不使用 http协议</h2><p>为什么消息中间件不使用 http协议？<br>1）因为 http请求报文头和响应报文头是比较复杂的，包含了Cookie，数据的加密解密，窗台吗，响应码等附加的功能，但是对于一个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就行，一定要追求的是高性能。尽量简洁，快速<br>2）大部分情况下 http大部分都是短链接，在实际的交互过程中，一个请求到响应都很有可能会中断，中断以后就不会执行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取信息的过程，出现问题和故障要对数据或消息执行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。</p>\n<hr>\n<h1 id=\"消息队列持久化\"><a href=\"#消息队列持久化\" class=\"headerlink\" title=\"消息队列持久化\"></a>消息队列持久化</h1><h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>简单来说就是将数据存入磁盘，而不是存在内存中随服务器重启断开而消失，使数据能够永久保存。<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E6%8C%81%E4%B9%85%E5%8C%96.png\" alt=\"消息持久化图片\"></p>\n<hr>\n<h2 id=\"常见MQ的持久化方式\"><a href=\"#常见MQ的持久化方式\" class=\"headerlink\" title=\"常见MQ的持久化方式\"></a>常见MQ的持久化方式</h2><p>ActiveMQ：支持文件存储，支持数据库</p>\n<p>RabbitMQ &amp; Kafka &amp; RocketMQ：支持文件存储</p>\n<hr>\n<h1 id=\"消息的分发策略\"><a href=\"#消息的分发策略\" class=\"headerlink\" title=\"消息的分发策略\"></a>消息的分发策略</h1><h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>场景分析一：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%911.png\" alt=\"消息分发1\"><br>比如我在 APP上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被哪个系统或者哪些服务器或者系统进行消费，那这个时候就需要一个分发的策略。这就需要消费策略。或者称之为消费的方法论。</p>\n<p>场景分析二：<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%912.png\" alt=\"消息分发2\"><br>在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费 MQ接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发消息策略的机制。</p>\n<h2 id=\"消息的分发策略-1\"><a href=\"#消息的分发策略-1\" class=\"headerlink\" title=\"消息的分发策略\"></a>消息的分发策略</h2><p>MQ消息队列有如下几个角色<br>1）生产者<br>2）存储消息<br>3）消费者</p>\n<p>那么生产者生成消息以后，MQ进行存储，消费者是如何获取消息的呢？一般获取数据的方式无外乎推（push）或者拉（pull）两种方式，典型的 git就有推拉机制，我们发送的 http请求就是一种典型的拉取数据库数据返回的过程。而消息队列 MQ是一种推送的过程，而这些推机制会使用到很多的业务场景也有很多对应推机制策略。</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MQ/%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%91%E7%AD%96%E7%95%A5.png\" alt=\"消息分发策略\">  </p>\n<hr>\n<h1 id=\"消息队列高可用和高可靠\"><a href=\"#消息队列高可用和高可靠\" class=\"headerlink\" title=\"消息队列高可用和高可靠\"></a>消息队列高可用和高可靠</h1><h2 id=\"什么是高可用机制\"><a href=\"#什么是高可用机制\" class=\"headerlink\" title=\"什么是高可用机制\"></a>什么是高可用机制</h2><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力<br>当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU，内存，磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的。</p>\n<h3 id=\"集群模式一\"><a href=\"#集群模式一\" class=\"headerlink\" title=\"集群模式一\"></a>集群模式一</h3><p>Master-slave主从同步部署方式<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B8%80.png\" alt=\"集群模式1\"><br>解释：这种模式写入消息同样在 Master主节点上，但是主节点会同步数据到 slave节点形成副本，和 zookeeper或者 redis主从机制很雷同。这样可以达到负载均衡的效果，如果消费者有多个这样就可以去不同的节点进行消费，消息的拷贝和同步会占用很大的带宽和网络资源。</p>\n<h3 id=\"集群模式二\"><a href=\"#集群模式二\" class=\"headerlink\" title=\"集群模式二\"></a>集群模式二</h3><p>Master-slave与 Broker-cluster组合的方案<br><img src=\"https://niubilityoyr.github.io/images/MQ/%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%BA%8C.png\" alt=\"集群模式1\"><br>解释：如果你插入的数据是 broker-1中国，元数据信息会存储数据的相关描述和记录存放的位置（队列）。它会对描述信息也就是元数据信息进行同步，如果消费者在 broker-2中进行消费，发现自己节点没有对应的信息，可以从对应的元数据信息中去查询，然后返回对应的消息信息，场景：比如买火车票或者黄牛买演唱会门票，比如第一个黄牛有顾客说要买的演唱会门票，但是没有但是他回去联系其他的黄牛询问，如果有就返回。</p>\n<p><strong>注意：实现多主多从的热备机制来完成消息的高可用以及数据的热备机制，在生产规模达到一定的阶段的时候，这种使用的频率比较高。</strong></p>\n<h2 id=\"什么是高可靠机制\"><a href=\"#什么是高可靠机制\" class=\"headerlink\" title=\"什么是高可靠机制\"></a>什么是高可靠机制</h2><p>所谓高可靠是指：<br>系统可以无故障低持续运行，比如一个系统突然崩溃，报错，异常等等并不影响线上业务的正常运行，出错的几率极低，就称之为：高可靠。</p>\n<p>如何保证中间件消息的可靠性呢，可以从两个方面考虑：<br>1）消息的传输：通过协议来保证系统间数据解析的正确性<br>2）消息的存储区可靠：通过持久化来保证消息的可靠性</p>\n<p>注意：在高并发的业务场景中，如果不能保证系统的高可靠，那造成的隐患和损失是非常严重的。</p>"},{"title":"MySQL日志系统","date":"2021-06-21T16:00:05.000Z","author":"神奇的荣荣","summary":"","_content":"\n注意：当前设置系统参数方式，mysql重启即失效，如果要永久存在则需要修改配置文件。\n\n# error log（错误日志）\n\n## 定义\n\nerror log 是 MySQL 的错误日志。  \n主要记录 MySQL 服务实例每次启动，停止的详细信息，以及 MySQL 实例运行过程中产生的警告或者错误信息。  \n和其他的日志不同，MySQL的error日志必须开启，无法关闭。\n\n**注意：默认情况下，错误日志的文件名为：主机名.err。 但 error 日志并不会记录所有的错误信息，只有MySQL服务实例运行过程中发声的关键错误（critical）才会被记录下来。**\n\n***\n\n<!-- more -->\n\n## 设置错误日志\n\n查看当前的错误日志文件  \n没有设置错误日志文件，默认指定了一个的错误日志文件\n```\nmysql> show variables like 'log_error';\n+---------------+----------------------+\n| Variable_name | Value                |\n+---------------+----------------------+\n| log_error     | ./VM-16-4-centos.err |\n+---------------+----------------------+\n1 row in set (0.00 sec)\n```\n\n命令：\n```sql\nshow variables like 'log_error'; #查看当前的错误日志文件，如果没有指定，默认有一个错误日志文件\nset global log_error = '/var/lib/mysql/error.log'; #设置错误日志文件\n```\n\n修改配置文件：  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\nlog-error='/var/lib/mysql/error.log'\n```\n\n当前通过修改配置文件指定错误配置文件，重启服务配置生效  \n可以看到当启动服务后，打印出Starting MySQL.Logging to '/var/lib/mysql/error.log'  \n这代表设置成功！\n```\n[root@VM-16-4-centos mysql]# service mysql stop\nShutting down MySQL. SUCCESS! \n[root@VM-16-4-centos mysql]# service mysql start\nStarting MySQL.Logging to '/var/lib/mysql/error.log'.\n. SUCCESS! \n```\n\n查看错误日志文件：  \n发现 mysql 实例启动的日志【验证了错误日志会记录实例每次启动，停止的详细信息】\n```\n[root@VM-16-4-centos mysql]# cat /var/lib/mysql/error.log \n210621 18:35:41 [Note] Plugin 'FEDERATED' is disabled.\n210621 18:35:41 InnoDB: The InnoDB memory heap is disabled\n210621 18:35:41 InnoDB: Mutexes and rw_locks use GCC atomic builtins\n210621 18:35:41 InnoDB: Compressed tables use zlib 1.2.11\n210621 18:35:41 InnoDB: Using Linux native AIO\n210621 18:35:41 InnoDB: Initializing buffer pool, size = 128.0M\n210621 18:35:41 InnoDB: Completed initialization of buffer pool\n210621 18:35:41 InnoDB: highest supported file format is Barracuda.\n210621 18:35:41  InnoDB: Waiting for the background threads to start\n210621 18:35:42 InnoDB: 5.5.62 started; log sequence number 1598913\n210621 18:35:42 [Note] Server hostname (bind-address): '0.0.0.0'; port: 3306\n210621 18:35:42 [Note]   - '0.0.0.0' resolves to '0.0.0.0';\n210621 18:35:42 [Note] Server socket created on IP: '0.0.0.0'.\n210621 18:35:42 [Note] Event Scheduler: Loaded 0 events\n210621 18:35:42 [Note] /usr/sbin/mysqld: ready for connections.\nVersion: '5.5.62'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MySQL Community Server (GPL)\n```\n\n***\n\n# general log（普通日志）\n\n## 定义\n\ngeneral log 是 MySQL 的普通日志。  \n主要记录 MySQL 服务实例所有的操作，如：select，update，insert，delete等操作，无论操作是否成功执行都会记录。还记录 MySQL 客户端与 MySQL 服务端连接及断开的相关信息，无论连接成功还是失败。\n\n**注意：由于普通日志几乎记录了MySQL的所有操作，对于数据访问频繁的数据库服务器而言，\n如果开启MySQL的普通查询日志将会大幅度的降低数据库的性能，因此建议关闭普通查询日志。\n只有在特殊时期，如需要追踪某些特殊的查询日志，可以临时打开普通的查询日志。**\n\n***\n\n## 相关参数\n\n普通日志相关参数：\n* general_log：是否开启普通日志\n* general_log_file：普通日志文件的存放路径\n\n***\n\n## 开启普通日志\n\n查看普通日志的当前配置\n```\nmysql> show variables like '%general_log%';\n+------------------+-----------------------------------+\n| Variable_name    | Value                             |\n+------------------+-----------------------------------+\n| general_log      | OFF                               |\n| general_log_file | /var/lib/mysql/VM-16-4-centos.log |\n+------------------+-----------------------------------+\n2 rows in set (0.00 sec)\n```\n\n命令：\n``` sql\nshow variables like '%general_log%'; #查看普通日志是否开启\nshow variables like '%general_log_file%'; #查看普通日志文件的存放路径\n\nset global general_log=1; #开启普通日志\nset global general_log_file='/var/lib/mysql/general.log'; #指定普通日志文件的存放路径\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\ngeneral_log=1\ngeneral_log_file=/var/lib/mysql/general.log\n```\n\n当前通过修改配置文件指定普通日志配置，重启服务后查看普通日志。  \n结论：可以看到，普通日志记录了客户端登录，查询数据库，查询表的所有操作。\n```\n[root@VM-16-4-centos mysql]# cat /var/lib/mysql/general.log \n/usr/sbin/mysqld, Version: 5.5.62-log (MySQL Community Server (GPL)). started with:\nTcp port: 3306  Unix socket: /var/lib/mysql/mysql.sock\nTime                 Id Command    Argument\n210621 21:51:45\t    1 Connect\troot@localhost on \n\t\t    1 Connect\tAccess denied for user 'root'@'localhost' (using password: NO)\n210621 21:52:01\t    2 Connect\troot@localhost on \n\t\t    2 Query\tselect @@version_comment limit 1\n210621 21:52:51\t    2 Query\tSELECT DATABASE()\n\t\t    2 Init DB\ttest\n210621 21:53:00\t    2 Query\tselect * from a\n210621 21:53:03\t    2 Query\tselect * from a\n```\n\n***\n\n## 普通日志文件处理\n\n//TODO\n\n***\n\n\n# slow query log（慢查询日志）\n\n## 定义\n\nslow query log 是 MySQL 的慢查询日志。  \n主要记录 MySQL 中【响应时间超过阀值的sql语句】 或【没有使用索引】的查询语句。\n\n**注意：慢查询日志与普通查询日志不同，区别在于：慢查询日志只包含成功执行过的查询语句。**  \n\n***\n\n## 相关参数\n\n以下是慢查询日志相关的参数：\n* slow_query_log：慢查询日志是否开启\n* slow_query_log_file：慢查询日志文件的存放路径，如果没有指定参数slow_query_log_file的话，系统默认会给一个缺省的文件host_name-slow.log。\n* long_query_time：设置慢查询的时间阈值，默认阈值是10s。\n* log_quries_not_using_indexes：是否将不适用索引的查询语句记录到慢查询日志中，无论查询速度有多快。\n* slow_queries：记录当前慢查询sql条数\n\n***\n\n## 开启慢查询日志\n\n查看慢查询日志的当前配置.  \n默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的。\n```\nmysql> show variables like '%slow_query_log%';\n+---------------------+----------------------------------------+\n| Variable_name       | Value                                  |\n+---------------------+----------------------------------------+\n| slow_query_log      | OFF                                    |\n| slow_query_log_file | /var/lib/mysql/VM-16-4-centos-slow.log |\n+---------------------+----------------------------------------+\n2 rows in set (0.00 sec)\n```\n\n命令：\n``` sql\nshow variables like '%slow_query_log%'; #查看是否开启\nshow variables like '%slow_query_log_file%'; #查看慢查询日志文件的存放路径\n\nset global slow_query_log=1; #设置开启慢查询日志\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\nslow_query_log=1\nslow_query_log_file=/var/lib/mysql/atguigu-slow.log\n```\n\n***\n\n## 什么 sql 会被记录到慢查询日志\n\n问：开启慢查询日志后，什么 sql 会被记录到慢查询日志里面呢？  \n答：慢查询日志主要记录【响应时间超过阀值的sql语句】或【没有使用索引】的查询语句。\n\n### 记录响应时间超过阀值的sql语句\n\n时间阈值是由 long_query_time 控制的.  \nlong_query_time：设置慢查询的时间阈值，默认阈值是10s。可以使用命令修改，也可以在my.cnf参数里面修改。\n\n命令：\n```sql\nshow variables LIKE 'long_query_time%'; #查看long_query_time的值\nset global long_query_time=5; #设置查询超过5秒则算慢查询sql\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\nlong_query_time=5\n```\n\n### 记录没有使用索引的查询语句\n\nlog_quries_not_using_indexes：是否将不使用索引的查询语句记录到慢查询日志中，无论查询速度有多快。\n\n命令：\n```sql\nshow variables like '%log_queries_not_using_indexes%'; #查看值\nset global log_queries_not_using_indexes=1; #设置开启记录没有使用索引的查询语句\n```\n\n修改配置文件：（永久开启）  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\nlog_queries_not_using_indexes=1\n```\n\n## 慢查询 sql 案例\n\n``` sql\nset global slow_query_log=1; #设置开启慢查询日志\nset global long_query_time=3; #设置查询超过3秒则算慢查询sql（注意，这里是全局命令设置，需要重新连接才生效）\n\nselect sleep(4) #模拟一次查询，查询耗时4秒\nshow global status like '%slow_queries%'; #查询当前慢查询sql条数命令\n```\n\n去mysql的data目录下找到慢查询日志文件：  \n我没有去配置日志文件名，所以是一个默认的文件名：localhost-slow.log\n\n![慢查询日志图片](https://niubilityoyr.github.io/images/MySQL/1624261484667.jpg)\n\n可以看到当前慢查询日志中会记录查询超过了阈值的sql，我们刚刚的select sleep(4)就在当中，而且可以明确的看到当前sql，当前查询时间，锁的时间，一共有多少数据。\n\n***\n\n## 日志查询分析器（mysqldumpslow）\n\n日志查询分析器的体现：  \n在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。\n\n![日志查询分析器帮助信息图片](https://niubilityoyr.github.io/images/MySQL/日志查询分析器使用.jpg)\n\nmysqldumpslow --help  查看mysqldumpslow的帮助信息\n\n* s：表示按照何种方式排序\n* c：访问次数\n* l：锁定时间\n* r：返回记录\n* t：查询时间\n* al：平均锁定时间\n* ar：平均返回记录数\n* at：平均查询时间\n* t：即为返回前面多少条数据\n* g：后边搭配一个正则匹配模式，大小写不敏感。\n\n分析器常用的方式：\n``` sql\n#得到返回数据集最多的10个SQL\nmysqldumpslow -s r -t 10 /var/lib/mysql/localhost-slow.log\n\n#得到访问次数最多的10个SQL\nmysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log\n\n#得到按照时间排序的前10条里面含有左连接的查询sql\nmysqldumpslow -s t -t 10 -g \"left join\" /var/lib/mysql/atguigu-slow.log\n\n#另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况\nmysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log | more\n```\n\n***\n\n# bin log（二进制日志）\n\n## 定义\nbin log 是 MySQL 的二进制文件，也叫归档日志。  \n主要记录 MySQL 数据库中的所有更新操作，如：use，insert，delete，update，create，alter，drop等操作。不改变数据的sql不会记录，比如 select 语句一把不会被记录，因为他们不会对数据产生任何改动。  \n用一句更简介易懂的话概况就是：所有涉及数据变动的操作，都会记录到二进制日志文件中。\n\n> 重要的使用场景：  \n> mysql主从复制：mysql replication 在 master 端开启 bin log，master 把它的二进制日志传递给 slaves 来达到master-slave数据一致的目的。  \n> 数据恢复：通过mysqlbinlog工具来恢复数据\n\n> 二进制日志包含两种文件：  \n> 二进制日志索引文件（文件名后缀.index），用于记录索引的二进制文件  \n> 二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML语句事件\n\n***\n\n## 相关参数\n\nbin log相关参数：\n* log_bin：指定 bin log是否打开\n* log_bin_basename：指定的是 bin log 的基本文件名，后面会追加标识来表示每一个文件\n* log_bin_index：指定的是 bin log 文件的索引文件，这个文件管理了所有的 bin log 文件的目录\n\n***\n\n## 开启二进制日志\n\n查看二进制日志的当前配置：  \n可以看到，二进制日志默认是不开启的\n```\nmysql> show variables like 'log_bin';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| log_bin       | OFF   |\n+---------------+-------+\n1 row in set (0.00 sec)\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld] \nlog-bin=mysql-bin\nserver-id=001\n```\n\n修改配置文件后，重启服务配置生效  \n查看 bin log 日志文件\n![bin log 日志文件](imgs/1624350274231.jpg)\n\n***\n\n## 查看二进制日志文件\n\n注意：  \n1）bin log日志与数据库文件在同目录中。  \n2）bin log是二进制文件，普通文件查看器cat、more、vim等都无法打开，必须使用自带的mysqlbinlog命令查看。  \n\n### mysqlbinlog 工具查看\n\n> mysqlbinlog 是 MySQL 中自带的工具，具体位置在 MySQL 的 bin 目录下。\n> 在Mysql5.5以下版本使用mysqlbinlog命令时如果报错，就加上\"--no-defaults\"选项\n\n查看二进制日志文件：mysqlbinlog mysql-bin.000002\n```\n# at 391\n#210622 17:06:40 server id 1  end_log_pos 501   Query   thread_id=2     exec_time=0     error_code=0\nSET TIMESTAMP=1624352800/*!*/;\ninsert into admin_info values(1, \"admin\", 100) #执行的sql\n/*!*/;\n# at 501\n#210622 17:06:40 server id 1  end_log_pos 528   Xid = 7 #执行的时间\n```\n> 图解  \n> server id 1：数据库主机的服务号  \n> end_log_pos 528：sql结束时的pos节点  \n> thread_id=11：线程号  \n\n### 命令查看\n\n> mysqlbinlog 查看取出 bin log 日志的全文内容比较多，不容易分辨查看到pos点信息  \n> 介绍一种更为方便的查询命令 show bin log events\n\n命令解析 show bin log events [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count];    \n参数解析：  \na、IN 'log_name':指定要查询的bin log文件名（不指定就是第一个bin log文件  \nb、FROM pos:指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）  \nc、LIMIT【offset】：偏移量(不指定就是0)  \nd、row_count :查询总条数（不指定就是所有行）  \n\nshow bin log events查询：\n```\nmysql> show bin log events in'mysql-bin.000002';\n+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+\n| Log_name         | Pos | Event_type  | Server_id | End_log_pos | Info                                                                            |\n+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+\n| mysql-bin.000002 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.62-log, bin log ver: 4                                           |\n| mysql-bin.000002 | 107 | Query       |         1 |         192 | create database admin                                                           |\n| mysql-bin.000002 | 192 | Query       |         1 |         322 | use `admin`; create table admin_info(id int(11), name varchar(50), age int(11)) |\n| mysql-bin.000002 | 322 | Query       |         1 |         391 | BEGIN                                                                           |\n| mysql-bin.000002 | 391 | Query       |         1 |         501 | use `admin`; insert into admin_info values(1, \"admin\", 100)                     |\n| mysql-bin.000002 | 501 | Xid         |         1 |         528 | COMMIT /* xid=7 */                                                              |\n| mysql-bin.000002 | 528 | Query       |         1 |         639 | use `admin`; create table role(id int(11), name varchar(25))                    |\n+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+\n7 rows in set (0.00 sec)\n```\n\n***\n\n## 二进制日志文件常用操作命令\n\n1）查看所有 bin log 日志。  \nshow master logs;\n```\nmysql> show master logs;\n+------------------+-----------+\n| Log_name         | File_size |\n+------------------+-----------+\n| mysql-bin.000001 |       107 |\n+------------------+-----------+\n1 row in set (0.00 sec)\n```\n\n2）查看master状态，即最后（最新）一个bin log日志的编号名称，及其最后一个操作事件pos结束点(Position)值。  \nshow master status;\n```\nmysql> show master status;\n+------------------+----------+--------------+------------------+\n| File             | Position | bin log_Do_DB | bin log_Ignore_DB |\n+------------------+----------+--------------+------------------+\n| mysql-bin.000001 |      107 |              |                  |\n+------------------+----------+--------------+------------------+\n1 row in set (0.00 sec)\n```\n\n3）flush 刷新log日志，自此刻开始产生一个新编号的bin log日志文件;  \nflush logs;\n\n注意：每当mysqld服务重启时，会自动执行此命令，刷新bin log日志；在mysqlddump备份数据时加-F选项也会刷新bin log日志；\n\n4）重置（清空）所有bin log日志;  \nreset master;\n\n***\n\n## 利用二进制日志恢复数据\n\n// TODO\n\n***\n\n# redo log（重做日志）\n\n## 定义\n\nredo log 是 MySQL 的物理日志，也叫重做日志，记录存储引擎 InnoDB 的事务日志。\n\nMySQL 每执行一条 SQL 更新语句，不是每次数据更改都立刻写到磁盘，而是先将记录写到 redo log 里面，并更新内存（这时内存与磁盘的数据不一致，将这种有差异的数据称为脏页），一段时间后，再一次性将多个操作记录写到到磁盘上，这样可以减少磁盘 io 成本，提高操作速度。先写日志，再写磁盘，这就是 MySQL 里经常说到的 WAL 技术，即 Write-Ahead Logging，又叫预写日志。MySQL 通过 WAL 技术保证事务的持久性。\n\n***\n\n# undo log（回滚日志）\n\n## 定义\n\n\n***\n\n## 相关参数\n\nundo log相关参数：\n* innodb_undo_logs :设置回滚日志的回滚段大小，默认为128k\n* innodb_undo_directory: 设置回滚日志存放的目录。\n* innodb_undo_tablespace:设置了回滚日志由多少个回滚日志文件组成，默认为0.\n\n***\n\n# relay log（中继日志）\n\n## 定义\n\nrelay-log中继日志是连接master和slave的核心.\n\n***","source":"_posts/MySQL/MySQL-日志系统.md","raw":"---\ntitle: MySQL日志系统\ndate: 2021-06-22 00:00:05\nauthor: 神奇的荣荣\nsummary: \"\"\ntags: MySQL\ncategories: MySQL\n---\n\n注意：当前设置系统参数方式，mysql重启即失效，如果要永久存在则需要修改配置文件。\n\n# error log（错误日志）\n\n## 定义\n\nerror log 是 MySQL 的错误日志。  \n主要记录 MySQL 服务实例每次启动，停止的详细信息，以及 MySQL 实例运行过程中产生的警告或者错误信息。  \n和其他的日志不同，MySQL的error日志必须开启，无法关闭。\n\n**注意：默认情况下，错误日志的文件名为：主机名.err。 但 error 日志并不会记录所有的错误信息，只有MySQL服务实例运行过程中发声的关键错误（critical）才会被记录下来。**\n\n***\n\n<!-- more -->\n\n## 设置错误日志\n\n查看当前的错误日志文件  \n没有设置错误日志文件，默认指定了一个的错误日志文件\n```\nmysql> show variables like 'log_error';\n+---------------+----------------------+\n| Variable_name | Value                |\n+---------------+----------------------+\n| log_error     | ./VM-16-4-centos.err |\n+---------------+----------------------+\n1 row in set (0.00 sec)\n```\n\n命令：\n```sql\nshow variables like 'log_error'; #查看当前的错误日志文件，如果没有指定，默认有一个错误日志文件\nset global log_error = '/var/lib/mysql/error.log'; #设置错误日志文件\n```\n\n修改配置文件：  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\nlog-error='/var/lib/mysql/error.log'\n```\n\n当前通过修改配置文件指定错误配置文件，重启服务配置生效  \n可以看到当启动服务后，打印出Starting MySQL.Logging to '/var/lib/mysql/error.log'  \n这代表设置成功！\n```\n[root@VM-16-4-centos mysql]# service mysql stop\nShutting down MySQL. SUCCESS! \n[root@VM-16-4-centos mysql]# service mysql start\nStarting MySQL.Logging to '/var/lib/mysql/error.log'.\n. SUCCESS! \n```\n\n查看错误日志文件：  \n发现 mysql 实例启动的日志【验证了错误日志会记录实例每次启动，停止的详细信息】\n```\n[root@VM-16-4-centos mysql]# cat /var/lib/mysql/error.log \n210621 18:35:41 [Note] Plugin 'FEDERATED' is disabled.\n210621 18:35:41 InnoDB: The InnoDB memory heap is disabled\n210621 18:35:41 InnoDB: Mutexes and rw_locks use GCC atomic builtins\n210621 18:35:41 InnoDB: Compressed tables use zlib 1.2.11\n210621 18:35:41 InnoDB: Using Linux native AIO\n210621 18:35:41 InnoDB: Initializing buffer pool, size = 128.0M\n210621 18:35:41 InnoDB: Completed initialization of buffer pool\n210621 18:35:41 InnoDB: highest supported file format is Barracuda.\n210621 18:35:41  InnoDB: Waiting for the background threads to start\n210621 18:35:42 InnoDB: 5.5.62 started; log sequence number 1598913\n210621 18:35:42 [Note] Server hostname (bind-address): '0.0.0.0'; port: 3306\n210621 18:35:42 [Note]   - '0.0.0.0' resolves to '0.0.0.0';\n210621 18:35:42 [Note] Server socket created on IP: '0.0.0.0'.\n210621 18:35:42 [Note] Event Scheduler: Loaded 0 events\n210621 18:35:42 [Note] /usr/sbin/mysqld: ready for connections.\nVersion: '5.5.62'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MySQL Community Server (GPL)\n```\n\n***\n\n# general log（普通日志）\n\n## 定义\n\ngeneral log 是 MySQL 的普通日志。  \n主要记录 MySQL 服务实例所有的操作，如：select，update，insert，delete等操作，无论操作是否成功执行都会记录。还记录 MySQL 客户端与 MySQL 服务端连接及断开的相关信息，无论连接成功还是失败。\n\n**注意：由于普通日志几乎记录了MySQL的所有操作，对于数据访问频繁的数据库服务器而言，\n如果开启MySQL的普通查询日志将会大幅度的降低数据库的性能，因此建议关闭普通查询日志。\n只有在特殊时期，如需要追踪某些特殊的查询日志，可以临时打开普通的查询日志。**\n\n***\n\n## 相关参数\n\n普通日志相关参数：\n* general_log：是否开启普通日志\n* general_log_file：普通日志文件的存放路径\n\n***\n\n## 开启普通日志\n\n查看普通日志的当前配置\n```\nmysql> show variables like '%general_log%';\n+------------------+-----------------------------------+\n| Variable_name    | Value                             |\n+------------------+-----------------------------------+\n| general_log      | OFF                               |\n| general_log_file | /var/lib/mysql/VM-16-4-centos.log |\n+------------------+-----------------------------------+\n2 rows in set (0.00 sec)\n```\n\n命令：\n``` sql\nshow variables like '%general_log%'; #查看普通日志是否开启\nshow variables like '%general_log_file%'; #查看普通日志文件的存放路径\n\nset global general_log=1; #开启普通日志\nset global general_log_file='/var/lib/mysql/general.log'; #指定普通日志文件的存放路径\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\ngeneral_log=1\ngeneral_log_file=/var/lib/mysql/general.log\n```\n\n当前通过修改配置文件指定普通日志配置，重启服务后查看普通日志。  \n结论：可以看到，普通日志记录了客户端登录，查询数据库，查询表的所有操作。\n```\n[root@VM-16-4-centos mysql]# cat /var/lib/mysql/general.log \n/usr/sbin/mysqld, Version: 5.5.62-log (MySQL Community Server (GPL)). started with:\nTcp port: 3306  Unix socket: /var/lib/mysql/mysql.sock\nTime                 Id Command    Argument\n210621 21:51:45\t    1 Connect\troot@localhost on \n\t\t    1 Connect\tAccess denied for user 'root'@'localhost' (using password: NO)\n210621 21:52:01\t    2 Connect\troot@localhost on \n\t\t    2 Query\tselect @@version_comment limit 1\n210621 21:52:51\t    2 Query\tSELECT DATABASE()\n\t\t    2 Init DB\ttest\n210621 21:53:00\t    2 Query\tselect * from a\n210621 21:53:03\t    2 Query\tselect * from a\n```\n\n***\n\n## 普通日志文件处理\n\n//TODO\n\n***\n\n\n# slow query log（慢查询日志）\n\n## 定义\n\nslow query log 是 MySQL 的慢查询日志。  \n主要记录 MySQL 中【响应时间超过阀值的sql语句】 或【没有使用索引】的查询语句。\n\n**注意：慢查询日志与普通查询日志不同，区别在于：慢查询日志只包含成功执行过的查询语句。**  \n\n***\n\n## 相关参数\n\n以下是慢查询日志相关的参数：\n* slow_query_log：慢查询日志是否开启\n* slow_query_log_file：慢查询日志文件的存放路径，如果没有指定参数slow_query_log_file的话，系统默认会给一个缺省的文件host_name-slow.log。\n* long_query_time：设置慢查询的时间阈值，默认阈值是10s。\n* log_quries_not_using_indexes：是否将不适用索引的查询语句记录到慢查询日志中，无论查询速度有多快。\n* slow_queries：记录当前慢查询sql条数\n\n***\n\n## 开启慢查询日志\n\n查看慢查询日志的当前配置.  \n默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的。\n```\nmysql> show variables like '%slow_query_log%';\n+---------------------+----------------------------------------+\n| Variable_name       | Value                                  |\n+---------------------+----------------------------------------+\n| slow_query_log      | OFF                                    |\n| slow_query_log_file | /var/lib/mysql/VM-16-4-centos-slow.log |\n+---------------------+----------------------------------------+\n2 rows in set (0.00 sec)\n```\n\n命令：\n``` sql\nshow variables like '%slow_query_log%'; #查看是否开启\nshow variables like '%slow_query_log_file%'; #查看慢查询日志文件的存放路径\n\nset global slow_query_log=1; #设置开启慢查询日志\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\nslow_query_log=1\nslow_query_log_file=/var/lib/mysql/atguigu-slow.log\n```\n\n***\n\n## 什么 sql 会被记录到慢查询日志\n\n问：开启慢查询日志后，什么 sql 会被记录到慢查询日志里面呢？  \n答：慢查询日志主要记录【响应时间超过阀值的sql语句】或【没有使用索引】的查询语句。\n\n### 记录响应时间超过阀值的sql语句\n\n时间阈值是由 long_query_time 控制的.  \nlong_query_time：设置慢查询的时间阈值，默认阈值是10s。可以使用命令修改，也可以在my.cnf参数里面修改。\n\n命令：\n```sql\nshow variables LIKE 'long_query_time%'; #查看long_query_time的值\nset global long_query_time=5; #设置查询超过5秒则算慢查询sql\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld]\nlong_query_time=5\n```\n\n### 记录没有使用索引的查询语句\n\nlog_quries_not_using_indexes：是否将不使用索引的查询语句记录到慢查询日志中，无论查询速度有多快。\n\n命令：\n```sql\nshow variables like '%log_queries_not_using_indexes%'; #查看值\nset global log_queries_not_using_indexes=1; #设置开启记录没有使用索引的查询语句\n```\n\n修改配置文件：（永久开启）  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\nlog_queries_not_using_indexes=1\n```\n\n## 慢查询 sql 案例\n\n``` sql\nset global slow_query_log=1; #设置开启慢查询日志\nset global long_query_time=3; #设置查询超过3秒则算慢查询sql（注意，这里是全局命令设置，需要重新连接才生效）\n\nselect sleep(4) #模拟一次查询，查询耗时4秒\nshow global status like '%slow_queries%'; #查询当前慢查询sql条数命令\n```\n\n去mysql的data目录下找到慢查询日志文件：  \n我没有去配置日志文件名，所以是一个默认的文件名：localhost-slow.log\n\n![慢查询日志图片](https://niubilityoyr.github.io/images/MySQL/1624261484667.jpg)\n\n可以看到当前慢查询日志中会记录查询超过了阈值的sql，我们刚刚的select sleep(4)就在当中，而且可以明确的看到当前sql，当前查询时间，锁的时间，一共有多少数据。\n\n***\n\n## 日志查询分析器（mysqldumpslow）\n\n日志查询分析器的体现：  \n在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。\n\n![日志查询分析器帮助信息图片](https://niubilityoyr.github.io/images/MySQL/日志查询分析器使用.jpg)\n\nmysqldumpslow --help  查看mysqldumpslow的帮助信息\n\n* s：表示按照何种方式排序\n* c：访问次数\n* l：锁定时间\n* r：返回记录\n* t：查询时间\n* al：平均锁定时间\n* ar：平均返回记录数\n* at：平均查询时间\n* t：即为返回前面多少条数据\n* g：后边搭配一个正则匹配模式，大小写不敏感。\n\n分析器常用的方式：\n``` sql\n#得到返回数据集最多的10个SQL\nmysqldumpslow -s r -t 10 /var/lib/mysql/localhost-slow.log\n\n#得到访问次数最多的10个SQL\nmysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log\n\n#得到按照时间排序的前10条里面含有左连接的查询sql\nmysqldumpslow -s t -t 10 -g \"left join\" /var/lib/mysql/atguigu-slow.log\n\n#另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况\nmysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log | more\n```\n\n***\n\n# bin log（二进制日志）\n\n## 定义\nbin log 是 MySQL 的二进制文件，也叫归档日志。  \n主要记录 MySQL 数据库中的所有更新操作，如：use，insert，delete，update，create，alter，drop等操作。不改变数据的sql不会记录，比如 select 语句一把不会被记录，因为他们不会对数据产生任何改动。  \n用一句更简介易懂的话概况就是：所有涉及数据变动的操作，都会记录到二进制日志文件中。\n\n> 重要的使用场景：  \n> mysql主从复制：mysql replication 在 master 端开启 bin log，master 把它的二进制日志传递给 slaves 来达到master-slave数据一致的目的。  \n> 数据恢复：通过mysqlbinlog工具来恢复数据\n\n> 二进制日志包含两种文件：  \n> 二进制日志索引文件（文件名后缀.index），用于记录索引的二进制文件  \n> 二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML语句事件\n\n***\n\n## 相关参数\n\nbin log相关参数：\n* log_bin：指定 bin log是否打开\n* log_bin_basename：指定的是 bin log 的基本文件名，后面会追加标识来表示每一个文件\n* log_bin_index：指定的是 bin log 文件的索引文件，这个文件管理了所有的 bin log 文件的目录\n\n***\n\n## 开启二进制日志\n\n查看二进制日志的当前配置：  \n可以看到，二进制日志默认是不开启的\n```\nmysql> show variables like 'log_bin';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| log_bin       | OFF   |\n+---------------+-------+\n1 row in set (0.00 sec)\n```\n\n修改配置文件：(永久开启)  \n修改 my.cnf 文件，在 [mysqld] 下增加或修改参数\n```\n[mysqld] \nlog-bin=mysql-bin\nserver-id=001\n```\n\n修改配置文件后，重启服务配置生效  \n查看 bin log 日志文件\n![bin log 日志文件](imgs/1624350274231.jpg)\n\n***\n\n## 查看二进制日志文件\n\n注意：  \n1）bin log日志与数据库文件在同目录中。  \n2）bin log是二进制文件，普通文件查看器cat、more、vim等都无法打开，必须使用自带的mysqlbinlog命令查看。  \n\n### mysqlbinlog 工具查看\n\n> mysqlbinlog 是 MySQL 中自带的工具，具体位置在 MySQL 的 bin 目录下。\n> 在Mysql5.5以下版本使用mysqlbinlog命令时如果报错，就加上\"--no-defaults\"选项\n\n查看二进制日志文件：mysqlbinlog mysql-bin.000002\n```\n# at 391\n#210622 17:06:40 server id 1  end_log_pos 501   Query   thread_id=2     exec_time=0     error_code=0\nSET TIMESTAMP=1624352800/*!*/;\ninsert into admin_info values(1, \"admin\", 100) #执行的sql\n/*!*/;\n# at 501\n#210622 17:06:40 server id 1  end_log_pos 528   Xid = 7 #执行的时间\n```\n> 图解  \n> server id 1：数据库主机的服务号  \n> end_log_pos 528：sql结束时的pos节点  \n> thread_id=11：线程号  \n\n### 命令查看\n\n> mysqlbinlog 查看取出 bin log 日志的全文内容比较多，不容易分辨查看到pos点信息  \n> 介绍一种更为方便的查询命令 show bin log events\n\n命令解析 show bin log events [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count];    \n参数解析：  \na、IN 'log_name':指定要查询的bin log文件名（不指定就是第一个bin log文件  \nb、FROM pos:指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）  \nc、LIMIT【offset】：偏移量(不指定就是0)  \nd、row_count :查询总条数（不指定就是所有行）  \n\nshow bin log events查询：\n```\nmysql> show bin log events in'mysql-bin.000002';\n+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+\n| Log_name         | Pos | Event_type  | Server_id | End_log_pos | Info                                                                            |\n+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+\n| mysql-bin.000002 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.62-log, bin log ver: 4                                           |\n| mysql-bin.000002 | 107 | Query       |         1 |         192 | create database admin                                                           |\n| mysql-bin.000002 | 192 | Query       |         1 |         322 | use `admin`; create table admin_info(id int(11), name varchar(50), age int(11)) |\n| mysql-bin.000002 | 322 | Query       |         1 |         391 | BEGIN                                                                           |\n| mysql-bin.000002 | 391 | Query       |         1 |         501 | use `admin`; insert into admin_info values(1, \"admin\", 100)                     |\n| mysql-bin.000002 | 501 | Xid         |         1 |         528 | COMMIT /* xid=7 */                                                              |\n| mysql-bin.000002 | 528 | Query       |         1 |         639 | use `admin`; create table role(id int(11), name varchar(25))                    |\n+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+\n7 rows in set (0.00 sec)\n```\n\n***\n\n## 二进制日志文件常用操作命令\n\n1）查看所有 bin log 日志。  \nshow master logs;\n```\nmysql> show master logs;\n+------------------+-----------+\n| Log_name         | File_size |\n+------------------+-----------+\n| mysql-bin.000001 |       107 |\n+------------------+-----------+\n1 row in set (0.00 sec)\n```\n\n2）查看master状态，即最后（最新）一个bin log日志的编号名称，及其最后一个操作事件pos结束点(Position)值。  \nshow master status;\n```\nmysql> show master status;\n+------------------+----------+--------------+------------------+\n| File             | Position | bin log_Do_DB | bin log_Ignore_DB |\n+------------------+----------+--------------+------------------+\n| mysql-bin.000001 |      107 |              |                  |\n+------------------+----------+--------------+------------------+\n1 row in set (0.00 sec)\n```\n\n3）flush 刷新log日志，自此刻开始产生一个新编号的bin log日志文件;  \nflush logs;\n\n注意：每当mysqld服务重启时，会自动执行此命令，刷新bin log日志；在mysqlddump备份数据时加-F选项也会刷新bin log日志；\n\n4）重置（清空）所有bin log日志;  \nreset master;\n\n***\n\n## 利用二进制日志恢复数据\n\n// TODO\n\n***\n\n# redo log（重做日志）\n\n## 定义\n\nredo log 是 MySQL 的物理日志，也叫重做日志，记录存储引擎 InnoDB 的事务日志。\n\nMySQL 每执行一条 SQL 更新语句，不是每次数据更改都立刻写到磁盘，而是先将记录写到 redo log 里面，并更新内存（这时内存与磁盘的数据不一致，将这种有差异的数据称为脏页），一段时间后，再一次性将多个操作记录写到到磁盘上，这样可以减少磁盘 io 成本，提高操作速度。先写日志，再写磁盘，这就是 MySQL 里经常说到的 WAL 技术，即 Write-Ahead Logging，又叫预写日志。MySQL 通过 WAL 技术保证事务的持久性。\n\n***\n\n# undo log（回滚日志）\n\n## 定义\n\n\n***\n\n## 相关参数\n\nundo log相关参数：\n* innodb_undo_logs :设置回滚日志的回滚段大小，默认为128k\n* innodb_undo_directory: 设置回滚日志存放的目录。\n* innodb_undo_tablespace:设置了回滚日志由多少个回滚日志文件组成，默认为0.\n\n***\n\n# relay log（中继日志）\n\n## 定义\n\nrelay-log中继日志是连接master和slave的核心.\n\n***","slug":"MySQL/MySQL-日志系统","published":1,"updated":"2021-06-24T08:07:19.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqbp4hng000qd1s6cd7m9qld","content":"<p>注意：当前设置系统参数方式，mysql重启即失效，如果要永久存在则需要修改配置文件。</p>\n<h1 id=\"error-log（错误日志）\"><a href=\"#error-log（错误日志）\" class=\"headerlink\" title=\"error log（错误日志）\"></a>error log（错误日志）</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>error log 是 MySQL 的错误日志。<br>主要记录 MySQL 服务实例每次启动，停止的详细信息，以及 MySQL 实例运行过程中产生的警告或者错误信息。<br>和其他的日志不同，MySQL的error日志必须开启，无法关闭。</p>\n<p><strong>注意：默认情况下，错误日志的文件名为：主机名.err。 但 error 日志并不会记录所有的错误信息，只有MySQL服务实例运行过程中发声的关键错误（critical）才会被记录下来。</strong></p>\n<hr>\n<span id=\"more\"></span>\n\n<h2 id=\"设置错误日志\"><a href=\"#设置错误日志\" class=\"headerlink\" title=\"设置错误日志\"></a>设置错误日志</h2><p>查看当前的错误日志文件<br>没有设置错误日志文件，默认指定了一个的错误日志文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;log_error&#x27;;</span><br><span class=\"line\">+---------------+----------------------+</span><br><span class=\"line\">| Variable_name | Value                |</span><br><span class=\"line\">+---------------+----------------------+</span><br><span class=\"line\">| log_error     | ./VM-16-4-centos.err |</span><br><span class=\"line\">+---------------+----------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;log_error&#x27;</span>; #查看当前的错误日志文件，如果没有指定，默认有一个错误日志文件</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> log_error <span class=\"operator\">=</span> <span class=\"string\">&#x27;/var/lib/mysql/error.log&#x27;</span>; #设置错误日志文件</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-error=&#x27;/var/lib/mysql/error.log&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>当前通过修改配置文件指定错误配置文件，重启服务配置生效<br>可以看到当启动服务后，打印出Starting MySQL.Logging to ‘/var/lib/mysql/error.log’<br>这代表设置成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-4-centos mysql]# service mysql stop</span><br><span class=\"line\">Shutting down MySQL. SUCCESS! </span><br><span class=\"line\">[root@VM-16-4-centos mysql]# service mysql start</span><br><span class=\"line\">Starting MySQL.Logging to &#x27;/var/lib/mysql/error.log&#x27;.</span><br><span class=\"line\">. SUCCESS! </span><br></pre></td></tr></table></figure>\n\n<p>查看错误日志文件：<br>发现 mysql 实例启动的日志【验证了错误日志会记录实例每次启动，停止的详细信息】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-4-centos mysql]# cat /var/lib/mysql/error.log </span><br><span class=\"line\">210621 18:35:41 [Note] Plugin &#x27;FEDERATED&#x27; is disabled.</span><br><span class=\"line\">210621 18:35:41 InnoDB: The InnoDB memory heap is disabled</span><br><span class=\"line\">210621 18:35:41 InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class=\"line\">210621 18:35:41 InnoDB: Compressed tables use zlib 1.2.11</span><br><span class=\"line\">210621 18:35:41 InnoDB: Using Linux native AIO</span><br><span class=\"line\">210621 18:35:41 InnoDB: Initializing buffer pool, size = 128.0M</span><br><span class=\"line\">210621 18:35:41 InnoDB: Completed initialization of buffer pool</span><br><span class=\"line\">210621 18:35:41 InnoDB: highest supported file format is Barracuda.</span><br><span class=\"line\">210621 18:35:41  InnoDB: Waiting for the background threads to start</span><br><span class=\"line\">210621 18:35:42 InnoDB: 5.5.62 started; log sequence number 1598913</span><br><span class=\"line\">210621 18:35:42 [Note] Server hostname (bind-address): &#x27;0.0.0.0&#x27;; port: 3306</span><br><span class=\"line\">210621 18:35:42 [Note]   - &#x27;0.0.0.0&#x27; resolves to &#x27;0.0.0.0&#x27;;</span><br><span class=\"line\">210621 18:35:42 [Note] Server socket created on IP: &#x27;0.0.0.0&#x27;.</span><br><span class=\"line\">210621 18:35:42 [Note] Event Scheduler: Loaded 0 events</span><br><span class=\"line\">210621 18:35:42 [Note] /usr/sbin/mysqld: ready for connections.</span><br><span class=\"line\">Version: &#x27;5.5.62&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  MySQL Community Server (GPL)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"general-log（普通日志）\"><a href=\"#general-log（普通日志）\" class=\"headerlink\" title=\"general log（普通日志）\"></a>general log（普通日志）</h1><h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>general log 是 MySQL 的普通日志。<br>主要记录 MySQL 服务实例所有的操作，如：select，update，insert，delete等操作，无论操作是否成功执行都会记录。还记录 MySQL 客户端与 MySQL 服务端连接及断开的相关信息，无论连接成功还是失败。</p>\n<p><strong>注意：由于普通日志几乎记录了MySQL的所有操作，对于数据访问频繁的数据库服务器而言，<br>如果开启MySQL的普通查询日志将会大幅度的降低数据库的性能，因此建议关闭普通查询日志。<br>只有在特殊时期，如需要追踪某些特殊的查询日志，可以临时打开普通的查询日志。</strong></p>\n<hr>\n<h2 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>普通日志相关参数：</p>\n<ul>\n<li>general_log：是否开启普通日志</li>\n<li>general_log_file：普通日志文件的存放路径</li>\n</ul>\n<hr>\n<h2 id=\"开启普通日志\"><a href=\"#开启普通日志\" class=\"headerlink\" title=\"开启普通日志\"></a>开启普通日志</h2><p>查看普通日志的当前配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%general_log%&#x27;;</span><br><span class=\"line\">+------------------+-----------------------------------+</span><br><span class=\"line\">| Variable_name    | Value                             |</span><br><span class=\"line\">+------------------+-----------------------------------+</span><br><span class=\"line\">| general_log      | OFF                               |</span><br><span class=\"line\">| general_log_file | /var/lib/mysql/VM-16-4-centos.log |</span><br><span class=\"line\">+------------------+-----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%general_log%&#x27;</span>; #查看普通日志是否开启</span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%general_log_file%&#x27;</span>; #查看普通日志文件的存放路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log<span class=\"operator\">=</span><span class=\"number\">1</span>; #开启普通日志</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;/var/lib/mysql/general.log&#x27;</span>; #指定普通日志文件的存放路径</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">general_log=1</span><br><span class=\"line\">general_log_file=/var/lib/mysql/general.log</span><br></pre></td></tr></table></figure>\n\n<p>当前通过修改配置文件指定普通日志配置，重启服务后查看普通日志。<br>结论：可以看到，普通日志记录了客户端登录，查询数据库，查询表的所有操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-4-centos mysql]# cat /var/lib/mysql/general.log </span><br><span class=\"line\">/usr/sbin/mysqld, Version: 5.5.62-log (MySQL Community Server (GPL)). started with:</span><br><span class=\"line\">Tcp port: 3306  Unix socket: /var/lib/mysql/mysql.sock</span><br><span class=\"line\">Time                 Id Command    Argument</span><br><span class=\"line\">210621 21:51:45\t    1 Connect\troot@localhost on </span><br><span class=\"line\">\t\t    1 Connect\tAccess denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: NO)</span><br><span class=\"line\">210621 21:52:01\t    2 Connect\troot@localhost on </span><br><span class=\"line\">\t\t    2 Query\tselect @@version_comment limit 1</span><br><span class=\"line\">210621 21:52:51\t    2 Query\tSELECT DATABASE()</span><br><span class=\"line\">\t\t    2 Init DB\ttest</span><br><span class=\"line\">210621 21:53:00\t    2 Query\tselect * from a</span><br><span class=\"line\">210621 21:53:03\t    2 Query\tselect * from a</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"普通日志文件处理\"><a href=\"#普通日志文件处理\" class=\"headerlink\" title=\"普通日志文件处理\"></a>普通日志文件处理</h2><p>//TODO</p>\n<hr>\n<h1 id=\"slow-query-log（慢查询日志）\"><a href=\"#slow-query-log（慢查询日志）\" class=\"headerlink\" title=\"slow query log（慢查询日志）\"></a>slow query log（慢查询日志）</h1><h2 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>slow query log 是 MySQL 的慢查询日志。<br>主要记录 MySQL 中【响应时间超过阀值的sql语句】 或【没有使用索引】的查询语句。</p>\n<p><strong>注意：慢查询日志与普通查询日志不同，区别在于：慢查询日志只包含成功执行过的查询语句。</strong>  </p>\n<hr>\n<h2 id=\"相关参数-1\"><a href=\"#相关参数-1\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>以下是慢查询日志相关的参数：</p>\n<ul>\n<li>slow_query_log：慢查询日志是否开启</li>\n<li>slow_query_log_file：慢查询日志文件的存放路径，如果没有指定参数slow_query_log_file的话，系统默认会给一个缺省的文件host_name-slow.log。</li>\n<li>long_query_time：设置慢查询的时间阈值，默认阈值是10s。</li>\n<li>log_quries_not_using_indexes：是否将不适用索引的查询语句记录到慢查询日志中，无论查询速度有多快。</li>\n<li>slow_queries：记录当前慢查询sql条数</li>\n</ul>\n<hr>\n<h2 id=\"开启慢查询日志\"><a href=\"#开启慢查询日志\" class=\"headerlink\" title=\"开启慢查询日志\"></a>开启慢查询日志</h2><p>查看慢查询日志的当前配置.<br>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%slow_query_log%&#x27;;</span><br><span class=\"line\">+---------------------+----------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                  |</span><br><span class=\"line\">+---------------------+----------------------------------------+</span><br><span class=\"line\">| slow_query_log      | OFF                                    |</span><br><span class=\"line\">| slow_query_log_file | /var/lib/mysql/VM-16-4-centos-slow.log |</span><br><span class=\"line\">+---------------------+----------------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_query_log%&#x27;</span>; #查看是否开启</span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_query_log_file%&#x27;</span>; #查看慢查询日志文件的存放路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> slow_query_log<span class=\"operator\">=</span><span class=\"number\">1</span>; #设置开启慢查询日志</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">slow_query_log_file=/var/lib/mysql/atguigu-slow.log</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"什么-sql-会被记录到慢查询日志\"><a href=\"#什么-sql-会被记录到慢查询日志\" class=\"headerlink\" title=\"什么 sql 会被记录到慢查询日志\"></a>什么 sql 会被记录到慢查询日志</h2><p>问：开启慢查询日志后，什么 sql 会被记录到慢查询日志里面呢？<br>答：慢查询日志主要记录【响应时间超过阀值的sql语句】或【没有使用索引】的查询语句。</p>\n<h3 id=\"记录响应时间超过阀值的sql语句\"><a href=\"#记录响应时间超过阀值的sql语句\" class=\"headerlink\" title=\"记录响应时间超过阀值的sql语句\"></a>记录响应时间超过阀值的sql语句</h3><p>时间阈值是由 long_query_time 控制的.<br>long_query_time：设置慢查询的时间阈值，默认阈值是10s。可以使用命令修改，也可以在my.cnf参数里面修改。</p>\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;long_query_time%&#x27;</span>; #查看long_query_time的值</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> long_query_time<span class=\"operator\">=</span><span class=\"number\">5</span>; #设置查询超过<span class=\"number\">5</span>秒则算慢查询<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">long_query_time=5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记录没有使用索引的查询语句\"><a href=\"#记录没有使用索引的查询语句\" class=\"headerlink\" title=\"记录没有使用索引的查询语句\"></a>记录没有使用索引的查询语句</h3><p>log_quries_not_using_indexes：是否将不使用索引的查询语句记录到慢查询日志中，无论查询速度有多快。</p>\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%log_queries_not_using_indexes%&#x27;</span>; #查看值</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> log_queries_not_using_indexes<span class=\"operator\">=</span><span class=\"number\">1</span>; #设置开启记录没有使用索引的查询语句</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：（永久开启）<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_queries_not_using_indexes=1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"慢查询-sql-案例\"><a href=\"#慢查询-sql-案例\" class=\"headerlink\" title=\"慢查询 sql 案例\"></a>慢查询 sql 案例</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> slow_query_log<span class=\"operator\">=</span><span class=\"number\">1</span>; #设置开启慢查询日志</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> long_query_time<span class=\"operator\">=</span><span class=\"number\">3</span>; #设置查询超过<span class=\"number\">3</span>秒则算慢查询<span class=\"keyword\">sql</span>（注意，这里是全局命令设置，需要重新连接才生效）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> sleep(<span class=\"number\">4</span>) #模拟一次查询，查询耗时<span class=\"number\">4</span>秒</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_queries%&#x27;</span>; #查询当前慢查询<span class=\"keyword\">sql</span>条数命令</span><br></pre></td></tr></table></figure>\n\n<p>去mysql的data目录下找到慢查询日志文件：<br>我没有去配置日志文件名，所以是一个默认的文件名：localhost-slow.log</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MySQL/1624261484667.jpg\" alt=\"慢查询日志图片\"></p>\n<p>可以看到当前慢查询日志中会记录查询超过了阈值的sql，我们刚刚的select sleep(4)就在当中，而且可以明确的看到当前sql，当前查询时间，锁的时间，一共有多少数据。</p>\n<hr>\n<h2 id=\"日志查询分析器（mysqldumpslow）\"><a href=\"#日志查询分析器（mysqldumpslow）\" class=\"headerlink\" title=\"日志查询分析器（mysqldumpslow）\"></a>日志查询分析器（mysqldumpslow）</h2><p>日志查询分析器的体现：<br>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MySQL/%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90%E5%99%A8%E4%BD%BF%E7%94%A8.jpg\" alt=\"日志查询分析器帮助信息图片\"></p>\n<p>mysqldumpslow –help  查看mysqldumpslow的帮助信息</p>\n<ul>\n<li>s：表示按照何种方式排序</li>\n<li>c：访问次数</li>\n<li>l：锁定时间</li>\n<li>r：返回记录</li>\n<li>t：查询时间</li>\n<li>al：平均锁定时间</li>\n<li>ar：平均返回记录数</li>\n<li>at：平均查询时间</li>\n<li>t：即为返回前面多少条数据</li>\n<li>g：后边搭配一个正则匹配模式，大小写不敏感。</li>\n</ul>\n<p>分析器常用的方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#得到返回数据集最多的<span class=\"number\">10</span>个<span class=\"keyword\">SQL</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>localhost<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">#得到访问次数最多的<span class=\"number\">10</span>个<span class=\"keyword\">SQL</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s c <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>atguigu<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">#得到按照时间排序的前<span class=\"number\">10</span>条里面含有左连接的查询<span class=\"keyword\">sql</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s t <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">-</span>g &quot;left join&quot; <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>atguigu<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">#另外建议在使用这些命令时结合 <span class=\"operator\">|</span> 和more 使用 ，否则有可能出现爆屏情况</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>atguigu<span class=\"operator\">-</span>slow.log <span class=\"operator\">|</span> more</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"bin-log（二进制日志）\"><a href=\"#bin-log（二进制日志）\" class=\"headerlink\" title=\"bin log（二进制日志）\"></a>bin log（二进制日志）</h1><h2 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>bin log 是 MySQL 的二进制文件，也叫归档日志。<br>主要记录 MySQL 数据库中的所有更新操作，如：use，insert，delete，update，create，alter，drop等操作。不改变数据的sql不会记录，比如 select 语句一把不会被记录，因为他们不会对数据产生任何改动。<br>用一句更简介易懂的话概况就是：所有涉及数据变动的操作，都会记录到二进制日志文件中。</p>\n<blockquote>\n<p>重要的使用场景：<br>mysql主从复制：mysql replication 在 master 端开启 bin log，master 把它的二进制日志传递给 slaves 来达到master-slave数据一致的目的。<br>数据恢复：通过mysqlbinlog工具来恢复数据</p>\n</blockquote>\n<blockquote>\n<p>二进制日志包含两种文件：<br>二进制日志索引文件（文件名后缀.index），用于记录索引的二进制文件<br>二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML语句事件</p>\n</blockquote>\n<hr>\n<h2 id=\"相关参数-2\"><a href=\"#相关参数-2\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>bin log相关参数：</p>\n<ul>\n<li>log_bin：指定 bin log是否打开</li>\n<li>log_bin_basename：指定的是 bin log 的基本文件名，后面会追加标识来表示每一个文件</li>\n<li>log_bin_index：指定的是 bin log 文件的索引文件，这个文件管理了所有的 bin log 文件的目录</li>\n</ul>\n<hr>\n<h2 id=\"开启二进制日志\"><a href=\"#开启二进制日志\" class=\"headerlink\" title=\"开启二进制日志\"></a>开启二进制日志</h2><p>查看二进制日志的当前配置：<br>可以看到，二进制日志默认是不开启的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;log_bin&#x27;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| log_bin       | OFF   |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=001</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件后，重启服务配置生效<br>查看 bin log 日志文件<br><img src=\"/blog/.io//1624350274231.jpg\" alt=\"bin log 日志文件\"></p>\n<hr>\n<h2 id=\"查看二进制日志文件\"><a href=\"#查看二进制日志文件\" class=\"headerlink\" title=\"查看二进制日志文件\"></a>查看二进制日志文件</h2><p>注意：<br>1）bin log日志与数据库文件在同目录中。<br>2）bin log是二进制文件，普通文件查看器cat、more、vim等都无法打开，必须使用自带的mysqlbinlog命令查看。  </p>\n<h3 id=\"mysqlbinlog-工具查看\"><a href=\"#mysqlbinlog-工具查看\" class=\"headerlink\" title=\"mysqlbinlog 工具查看\"></a>mysqlbinlog 工具查看</h3><blockquote>\n<p>mysqlbinlog 是 MySQL 中自带的工具，具体位置在 MySQL 的 bin 目录下。<br>在Mysql5.5以下版本使用mysqlbinlog命令时如果报错，就加上”–no-defaults”选项</p>\n</blockquote>\n<p>查看二进制日志文件：mysqlbinlog mysql-bin.000002</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># at 391</span><br><span class=\"line\">#210622 17:06:40 server id 1  end_log_pos 501   Query   thread_id=2     exec_time=0     error_code=0</span><br><span class=\"line\">SET TIMESTAMP=1624352800/*!*/;</span><br><span class=\"line\">insert into admin_info values(1, &quot;admin&quot;, 100) #执行的sql</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"># at 501</span><br><span class=\"line\">#210622 17:06:40 server id 1  end_log_pos 528   Xid = 7 #执行的时间</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图解<br>server id 1：数据库主机的服务号<br>end_log_pos 528：sql结束时的pos节点<br>thread_id=11：线程号  </p>\n</blockquote>\n<h3 id=\"命令查看\"><a href=\"#命令查看\" class=\"headerlink\" title=\"命令查看\"></a>命令查看</h3><blockquote>\n<p>mysqlbinlog 查看取出 bin log 日志的全文内容比较多，不容易分辨查看到pos点信息<br>介绍一种更为方便的查询命令 show bin log events</p>\n</blockquote>\n<p>命令解析 show bin log events [IN ‘log_name’] [FROM pos] [LIMIT [offset,] row_count];<br>参数解析：<br>a、IN ‘log_name’:指定要查询的bin log文件名（不指定就是第一个bin log文件<br>b、FROM pos:指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）<br>c、LIMIT【offset】：偏移量(不指定就是0)<br>d、row_count :查询总条数（不指定就是所有行）  </p>\n<p>show bin log events查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show bin log events in&#x27;mysql-bin.000002&#x27;;</span><br><span class=\"line\">+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+</span><br><span class=\"line\">| Log_name         | Pos | Event_type  | Server_id | End_log_pos | Info                                                                            |</span><br><span class=\"line\">+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+</span><br><span class=\"line\">| mysql-bin.000002 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.62-log, bin log ver: 4                                           |</span><br><span class=\"line\">| mysql-bin.000002 | 107 | Query       |         1 |         192 | create database admin                                                           |</span><br><span class=\"line\">| mysql-bin.000002 | 192 | Query       |         1 |         322 | use `admin`; create table admin_info(id int(11), name varchar(50), age int(11)) |</span><br><span class=\"line\">| mysql-bin.000002 | 322 | Query       |         1 |         391 | BEGIN                                                                           |</span><br><span class=\"line\">| mysql-bin.000002 | 391 | Query       |         1 |         501 | use `admin`; insert into admin_info values(1, &quot;admin&quot;, 100)                     |</span><br><span class=\"line\">| mysql-bin.000002 | 501 | Xid         |         1 |         528 | COMMIT /* xid=7 */                                                              |</span><br><span class=\"line\">| mysql-bin.000002 | 528 | Query       |         1 |         639 | use `admin`; create table role(id int(11), name varchar(25))                    |</span><br><span class=\"line\">+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"二进制日志文件常用操作命令\"><a href=\"#二进制日志文件常用操作命令\" class=\"headerlink\" title=\"二进制日志文件常用操作命令\"></a>二进制日志文件常用操作命令</h2><p>1）查看所有 bin log 日志。<br>show master logs;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master logs;</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">| Log_name         | File_size |</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">| mysql-bin.000001 |       107 |</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>2）查看master状态，即最后（最新）一个bin log日志的编号名称，及其最后一个操作事件pos结束点(Position)值。<br>show master status;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+</span><br><span class=\"line\">| File             | Position | bin log_Do_DB | bin log_Ignore_DB |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+</span><br><span class=\"line\">| mysql-bin.000001 |      107 |              |                  |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>3）flush 刷新log日志，自此刻开始产生一个新编号的bin log日志文件;<br>flush logs;</p>\n<p>注意：每当mysqld服务重启时，会自动执行此命令，刷新bin log日志；在mysqlddump备份数据时加-F选项也会刷新bin log日志；</p>\n<p>4）重置（清空）所有bin log日志;<br>reset master;</p>\n<hr>\n<h2 id=\"利用二进制日志恢复数据\"><a href=\"#利用二进制日志恢复数据\" class=\"headerlink\" title=\"利用二进制日志恢复数据\"></a>利用二进制日志恢复数据</h2><p>// TODO</p>\n<hr>\n<h1 id=\"redo-log（重做日志）\"><a href=\"#redo-log（重做日志）\" class=\"headerlink\" title=\"redo log（重做日志）\"></a>redo log（重做日志）</h1><h2 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>redo log 是 MySQL 的物理日志，也叫重做日志，记录存储引擎 InnoDB 的事务日志。</p>\n<p>MySQL 每执行一条 SQL 更新语句，不是每次数据更改都立刻写到磁盘，而是先将记录写到 redo log 里面，并更新内存（这时内存与磁盘的数据不一致，将这种有差异的数据称为脏页），一段时间后，再一次性将多个操作记录写到到磁盘上，这样可以减少磁盘 io 成本，提高操作速度。先写日志，再写磁盘，这就是 MySQL 里经常说到的 WAL 技术，即 Write-Ahead Logging，又叫预写日志。MySQL 通过 WAL 技术保证事务的持久性。</p>\n<hr>\n<h1 id=\"undo-log（回滚日志）\"><a href=\"#undo-log（回滚日志）\" class=\"headerlink\" title=\"undo log（回滚日志）\"></a>undo log（回滚日志）</h1><h2 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h2><hr>\n<h2 id=\"相关参数-3\"><a href=\"#相关参数-3\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>undo log相关参数：</p>\n<ul>\n<li>innodb_undo_logs :设置回滚日志的回滚段大小，默认为128k</li>\n<li>innodb_undo_directory: 设置回滚日志存放的目录。</li>\n<li>innodb_undo_tablespace:设置了回滚日志由多少个回滚日志文件组成，默认为0.</li>\n</ul>\n<hr>\n<h1 id=\"relay-log（中继日志）\"><a href=\"#relay-log（中继日志）\" class=\"headerlink\" title=\"relay log（中继日志）\"></a>relay log（中继日志）</h1><h2 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>relay-log中继日志是连接master和slave的核心.</p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>注意：当前设置系统参数方式，mysql重启即失效，如果要永久存在则需要修改配置文件。</p>\n<h1 id=\"error-log（错误日志）\"><a href=\"#error-log（错误日志）\" class=\"headerlink\" title=\"error log（错误日志）\"></a>error log（错误日志）</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>error log 是 MySQL 的错误日志。<br>主要记录 MySQL 服务实例每次启动，停止的详细信息，以及 MySQL 实例运行过程中产生的警告或者错误信息。<br>和其他的日志不同，MySQL的error日志必须开启，无法关闭。</p>\n<p><strong>注意：默认情况下，错误日志的文件名为：主机名.err。 但 error 日志并不会记录所有的错误信息，只有MySQL服务实例运行过程中发声的关键错误（critical）才会被记录下来。</strong></p>\n<hr>","more":"<h2 id=\"设置错误日志\"><a href=\"#设置错误日志\" class=\"headerlink\" title=\"设置错误日志\"></a>设置错误日志</h2><p>查看当前的错误日志文件<br>没有设置错误日志文件，默认指定了一个的错误日志文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;log_error&#x27;;</span><br><span class=\"line\">+---------------+----------------------+</span><br><span class=\"line\">| Variable_name | Value                |</span><br><span class=\"line\">+---------------+----------------------+</span><br><span class=\"line\">| log_error     | ./VM-16-4-centos.err |</span><br><span class=\"line\">+---------------+----------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;log_error&#x27;</span>; #查看当前的错误日志文件，如果没有指定，默认有一个错误日志文件</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> log_error <span class=\"operator\">=</span> <span class=\"string\">&#x27;/var/lib/mysql/error.log&#x27;</span>; #设置错误日志文件</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-error=&#x27;/var/lib/mysql/error.log&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>当前通过修改配置文件指定错误配置文件，重启服务配置生效<br>可以看到当启动服务后，打印出Starting MySQL.Logging to ‘/var/lib/mysql/error.log’<br>这代表设置成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-4-centos mysql]# service mysql stop</span><br><span class=\"line\">Shutting down MySQL. SUCCESS! </span><br><span class=\"line\">[root@VM-16-4-centos mysql]# service mysql start</span><br><span class=\"line\">Starting MySQL.Logging to &#x27;/var/lib/mysql/error.log&#x27;.</span><br><span class=\"line\">. SUCCESS! </span><br></pre></td></tr></table></figure>\n\n<p>查看错误日志文件：<br>发现 mysql 实例启动的日志【验证了错误日志会记录实例每次启动，停止的详细信息】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-4-centos mysql]# cat /var/lib/mysql/error.log </span><br><span class=\"line\">210621 18:35:41 [Note] Plugin &#x27;FEDERATED&#x27; is disabled.</span><br><span class=\"line\">210621 18:35:41 InnoDB: The InnoDB memory heap is disabled</span><br><span class=\"line\">210621 18:35:41 InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class=\"line\">210621 18:35:41 InnoDB: Compressed tables use zlib 1.2.11</span><br><span class=\"line\">210621 18:35:41 InnoDB: Using Linux native AIO</span><br><span class=\"line\">210621 18:35:41 InnoDB: Initializing buffer pool, size = 128.0M</span><br><span class=\"line\">210621 18:35:41 InnoDB: Completed initialization of buffer pool</span><br><span class=\"line\">210621 18:35:41 InnoDB: highest supported file format is Barracuda.</span><br><span class=\"line\">210621 18:35:41  InnoDB: Waiting for the background threads to start</span><br><span class=\"line\">210621 18:35:42 InnoDB: 5.5.62 started; log sequence number 1598913</span><br><span class=\"line\">210621 18:35:42 [Note] Server hostname (bind-address): &#x27;0.0.0.0&#x27;; port: 3306</span><br><span class=\"line\">210621 18:35:42 [Note]   - &#x27;0.0.0.0&#x27; resolves to &#x27;0.0.0.0&#x27;;</span><br><span class=\"line\">210621 18:35:42 [Note] Server socket created on IP: &#x27;0.0.0.0&#x27;.</span><br><span class=\"line\">210621 18:35:42 [Note] Event Scheduler: Loaded 0 events</span><br><span class=\"line\">210621 18:35:42 [Note] /usr/sbin/mysqld: ready for connections.</span><br><span class=\"line\">Version: &#x27;5.5.62&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  MySQL Community Server (GPL)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"general-log（普通日志）\"><a href=\"#general-log（普通日志）\" class=\"headerlink\" title=\"general log（普通日志）\"></a>general log（普通日志）</h1><h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>general log 是 MySQL 的普通日志。<br>主要记录 MySQL 服务实例所有的操作，如：select，update，insert，delete等操作，无论操作是否成功执行都会记录。还记录 MySQL 客户端与 MySQL 服务端连接及断开的相关信息，无论连接成功还是失败。</p>\n<p><strong>注意：由于普通日志几乎记录了MySQL的所有操作，对于数据访问频繁的数据库服务器而言，<br>如果开启MySQL的普通查询日志将会大幅度的降低数据库的性能，因此建议关闭普通查询日志。<br>只有在特殊时期，如需要追踪某些特殊的查询日志，可以临时打开普通的查询日志。</strong></p>\n<hr>\n<h2 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>普通日志相关参数：</p>\n<ul>\n<li>general_log：是否开启普通日志</li>\n<li>general_log_file：普通日志文件的存放路径</li>\n</ul>\n<hr>\n<h2 id=\"开启普通日志\"><a href=\"#开启普通日志\" class=\"headerlink\" title=\"开启普通日志\"></a>开启普通日志</h2><p>查看普通日志的当前配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%general_log%&#x27;;</span><br><span class=\"line\">+------------------+-----------------------------------+</span><br><span class=\"line\">| Variable_name    | Value                             |</span><br><span class=\"line\">+------------------+-----------------------------------+</span><br><span class=\"line\">| general_log      | OFF                               |</span><br><span class=\"line\">| general_log_file | /var/lib/mysql/VM-16-4-centos.log |</span><br><span class=\"line\">+------------------+-----------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%general_log%&#x27;</span>; #查看普通日志是否开启</span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%general_log_file%&#x27;</span>; #查看普通日志文件的存放路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log<span class=\"operator\">=</span><span class=\"number\">1</span>; #开启普通日志</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> general_log_file<span class=\"operator\">=</span><span class=\"string\">&#x27;/var/lib/mysql/general.log&#x27;</span>; #指定普通日志文件的存放路径</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">general_log=1</span><br><span class=\"line\">general_log_file=/var/lib/mysql/general.log</span><br></pre></td></tr></table></figure>\n\n<p>当前通过修改配置文件指定普通日志配置，重启服务后查看普通日志。<br>结论：可以看到，普通日志记录了客户端登录，查询数据库，查询表的所有操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@VM-16-4-centos mysql]# cat /var/lib/mysql/general.log </span><br><span class=\"line\">/usr/sbin/mysqld, Version: 5.5.62-log (MySQL Community Server (GPL)). started with:</span><br><span class=\"line\">Tcp port: 3306  Unix socket: /var/lib/mysql/mysql.sock</span><br><span class=\"line\">Time                 Id Command    Argument</span><br><span class=\"line\">210621 21:51:45\t    1 Connect\troot@localhost on </span><br><span class=\"line\">\t\t    1 Connect\tAccess denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: NO)</span><br><span class=\"line\">210621 21:52:01\t    2 Connect\troot@localhost on </span><br><span class=\"line\">\t\t    2 Query\tselect @@version_comment limit 1</span><br><span class=\"line\">210621 21:52:51\t    2 Query\tSELECT DATABASE()</span><br><span class=\"line\">\t\t    2 Init DB\ttest</span><br><span class=\"line\">210621 21:53:00\t    2 Query\tselect * from a</span><br><span class=\"line\">210621 21:53:03\t    2 Query\tselect * from a</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"普通日志文件处理\"><a href=\"#普通日志文件处理\" class=\"headerlink\" title=\"普通日志文件处理\"></a>普通日志文件处理</h2><p>//TODO</p>\n<hr>\n<h1 id=\"slow-query-log（慢查询日志）\"><a href=\"#slow-query-log（慢查询日志）\" class=\"headerlink\" title=\"slow query log（慢查询日志）\"></a>slow query log（慢查询日志）</h1><h2 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>slow query log 是 MySQL 的慢查询日志。<br>主要记录 MySQL 中【响应时间超过阀值的sql语句】 或【没有使用索引】的查询语句。</p>\n<p><strong>注意：慢查询日志与普通查询日志不同，区别在于：慢查询日志只包含成功执行过的查询语句。</strong>  </p>\n<hr>\n<h2 id=\"相关参数-1\"><a href=\"#相关参数-1\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>以下是慢查询日志相关的参数：</p>\n<ul>\n<li>slow_query_log：慢查询日志是否开启</li>\n<li>slow_query_log_file：慢查询日志文件的存放路径，如果没有指定参数slow_query_log_file的话，系统默认会给一个缺省的文件host_name-slow.log。</li>\n<li>long_query_time：设置慢查询的时间阈值，默认阈值是10s。</li>\n<li>log_quries_not_using_indexes：是否将不适用索引的查询语句记录到慢查询日志中，无论查询速度有多快。</li>\n<li>slow_queries：记录当前慢查询sql条数</li>\n</ul>\n<hr>\n<h2 id=\"开启慢查询日志\"><a href=\"#开启慢查询日志\" class=\"headerlink\" title=\"开启慢查询日志\"></a>开启慢查询日志</h2><p>查看慢查询日志的当前配置.<br>默认情况下slow_query_log的值为OFF，表示慢查询日志是禁用的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%slow_query_log%&#x27;;</span><br><span class=\"line\">+---------------------+----------------------------------------+</span><br><span class=\"line\">| Variable_name       | Value                                  |</span><br><span class=\"line\">+---------------------+----------------------------------------+</span><br><span class=\"line\">| slow_query_log      | OFF                                    |</span><br><span class=\"line\">| slow_query_log_file | /var/lib/mysql/VM-16-4-centos-slow.log |</span><br><span class=\"line\">+---------------------+----------------------------------------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_query_log%&#x27;</span>; #查看是否开启</span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_query_log_file%&#x27;</span>; #查看慢查询日志文件的存放路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> slow_query_log<span class=\"operator\">=</span><span class=\"number\">1</span>; #设置开启慢查询日志</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">slow_query_log=1</span><br><span class=\"line\">slow_query_log_file=/var/lib/mysql/atguigu-slow.log</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"什么-sql-会被记录到慢查询日志\"><a href=\"#什么-sql-会被记录到慢查询日志\" class=\"headerlink\" title=\"什么 sql 会被记录到慢查询日志\"></a>什么 sql 会被记录到慢查询日志</h2><p>问：开启慢查询日志后，什么 sql 会被记录到慢查询日志里面呢？<br>答：慢查询日志主要记录【响应时间超过阀值的sql语句】或【没有使用索引】的查询语句。</p>\n<h3 id=\"记录响应时间超过阀值的sql语句\"><a href=\"#记录响应时间超过阀值的sql语句\" class=\"headerlink\" title=\"记录响应时间超过阀值的sql语句\"></a>记录响应时间超过阀值的sql语句</h3><p>时间阈值是由 long_query_time 控制的.<br>long_query_time：设置慢查询的时间阈值，默认阈值是10s。可以使用命令修改，也可以在my.cnf参数里面修改。</p>\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;long_query_time%&#x27;</span>; #查看long_query_time的值</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> long_query_time<span class=\"operator\">=</span><span class=\"number\">5</span>; #设置查询超过<span class=\"number\">5</span>秒则算慢查询<span class=\"keyword\">sql</span></span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">long_query_time=5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记录没有使用索引的查询语句\"><a href=\"#记录没有使用索引的查询语句\" class=\"headerlink\" title=\"记录没有使用索引的查询语句\"></a>记录没有使用索引的查询语句</h3><p>log_quries_not_using_indexes：是否将不使用索引的查询语句记录到慢查询日志中，无论查询速度有多快。</p>\n<p>命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%log_queries_not_using_indexes%&#x27;</span>; #查看值</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> log_queries_not_using_indexes<span class=\"operator\">=</span><span class=\"number\">1</span>; #设置开启记录没有使用索引的查询语句</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：（永久开启）<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_queries_not_using_indexes=1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"慢查询-sql-案例\"><a href=\"#慢查询-sql-案例\" class=\"headerlink\" title=\"慢查询 sql 案例\"></a>慢查询 sql 案例</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> slow_query_log<span class=\"operator\">=</span><span class=\"number\">1</span>; #设置开启慢查询日志</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> long_query_time<span class=\"operator\">=</span><span class=\"number\">3</span>; #设置查询超过<span class=\"number\">3</span>秒则算慢查询<span class=\"keyword\">sql</span>（注意，这里是全局命令设置，需要重新连接才生效）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> sleep(<span class=\"number\">4</span>) #模拟一次查询，查询耗时<span class=\"number\">4</span>秒</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> status <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%slow_queries%&#x27;</span>; #查询当前慢查询<span class=\"keyword\">sql</span>条数命令</span><br></pre></td></tr></table></figure>\n\n<p>去mysql的data目录下找到慢查询日志文件：<br>我没有去配置日志文件名，所以是一个默认的文件名：localhost-slow.log</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MySQL/1624261484667.jpg\" alt=\"慢查询日志图片\"></p>\n<p>可以看到当前慢查询日志中会记录查询超过了阈值的sql，我们刚刚的select sleep(4)就在当中，而且可以明确的看到当前sql，当前查询时间，锁的时间，一共有多少数据。</p>\n<hr>\n<h2 id=\"日志查询分析器（mysqldumpslow）\"><a href=\"#日志查询分析器（mysqldumpslow）\" class=\"headerlink\" title=\"日志查询分析器（mysqldumpslow）\"></a>日志查询分析器（mysqldumpslow）</h2><p>日志查询分析器的体现：<br>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。</p>\n<p><img src=\"https://niubilityoyr.github.io/images/MySQL/%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90%E5%99%A8%E4%BD%BF%E7%94%A8.jpg\" alt=\"日志查询分析器帮助信息图片\"></p>\n<p>mysqldumpslow –help  查看mysqldumpslow的帮助信息</p>\n<ul>\n<li>s：表示按照何种方式排序</li>\n<li>c：访问次数</li>\n<li>l：锁定时间</li>\n<li>r：返回记录</li>\n<li>t：查询时间</li>\n<li>al：平均锁定时间</li>\n<li>ar：平均返回记录数</li>\n<li>at：平均查询时间</li>\n<li>t：即为返回前面多少条数据</li>\n<li>g：后边搭配一个正则匹配模式，大小写不敏感。</li>\n</ul>\n<p>分析器常用的方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#得到返回数据集最多的<span class=\"number\">10</span>个<span class=\"keyword\">SQL</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>localhost<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">#得到访问次数最多的<span class=\"number\">10</span>个<span class=\"keyword\">SQL</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s c <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>atguigu<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">#得到按照时间排序的前<span class=\"number\">10</span>条里面含有左连接的查询<span class=\"keyword\">sql</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s t <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">-</span>g &quot;left join&quot; <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>atguigu<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\">#另外建议在使用这些命令时结合 <span class=\"operator\">|</span> 和more 使用 ，否则有可能出现爆屏情况</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>atguigu<span class=\"operator\">-</span>slow.log <span class=\"operator\">|</span> more</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"bin-log（二进制日志）\"><a href=\"#bin-log（二进制日志）\" class=\"headerlink\" title=\"bin log（二进制日志）\"></a>bin log（二进制日志）</h1><h2 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>bin log 是 MySQL 的二进制文件，也叫归档日志。<br>主要记录 MySQL 数据库中的所有更新操作，如：use，insert，delete，update，create，alter，drop等操作。不改变数据的sql不会记录，比如 select 语句一把不会被记录，因为他们不会对数据产生任何改动。<br>用一句更简介易懂的话概况就是：所有涉及数据变动的操作，都会记录到二进制日志文件中。</p>\n<blockquote>\n<p>重要的使用场景：<br>mysql主从复制：mysql replication 在 master 端开启 bin log，master 把它的二进制日志传递给 slaves 来达到master-slave数据一致的目的。<br>数据恢复：通过mysqlbinlog工具来恢复数据</p>\n</blockquote>\n<blockquote>\n<p>二进制日志包含两种文件：<br>二进制日志索引文件（文件名后缀.index），用于记录索引的二进制文件<br>二进制日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML语句事件</p>\n</blockquote>\n<hr>\n<h2 id=\"相关参数-2\"><a href=\"#相关参数-2\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>bin log相关参数：</p>\n<ul>\n<li>log_bin：指定 bin log是否打开</li>\n<li>log_bin_basename：指定的是 bin log 的基本文件名，后面会追加标识来表示每一个文件</li>\n<li>log_bin_index：指定的是 bin log 文件的索引文件，这个文件管理了所有的 bin log 文件的目录</li>\n</ul>\n<hr>\n<h2 id=\"开启二进制日志\"><a href=\"#开启二进制日志\" class=\"headerlink\" title=\"开启二进制日志\"></a>开启二进制日志</h2><p>查看二进制日志的当前配置：<br>可以看到，二进制日志默认是不开启的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;log_bin&#x27;;</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| log_bin       | OFF   |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：(永久开启)<br>修改 my.cnf 文件，在 [mysqld] 下增加或修改参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=001</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件后，重启服务配置生效<br>查看 bin log 日志文件<br><img src=\"/blog/.io//1624350274231.jpg\" alt=\"bin log 日志文件\"></p>\n<hr>\n<h2 id=\"查看二进制日志文件\"><a href=\"#查看二进制日志文件\" class=\"headerlink\" title=\"查看二进制日志文件\"></a>查看二进制日志文件</h2><p>注意：<br>1）bin log日志与数据库文件在同目录中。<br>2）bin log是二进制文件，普通文件查看器cat、more、vim等都无法打开，必须使用自带的mysqlbinlog命令查看。  </p>\n<h3 id=\"mysqlbinlog-工具查看\"><a href=\"#mysqlbinlog-工具查看\" class=\"headerlink\" title=\"mysqlbinlog 工具查看\"></a>mysqlbinlog 工具查看</h3><blockquote>\n<p>mysqlbinlog 是 MySQL 中自带的工具，具体位置在 MySQL 的 bin 目录下。<br>在Mysql5.5以下版本使用mysqlbinlog命令时如果报错，就加上”–no-defaults”选项</p>\n</blockquote>\n<p>查看二进制日志文件：mysqlbinlog mysql-bin.000002</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># at 391</span><br><span class=\"line\">#210622 17:06:40 server id 1  end_log_pos 501   Query   thread_id=2     exec_time=0     error_code=0</span><br><span class=\"line\">SET TIMESTAMP=1624352800/*!*/;</span><br><span class=\"line\">insert into admin_info values(1, &quot;admin&quot;, 100) #执行的sql</span><br><span class=\"line\">/*!*/;</span><br><span class=\"line\"># at 501</span><br><span class=\"line\">#210622 17:06:40 server id 1  end_log_pos 528   Xid = 7 #执行的时间</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>图解<br>server id 1：数据库主机的服务号<br>end_log_pos 528：sql结束时的pos节点<br>thread_id=11：线程号  </p>\n</blockquote>\n<h3 id=\"命令查看\"><a href=\"#命令查看\" class=\"headerlink\" title=\"命令查看\"></a>命令查看</h3><blockquote>\n<p>mysqlbinlog 查看取出 bin log 日志的全文内容比较多，不容易分辨查看到pos点信息<br>介绍一种更为方便的查询命令 show bin log events</p>\n</blockquote>\n<p>命令解析 show bin log events [IN ‘log_name’] [FROM pos] [LIMIT [offset,] row_count];<br>参数解析：<br>a、IN ‘log_name’:指定要查询的bin log文件名（不指定就是第一个bin log文件<br>b、FROM pos:指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）<br>c、LIMIT【offset】：偏移量(不指定就是0)<br>d、row_count :查询总条数（不指定就是所有行）  </p>\n<p>show bin log events查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show bin log events in&#x27;mysql-bin.000002&#x27;;</span><br><span class=\"line\">+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+</span><br><span class=\"line\">| Log_name         | Pos | Event_type  | Server_id | End_log_pos | Info                                                                            |</span><br><span class=\"line\">+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+</span><br><span class=\"line\">| mysql-bin.000002 |   4 | Format_desc |         1 |         107 | Server ver: 5.5.62-log, bin log ver: 4                                           |</span><br><span class=\"line\">| mysql-bin.000002 | 107 | Query       |         1 |         192 | create database admin                                                           |</span><br><span class=\"line\">| mysql-bin.000002 | 192 | Query       |         1 |         322 | use `admin`; create table admin_info(id int(11), name varchar(50), age int(11)) |</span><br><span class=\"line\">| mysql-bin.000002 | 322 | Query       |         1 |         391 | BEGIN                                                                           |</span><br><span class=\"line\">| mysql-bin.000002 | 391 | Query       |         1 |         501 | use `admin`; insert into admin_info values(1, &quot;admin&quot;, 100)                     |</span><br><span class=\"line\">| mysql-bin.000002 | 501 | Xid         |         1 |         528 | COMMIT /* xid=7 */                                                              |</span><br><span class=\"line\">| mysql-bin.000002 | 528 | Query       |         1 |         639 | use `admin`; create table role(id int(11), name varchar(25))                    |</span><br><span class=\"line\">+------------------+-----+-------------+-----------+-------------+---------------------------------------------------------------------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"二进制日志文件常用操作命令\"><a href=\"#二进制日志文件常用操作命令\" class=\"headerlink\" title=\"二进制日志文件常用操作命令\"></a>二进制日志文件常用操作命令</h2><p>1）查看所有 bin log 日志。<br>show master logs;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master logs;</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">| Log_name         | File_size |</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">| mysql-bin.000001 |       107 |</span><br><span class=\"line\">+------------------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>2）查看master状态，即最后（最新）一个bin log日志的编号名称，及其最后一个操作事件pos结束点(Position)值。<br>show master status;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+------------------+----------+--------------+------------------+</span><br><span class=\"line\">| File             | Position | bin log_Do_DB | bin log_Ignore_DB |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+</span><br><span class=\"line\">| mysql-bin.000001 |      107 |              |                  |</span><br><span class=\"line\">+------------------+----------+--------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>3）flush 刷新log日志，自此刻开始产生一个新编号的bin log日志文件;<br>flush logs;</p>\n<p>注意：每当mysqld服务重启时，会自动执行此命令，刷新bin log日志；在mysqlddump备份数据时加-F选项也会刷新bin log日志；</p>\n<p>4）重置（清空）所有bin log日志;<br>reset master;</p>\n<hr>\n<h2 id=\"利用二进制日志恢复数据\"><a href=\"#利用二进制日志恢复数据\" class=\"headerlink\" title=\"利用二进制日志恢复数据\"></a>利用二进制日志恢复数据</h2><p>// TODO</p>\n<hr>\n<h1 id=\"redo-log（重做日志）\"><a href=\"#redo-log（重做日志）\" class=\"headerlink\" title=\"redo log（重做日志）\"></a>redo log（重做日志）</h1><h2 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>redo log 是 MySQL 的物理日志，也叫重做日志，记录存储引擎 InnoDB 的事务日志。</p>\n<p>MySQL 每执行一条 SQL 更新语句，不是每次数据更改都立刻写到磁盘，而是先将记录写到 redo log 里面，并更新内存（这时内存与磁盘的数据不一致，将这种有差异的数据称为脏页），一段时间后，再一次性将多个操作记录写到到磁盘上，这样可以减少磁盘 io 成本，提高操作速度。先写日志，再写磁盘，这就是 MySQL 里经常说到的 WAL 技术，即 Write-Ahead Logging，又叫预写日志。MySQL 通过 WAL 技术保证事务的持久性。</p>\n<hr>\n<h1 id=\"undo-log（回滚日志）\"><a href=\"#undo-log（回滚日志）\" class=\"headerlink\" title=\"undo log（回滚日志）\"></a>undo log（回滚日志）</h1><h2 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h2><hr>\n<h2 id=\"相关参数-3\"><a href=\"#相关参数-3\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><p>undo log相关参数：</p>\n<ul>\n<li>innodb_undo_logs :设置回滚日志的回滚段大小，默认为128k</li>\n<li>innodb_undo_directory: 设置回滚日志存放的目录。</li>\n<li>innodb_undo_tablespace:设置了回滚日志由多少个回滚日志文件组成，默认为0.</li>\n</ul>\n<hr>\n<h1 id=\"relay-log（中继日志）\"><a href=\"#relay-log（中继日志）\" class=\"headerlink\" title=\"relay log（中继日志）\"></a>relay log（中继日志）</h1><h2 id=\"定义-6\"><a href=\"#定义-6\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>relay-log中继日志是连接master和slave的核心.</p>\n<hr>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckqbp4hmx0001d1s61693gdpx","category_id":"ckqbp4hn30004d1s6354o9qc4","_id":"ckqbp4hna000cd1s6hvzncvhk"},{"post_id":"ckqbp4hn10003d1s6hi59flr5","category_id":"ckqbp4hn90009d1s6945x8j17","_id":"ckqbp4hnb000gd1s603zg78u0"},{"post_id":"ckqbp4hn60007d1s6bhy67w9z","category_id":"ckqbp4hna000dd1s6drq3gzxv","_id":"ckqbp4hnc000kd1s66m7yfklo"},{"post_id":"ckqbp4hn70008d1s62v83chi4","category_id":"ckqbp4hnb000hd1s6gj6v1q76","_id":"ckqbp4hnc000md1s659akgom0"},{"post_id":"ckqbp4hne000nd1s63elxbsae","category_id":"ckqbp4hn90009d1s6945x8j17","_id":"ckqbp4hnh000sd1s69hxm219g"},{"post_id":"ckqbp4hnf000od1s63p0cfsvv","category_id":"ckqbp4hn90009d1s6945x8j17","_id":"ckqbp4hni000ud1s61mzb5mdq"},{"post_id":"ckqbp4hng000qd1s6cd7m9qld","category_id":"ckqbp4hnb000hd1s6gj6v1q76","_id":"ckqbp4hni000vd1s6eerbe8kn"}],"PostTag":[{"post_id":"ckqbp4hmx0001d1s61693gdpx","tag_id":"ckqbp4hn50005d1s60rpx5xob","_id":"ckqbp4hna000bd1s69bv83j4t"},{"post_id":"ckqbp4hn10003d1s6hi59flr5","tag_id":"ckqbp4hn9000ad1s62sgp1xix","_id":"ckqbp4hnb000fd1s6acwl4yz3"},{"post_id":"ckqbp4hn60007d1s6bhy67w9z","tag_id":"ckqbp4hna000ed1s65bdm5ihj","_id":"ckqbp4hnc000jd1s6geql8j46"},{"post_id":"ckqbp4hn70008d1s62v83chi4","tag_id":"ckqbp4hnb000id1s667hpce1j","_id":"ckqbp4hnc000ld1s6c9decxuq"},{"post_id":"ckqbp4hne000nd1s63elxbsae","tag_id":"ckqbp4hn9000ad1s62sgp1xix","_id":"ckqbp4hng000pd1s65y7xfyoq"},{"post_id":"ckqbp4hnf000od1s63p0cfsvv","tag_id":"ckqbp4hn9000ad1s62sgp1xix","_id":"ckqbp4hnh000rd1s62cre86ag"},{"post_id":"ckqbp4hng000qd1s6cd7m9qld","tag_id":"ckqbp4hnb000id1s667hpce1j","_id":"ckqbp4hni000td1s659yf1w60"}],"Tag":[{"name":"hexo","_id":"ckqbp4hn50005d1s60rpx5xob"},{"name":"MQ","_id":"ckqbp4hn9000ad1s62sgp1xix"},{"name":"Markdown","_id":"ckqbp4hna000ed1s65bdm5ihj"},{"name":"MySQL","_id":"ckqbp4hnb000id1s667hpce1j"}]}}